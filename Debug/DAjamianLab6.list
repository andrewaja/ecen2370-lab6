
DAjamianLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dc8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b2c  08007f78  08007f78  00008f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aa4  08009aa4  0000b074  2**0
                  CONTENTS
  4 .ARM          00000008  08009aa4  08009aa4  0000aaa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009aac  08009aac  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aac  08009aac  0000aaac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ab0  08009ab0  0000aab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009ab4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b074  2**0
                  CONTENTS
 10 .bss          00025d4c  20000074  20000074  0000b074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025dc0  20025dc0  0000b074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c3f  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e7  00000000  00000000  0001fce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  000231d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff7  00000000  00000000  00024678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027329  00000000  00000000  0002566f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000197f0  00000000  00000000  0004c998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2d53  00000000  00000000  00066188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00148edb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bec  00000000  00000000  00148f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0014eb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007f60 	.word	0x08007f60

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08007f60 	.word	0x08007f60

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <ApplicationInit>:
static ChipColor winner;

extern void initialise_monitor_handles(void); 

void ApplicationInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000d60:	f002 ffa0 	bl	8003ca4 <initialise_monitor_handles>

	ButtonInit();
 8000d64:	f000 fd94 	bl	8001890 <ButtonInit>
	Tim2Init();
 8000d68:	f001 fa7c 	bl	8002264 <Tim2Init>

	LTCD__Init();
 8000d6c:	f000 fec2 	bl	8001af4 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000d70:	2000      	movs	r0, #0
 8000d72:	f000 fe7f 	bl	8001a74 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000d76:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f000 ffb0 	bl	8001ce0 <LCD_Clear>
	InitializeLCDTouch();
 8000d80:	f001 f9b3 	bl	80020ea <InitializeLCDTouch>
	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000d84:	4b02      	ldr	r3, [pc, #8]	@ (8000d90 <ApplicationInit+0x34>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	719a      	strb	r2, [r3, #6]
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000090 	.word	0x20000090

08000d94 <DisplayTitle>:

void DisplayTitle(void){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLUE);
 8000d98:	211f      	movs	r1, #31
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 ffa0 	bl	8001ce0 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000da0:	2000      	movs	r0, #0
 8000da2:	f000 ffbf 	bl	8001d24 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000da6:	4816      	ldr	r0, [pc, #88]	@ (8000e00 <DisplayTitle+0x6c>)
 8000da8:	f000 ffcc 	bl	8001d44 <LCD_SetFont>

	LCD_DisplayChar(55,LCD_PIXEL_HEIGHT/2-10,'C');
 8000dac:	2243      	movs	r2, #67	@ 0x43
 8000dae:	2196      	movs	r1, #150	@ 0x96
 8000db0:	2037      	movs	r0, #55	@ 0x37
 8000db2:	f001 f845 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(70,LCD_PIXEL_HEIGHT/2-10,'o');
 8000db6:	226f      	movs	r2, #111	@ 0x6f
 8000db8:	2196      	movs	r1, #150	@ 0x96
 8000dba:	2046      	movs	r0, #70	@ 0x46
 8000dbc:	f001 f840 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(85,LCD_PIXEL_HEIGHT/2-10,'n');
 8000dc0:	226e      	movs	r2, #110	@ 0x6e
 8000dc2:	2196      	movs	r1, #150	@ 0x96
 8000dc4:	2055      	movs	r0, #85	@ 0x55
 8000dc6:	f001 f83b 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(100,LCD_PIXEL_HEIGHT/2-10,'n');
 8000dca:	226e      	movs	r2, #110	@ 0x6e
 8000dcc:	2196      	movs	r1, #150	@ 0x96
 8000dce:	2064      	movs	r0, #100	@ 0x64
 8000dd0:	f001 f836 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(115,LCD_PIXEL_HEIGHT/2-10,'e');
 8000dd4:	2265      	movs	r2, #101	@ 0x65
 8000dd6:	2196      	movs	r1, #150	@ 0x96
 8000dd8:	2073      	movs	r0, #115	@ 0x73
 8000dda:	f001 f831 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(130,LCD_PIXEL_HEIGHT/2-10,'c');
 8000dde:	2263      	movs	r2, #99	@ 0x63
 8000de0:	2196      	movs	r1, #150	@ 0x96
 8000de2:	2082      	movs	r0, #130	@ 0x82
 8000de4:	f001 f82c 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(140,LCD_PIXEL_HEIGHT/2-10,'t');
 8000de8:	2274      	movs	r2, #116	@ 0x74
 8000dea:	2196      	movs	r1, #150	@ 0x96
 8000dec:	208c      	movs	r0, #140	@ 0x8c
 8000dee:	f001 f827 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(165,LCD_PIXEL_HEIGHT/2-10,'4');
 8000df2:	2234      	movs	r2, #52	@ 0x34
 8000df4:	2196      	movs	r1, #150	@ 0x96
 8000df6:	20a5      	movs	r0, #165	@ 0xa5
 8000df8:	f001 f822 	bl	8001e40 <LCD_DisplayChar>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000004 	.word	0x20000004

08000e04 <DisplayMenu>:

void DisplayMenu(void){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLUE);
 8000e0a:	211f      	movs	r1, #31
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 ff67 	bl	8001ce0 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 ff86 	bl	8001d24 <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 8000e18:	4860      	ldr	r0, [pc, #384]	@ (8000f9c <DisplayMenu+0x198>)
 8000e1a:	f000 ff93 	bl	8001d44 <LCD_SetFont>

	uint16_t x, y;
	for(y=10; y<50; y++){
 8000e1e:	230a      	movs	r3, #10
 8000e20:	80bb      	strh	r3, [r7, #4]
 8000e22:	e012      	b.n	8000e4a <DisplayMenu+0x46>
		for(x=15; x < LCD_PIXEL_WIDTH-15; x++){
 8000e24:	230f      	movs	r3, #15
 8000e26:	80fb      	strh	r3, [r7, #6]
 8000e28:	e009      	b.n	8000e3e <DisplayMenu+0x3a>
			LCD_Draw_Pixel(x, y, LCD_COLOR_WHITE);
 8000e2a:	88b9      	ldrh	r1, [r7, #4]
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 febc 	bl	8001bb0 <LCD_Draw_Pixel>
		for(x=15; x < LCD_PIXEL_WIDTH-15; x++){
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	80fb      	strh	r3, [r7, #6]
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	2be0      	cmp	r3, #224	@ 0xe0
 8000e42:	d9f2      	bls.n	8000e2a <DisplayMenu+0x26>
	for(y=10; y<50; y++){
 8000e44:	88bb      	ldrh	r3, [r7, #4]
 8000e46:	3301      	adds	r3, #1
 8000e48:	80bb      	strh	r3, [r7, #4]
 8000e4a:	88bb      	ldrh	r3, [r7, #4]
 8000e4c:	2b31      	cmp	r3, #49	@ 0x31
 8000e4e:	d9e9      	bls.n	8000e24 <DisplayMenu+0x20>
		}
	}
	LCD_DisplayChar(78,25,'O');
 8000e50:	224f      	movs	r2, #79	@ 0x4f
 8000e52:	2119      	movs	r1, #25
 8000e54:	204e      	movs	r0, #78	@ 0x4e
 8000e56:	f000 fff3 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(87,25,'n');
 8000e5a:	226e      	movs	r2, #110	@ 0x6e
 8000e5c:	2119      	movs	r1, #25
 8000e5e:	2057      	movs	r0, #87	@ 0x57
 8000e60:	f000 ffee 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(94,25,'e');
 8000e64:	2265      	movs	r2, #101	@ 0x65
 8000e66:	2119      	movs	r1, #25
 8000e68:	205e      	movs	r0, #94	@ 0x5e
 8000e6a:	f000 ffe9 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(103,25,'P');
 8000e6e:	2250      	movs	r2, #80	@ 0x50
 8000e70:	2119      	movs	r1, #25
 8000e72:	2067      	movs	r0, #103	@ 0x67
 8000e74:	f000 ffe4 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(110,25,'l');
 8000e78:	226c      	movs	r2, #108	@ 0x6c
 8000e7a:	2119      	movs	r1, #25
 8000e7c:	206e      	movs	r0, #110	@ 0x6e
 8000e7e:	f000 ffdf 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(113,25,'a');
 8000e82:	2261      	movs	r2, #97	@ 0x61
 8000e84:	2119      	movs	r1, #25
 8000e86:	2071      	movs	r0, #113	@ 0x71
 8000e88:	f000 ffda 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(120,25,'y');
 8000e8c:	2279      	movs	r2, #121	@ 0x79
 8000e8e:	2119      	movs	r1, #25
 8000e90:	2078      	movs	r0, #120	@ 0x78
 8000e92:	f000 ffd5 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(127,25,'e');
 8000e96:	2265      	movs	r2, #101	@ 0x65
 8000e98:	2119      	movs	r1, #25
 8000e9a:	207f      	movs	r0, #127	@ 0x7f
 8000e9c:	f000 ffd0 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(134,25,'r');
 8000ea0:	2272      	movs	r2, #114	@ 0x72
 8000ea2:	2119      	movs	r1, #25
 8000ea4:	2086      	movs	r0, #134	@ 0x86
 8000ea6:	f000 ffcb 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(141,25,'M');
 8000eaa:	224d      	movs	r2, #77	@ 0x4d
 8000eac:	2119      	movs	r1, #25
 8000eae:	208d      	movs	r0, #141	@ 0x8d
 8000eb0:	f000 ffc6 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(150,25,'o');
 8000eb4:	226f      	movs	r2, #111	@ 0x6f
 8000eb6:	2119      	movs	r1, #25
 8000eb8:	2096      	movs	r0, #150	@ 0x96
 8000eba:	f000 ffc1 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(157,25,'d');
 8000ebe:	2264      	movs	r2, #100	@ 0x64
 8000ec0:	2119      	movs	r1, #25
 8000ec2:	209d      	movs	r0, #157	@ 0x9d
 8000ec4:	f000 ffbc 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(164,25,'e');
 8000ec8:	2265      	movs	r2, #101	@ 0x65
 8000eca:	2119      	movs	r1, #25
 8000ecc:	20a4      	movs	r0, #164	@ 0xa4
 8000ece:	f000 ffb7 	bl	8001e40 <LCD_DisplayChar>

	x = 0; y = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	80fb      	strh	r3, [r7, #6]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	80bb      	strh	r3, [r7, #4]
	for(y=60; y<100; y++){
 8000eda:	233c      	movs	r3, #60	@ 0x3c
 8000edc:	80bb      	strh	r3, [r7, #4]
 8000ede:	e012      	b.n	8000f06 <DisplayMenu+0x102>
		for(x=15; x < LCD_PIXEL_WIDTH-15; x++){
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	80fb      	strh	r3, [r7, #6]
 8000ee4:	e009      	b.n	8000efa <DisplayMenu+0xf6>
			LCD_Draw_Pixel(x, y, LCD_COLOR_WHITE);
 8000ee6:	88b9      	ldrh	r1, [r7, #4]
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fe5e 	bl	8001bb0 <LCD_Draw_Pixel>
		for(x=15; x < LCD_PIXEL_WIDTH-15; x++){
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	80fb      	strh	r3, [r7, #6]
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	2be0      	cmp	r3, #224	@ 0xe0
 8000efe:	d9f2      	bls.n	8000ee6 <DisplayMenu+0xe2>
	for(y=60; y<100; y++){
 8000f00:	88bb      	ldrh	r3, [r7, #4]
 8000f02:	3301      	adds	r3, #1
 8000f04:	80bb      	strh	r3, [r7, #4]
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	2b63      	cmp	r3, #99	@ 0x63
 8000f0a:	d9e9      	bls.n	8000ee0 <DisplayMenu+0xdc>
		}
	}
	LCD_DisplayChar(78,75,'T');
 8000f0c:	2254      	movs	r2, #84	@ 0x54
 8000f0e:	214b      	movs	r1, #75	@ 0x4b
 8000f10:	204e      	movs	r0, #78	@ 0x4e
 8000f12:	f000 ff95 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(85,75,'w');
 8000f16:	2277      	movs	r2, #119	@ 0x77
 8000f18:	214b      	movs	r1, #75	@ 0x4b
 8000f1a:	2055      	movs	r0, #85	@ 0x55
 8000f1c:	f000 ff90 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(94,75,'o');
 8000f20:	226f      	movs	r2, #111	@ 0x6f
 8000f22:	214b      	movs	r1, #75	@ 0x4b
 8000f24:	205e      	movs	r0, #94	@ 0x5e
 8000f26:	f000 ff8b 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(103,75,'P');
 8000f2a:	2250      	movs	r2, #80	@ 0x50
 8000f2c:	214b      	movs	r1, #75	@ 0x4b
 8000f2e:	2067      	movs	r0, #103	@ 0x67
 8000f30:	f000 ff86 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(110,75,'l');
 8000f34:	226c      	movs	r2, #108	@ 0x6c
 8000f36:	214b      	movs	r1, #75	@ 0x4b
 8000f38:	206e      	movs	r0, #110	@ 0x6e
 8000f3a:	f000 ff81 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(113,75,'a');
 8000f3e:	2261      	movs	r2, #97	@ 0x61
 8000f40:	214b      	movs	r1, #75	@ 0x4b
 8000f42:	2071      	movs	r0, #113	@ 0x71
 8000f44:	f000 ff7c 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(120,75,'y');
 8000f48:	2279      	movs	r2, #121	@ 0x79
 8000f4a:	214b      	movs	r1, #75	@ 0x4b
 8000f4c:	2078      	movs	r0, #120	@ 0x78
 8000f4e:	f000 ff77 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(127,75,'e');
 8000f52:	2265      	movs	r2, #101	@ 0x65
 8000f54:	214b      	movs	r1, #75	@ 0x4b
 8000f56:	207f      	movs	r0, #127	@ 0x7f
 8000f58:	f000 ff72 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(134,75,'r');
 8000f5c:	2272      	movs	r2, #114	@ 0x72
 8000f5e:	214b      	movs	r1, #75	@ 0x4b
 8000f60:	2086      	movs	r0, #134	@ 0x86
 8000f62:	f000 ff6d 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(141,75,'M');
 8000f66:	224d      	movs	r2, #77	@ 0x4d
 8000f68:	214b      	movs	r1, #75	@ 0x4b
 8000f6a:	208d      	movs	r0, #141	@ 0x8d
 8000f6c:	f000 ff68 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(150,75,'o');
 8000f70:	226f      	movs	r2, #111	@ 0x6f
 8000f72:	214b      	movs	r1, #75	@ 0x4b
 8000f74:	2096      	movs	r0, #150	@ 0x96
 8000f76:	f000 ff63 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(157,75,'d');
 8000f7a:	2264      	movs	r2, #100	@ 0x64
 8000f7c:	214b      	movs	r1, #75	@ 0x4b
 8000f7e:	209d      	movs	r0, #157	@ 0x9d
 8000f80:	f000 ff5e 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(164,75,'e');
 8000f84:	2265      	movs	r2, #101	@ 0x65
 8000f86:	214b      	movs	r1, #75	@ 0x4b
 8000f88:	20a4      	movs	r0, #164	@ 0xa4
 8000f8a:	f000 ff59 	bl	8001e40 <LCD_DisplayChar>

	displayFilledBoard();
 8000f8e:	f000 ffb4 	bl	8001efa <displayFilledBoard>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000000c 	.word	0x2000000c

08000fa0 <DisplayGame>:

void DisplayGame(void){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLUE);
 8000fa4:	211f      	movs	r1, #31
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 fe9a 	bl	8001ce0 <LCD_Clear>
	displayEmptyBoard();
 8000fac:	f000 ff6a 	bl	8001e84 <displayEmptyBoard>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <DisplayEnd>:

void DisplayEnd(uint32_t time){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	@ 0x30
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	uint16_t x, y;
	for(y = 0; y<50; y++){
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000fc0:	e011      	b.n	8000fe6 <DisplayEnd+0x32>
		for(x=0; x < LCD_PIXEL_WIDTH; x++){
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000fc6:	e008      	b.n	8000fda <DisplayEnd+0x26>
			LCD_Draw_Pixel(x, y, LCD_COLOR_BLUE);
 8000fc8:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8000fca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000fcc:	221f      	movs	r2, #31
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 fdee 	bl	8001bb0 <LCD_Draw_Pixel>
		for(x=0; x < LCD_PIXEL_WIDTH; x++){
 8000fd4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000fda:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000fdc:	2bef      	cmp	r3, #239	@ 0xef
 8000fde:	d9f3      	bls.n	8000fc8 <DisplayEnd+0x14>
	for(y = 0; y<50; y++){
 8000fe0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000fe6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000fe8:	2b31      	cmp	r3, #49	@ 0x31
 8000fea:	d9ea      	bls.n	8000fc2 <DisplayEnd+0xe>
		}
	}

	// display time
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000fec:	2000      	movs	r0, #0
 8000fee:	f000 fe99 	bl	8001d24 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000ff2:	4894      	ldr	r0, [pc, #592]	@ (8001244 <DisplayEnd+0x290>)
 8000ff4:	f000 fea6 	bl	8001d44 <LCD_SetFont>

	uint32_t minutes = time / 60.0;
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff fa8b 	bl	8000514 <__aeabi_ui2d>
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	4b91      	ldr	r3, [pc, #580]	@ (8001248 <DisplayEnd+0x294>)
 8001004:	f7ff fc2a 	bl	800085c <__aeabi_ddiv>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fd0c 	bl	8000a2c <__aeabi_d2uiz>
 8001014:	4603      	mov	r3, r0
 8001016:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t seconds = time % 60;
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4b8c      	ldr	r3, [pc, #560]	@ (800124c <DisplayEnd+0x298>)
 800101c:	fba3 1302 	umull	r1, r3, r3, r2
 8001020:	0959      	lsrs	r1, r3, #5
 8001022:	460b      	mov	r3, r1
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	1a5b      	subs	r3, r3, r1
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24

	char min[9]; char sec[9];
	sprintf(min, "%02lu", minutes);
 800102e:	f107 0318 	add.w	r3, r7, #24
 8001032:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001034:	4986      	ldr	r1, [pc, #536]	@ (8001250 <DisplayEnd+0x29c>)
 8001036:	4618      	mov	r0, r3
 8001038:	f006 faf2 	bl	8007620 <siprintf>
	sprintf(sec, "%02lu", seconds);
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001042:	4983      	ldr	r1, [pc, #524]	@ (8001250 <DisplayEnd+0x29c>)
 8001044:	4618      	mov	r0, r3
 8001046:	f006 faeb 	bl	8007620 <siprintf>

	LCD_DisplayChar(93,15,min[0]);
 800104a:	7e3b      	ldrb	r3, [r7, #24]
 800104c:	461a      	mov	r2, r3
 800104e:	210f      	movs	r1, #15
 8001050:	205d      	movs	r0, #93	@ 0x5d
 8001052:	f000 fef5 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(105,15,min[1]);
 8001056:	7e7b      	ldrb	r3, [r7, #25]
 8001058:	461a      	mov	r2, r3
 800105a:	210f      	movs	r1, #15
 800105c:	2069      	movs	r0, #105	@ 0x69
 800105e:	f000 feef 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(115,15,':');
 8001062:	223a      	movs	r2, #58	@ 0x3a
 8001064:	210f      	movs	r1, #15
 8001066:	2073      	movs	r0, #115	@ 0x73
 8001068:	f000 feea 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(125,15,sec[0]);
 800106c:	7b3b      	ldrb	r3, [r7, #12]
 800106e:	461a      	mov	r2, r3
 8001070:	210f      	movs	r1, #15
 8001072:	207d      	movs	r0, #125	@ 0x7d
 8001074:	f000 fee4 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(137,15,sec[1]);
 8001078:	7b7b      	ldrb	r3, [r7, #13]
 800107a:	461a      	mov	r2, r3
 800107c:	210f      	movs	r1, #15
 800107e:	2089      	movs	r0, #137	@ 0x89
 8001080:	f000 fede 	bl	8001e40 <LCD_DisplayChar>

	// display winner
	if (winner == YELLOW){
 8001084:	4b73      	ldr	r3, [pc, #460]	@ (8001254 <DisplayEnd+0x2a0>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d145      	bne.n	8001118 <DisplayEnd+0x164>
		LCD_DisplayChar(46,40,'W');
 800108c:	2257      	movs	r2, #87	@ 0x57
 800108e:	2128      	movs	r1, #40	@ 0x28
 8001090:	202e      	movs	r0, #46	@ 0x2e
 8001092:	f000 fed5 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(56,40,'i');
 8001096:	2269      	movs	r2, #105	@ 0x69
 8001098:	2128      	movs	r1, #40	@ 0x28
 800109a:	2038      	movs	r0, #56	@ 0x38
 800109c:	f000 fed0 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(66,40,'n');
 80010a0:	226e      	movs	r2, #110	@ 0x6e
 80010a2:	2128      	movs	r1, #40	@ 0x28
 80010a4:	2042      	movs	r0, #66	@ 0x42
 80010a6:	f000 fecb 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(81,40,'n');
 80010aa:	226e      	movs	r2, #110	@ 0x6e
 80010ac:	2128      	movs	r1, #40	@ 0x28
 80010ae:	2051      	movs	r0, #81	@ 0x51
 80010b0:	f000 fec6 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(96,40,'e');
 80010b4:	2265      	movs	r2, #101	@ 0x65
 80010b6:	2128      	movs	r1, #40	@ 0x28
 80010b8:	2060      	movs	r0, #96	@ 0x60
 80010ba:	f000 fec1 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(110,40,'r');
 80010be:	2272      	movs	r2, #114	@ 0x72
 80010c0:	2128      	movs	r1, #40	@ 0x28
 80010c2:	206e      	movs	r0, #110	@ 0x6e
 80010c4:	f000 febc 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(115,40,':');
 80010c8:	223a      	movs	r2, #58	@ 0x3a
 80010ca:	2128      	movs	r1, #40	@ 0x28
 80010cc:	2073      	movs	r0, #115	@ 0x73
 80010ce:	f000 feb7 	bl	8001e40 <LCD_DisplayChar>

		LCD_SetTextColor(LCD_COLOR_YELLOW);
 80010d2:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80010d6:	f000 fe25 	bl	8001d24 <LCD_SetTextColor>
		LCD_DisplayChar(136,40,'Y');
 80010da:	2259      	movs	r2, #89	@ 0x59
 80010dc:	2128      	movs	r1, #40	@ 0x28
 80010de:	2088      	movs	r0, #136	@ 0x88
 80010e0:	f000 feae 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(148,40,'e');
 80010e4:	2265      	movs	r2, #101	@ 0x65
 80010e6:	2128      	movs	r1, #40	@ 0x28
 80010e8:	2094      	movs	r0, #148	@ 0x94
 80010ea:	f000 fea9 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(158,40,'l');
 80010ee:	226c      	movs	r2, #108	@ 0x6c
 80010f0:	2128      	movs	r1, #40	@ 0x28
 80010f2:	209e      	movs	r0, #158	@ 0x9e
 80010f4:	f000 fea4 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(163,40,'l');
 80010f8:	226c      	movs	r2, #108	@ 0x6c
 80010fa:	2128      	movs	r1, #40	@ 0x28
 80010fc:	20a3      	movs	r0, #163	@ 0xa3
 80010fe:	f000 fe9f 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(170,40,'o');
 8001102:	226f      	movs	r2, #111	@ 0x6f
 8001104:	2128      	movs	r1, #40	@ 0x28
 8001106:	20aa      	movs	r0, #170	@ 0xaa
 8001108:	f000 fe9a 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(185,40,'w');
 800110c:	2277      	movs	r2, #119	@ 0x77
 800110e:	2128      	movs	r1, #40	@ 0x28
 8001110:	20b9      	movs	r0, #185	@ 0xb9
 8001112:	f000 fe95 	bl	8001e40 <LCD_DisplayChar>
 8001116:	e049      	b.n	80011ac <DisplayEnd+0x1f8>

	} else if (winner == RED){
 8001118:	4b4e      	ldr	r3, [pc, #312]	@ (8001254 <DisplayEnd+0x2a0>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d136      	bne.n	800118e <DisplayEnd+0x1da>
		LCD_DisplayChar(50,40,'W');
 8001120:	2257      	movs	r2, #87	@ 0x57
 8001122:	2128      	movs	r1, #40	@ 0x28
 8001124:	2032      	movs	r0, #50	@ 0x32
 8001126:	f000 fe8b 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(65,40,'i');
 800112a:	2269      	movs	r2, #105	@ 0x69
 800112c:	2128      	movs	r1, #40	@ 0x28
 800112e:	2041      	movs	r0, #65	@ 0x41
 8001130:	f000 fe86 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(75,40,'n');
 8001134:	226e      	movs	r2, #110	@ 0x6e
 8001136:	2128      	movs	r1, #40	@ 0x28
 8001138:	204b      	movs	r0, #75	@ 0x4b
 800113a:	f000 fe81 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(90,40,'n');
 800113e:	226e      	movs	r2, #110	@ 0x6e
 8001140:	2128      	movs	r1, #40	@ 0x28
 8001142:	205a      	movs	r0, #90	@ 0x5a
 8001144:	f000 fe7c 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(105,40,'e');
 8001148:	2265      	movs	r2, #101	@ 0x65
 800114a:	2128      	movs	r1, #40	@ 0x28
 800114c:	2069      	movs	r0, #105	@ 0x69
 800114e:	f000 fe77 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(120,40,'r');
 8001152:	2272      	movs	r2, #114	@ 0x72
 8001154:	2128      	movs	r1, #40	@ 0x28
 8001156:	2078      	movs	r0, #120	@ 0x78
 8001158:	f000 fe72 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(125,40,':');
 800115c:	223a      	movs	r2, #58	@ 0x3a
 800115e:	2128      	movs	r1, #40	@ 0x28
 8001160:	207d      	movs	r0, #125	@ 0x7d
 8001162:	f000 fe6d 	bl	8001e40 <LCD_DisplayChar>

		LCD_SetTextColor(LCD_COLOR_RED);
 8001166:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800116a:	f000 fddb 	bl	8001d24 <LCD_SetTextColor>
		LCD_DisplayChar(145,40,'R');
 800116e:	2252      	movs	r2, #82	@ 0x52
 8001170:	2128      	movs	r1, #40	@ 0x28
 8001172:	2091      	movs	r0, #145	@ 0x91
 8001174:	f000 fe64 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(160,40,'e');
 8001178:	2265      	movs	r2, #101	@ 0x65
 800117a:	2128      	movs	r1, #40	@ 0x28
 800117c:	20a0      	movs	r0, #160	@ 0xa0
 800117e:	f000 fe5f 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(175,40,'d');
 8001182:	2264      	movs	r2, #100	@ 0x64
 8001184:	2128      	movs	r1, #40	@ 0x28
 8001186:	20af      	movs	r0, #175	@ 0xaf
 8001188:	f000 fe5a 	bl	8001e40 <LCD_DisplayChar>
 800118c:	e00e      	b.n	80011ac <DisplayEnd+0x1f8>

	} else {
		LCD_DisplayChar(110,40,'T');
 800118e:	2254      	movs	r2, #84	@ 0x54
 8001190:	2128      	movs	r1, #40	@ 0x28
 8001192:	206e      	movs	r0, #110	@ 0x6e
 8001194:	f000 fe54 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(120,40,'i');
 8001198:	2269      	movs	r2, #105	@ 0x69
 800119a:	2128      	movs	r1, #40	@ 0x28
 800119c:	2078      	movs	r0, #120	@ 0x78
 800119e:	f000 fe4f 	bl	8001e40 <LCD_DisplayChar>
		LCD_DisplayChar(130,40,'e');
 80011a2:	2265      	movs	r2, #101	@ 0x65
 80011a4:	2128      	movs	r1, #40	@ 0x28
 80011a6:	2082      	movs	r0, #130	@ 0x82
 80011a8:	f000 fe4a 	bl	8001e40 <LCD_DisplayChar>
	}

	// main menu button
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f000 fdb9 	bl	8001d24 <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 80011b2:	4829      	ldr	r0, [pc, #164]	@ (8001258 <DisplayEnd+0x2a4>)
 80011b4:	f000 fdc6 	bl	8001d44 <LCD_SetFont>
	for(y = 70; y<110; y++){
 80011b8:	2346      	movs	r3, #70	@ 0x46
 80011ba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80011bc:	e012      	b.n	80011e4 <DisplayEnd+0x230>
		for(x=15; x < LCD_PIXEL_WIDTH-15; x++){
 80011be:	230f      	movs	r3, #15
 80011c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80011c2:	e009      	b.n	80011d8 <DisplayEnd+0x224>
			LCD_Draw_Pixel(x, y, LCD_COLOR_WHITE);
 80011c4:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 80011c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80011c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fcef 	bl	8001bb0 <LCD_Draw_Pixel>
		for(x=15; x < LCD_PIXEL_WIDTH-15; x++){
 80011d2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80011d4:	3301      	adds	r3, #1
 80011d6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80011d8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80011da:	2be0      	cmp	r3, #224	@ 0xe0
 80011dc:	d9f2      	bls.n	80011c4 <DisplayEnd+0x210>
	for(y = 70; y<110; y++){
 80011de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80011e0:	3301      	adds	r3, #1
 80011e2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80011e4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80011e6:	2b6d      	cmp	r3, #109	@ 0x6d
 80011e8:	d9e9      	bls.n	80011be <DisplayEnd+0x20a>
		}
	}
	LCD_DisplayChar(90,85,'M');
 80011ea:	224d      	movs	r2, #77	@ 0x4d
 80011ec:	2155      	movs	r1, #85	@ 0x55
 80011ee:	205a      	movs	r0, #90	@ 0x5a
 80011f0:	f000 fe26 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(100,85,'a');
 80011f4:	2261      	movs	r2, #97	@ 0x61
 80011f6:	2155      	movs	r1, #85	@ 0x55
 80011f8:	2064      	movs	r0, #100	@ 0x64
 80011fa:	f000 fe21 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(107,85,'i');
 80011fe:	2269      	movs	r2, #105	@ 0x69
 8001200:	2155      	movs	r1, #85	@ 0x55
 8001202:	206b      	movs	r0, #107	@ 0x6b
 8001204:	f000 fe1c 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(112,85,'n');
 8001208:	226e      	movs	r2, #110	@ 0x6e
 800120a:	2155      	movs	r1, #85	@ 0x55
 800120c:	2070      	movs	r0, #112	@ 0x70
 800120e:	f000 fe17 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(125,85,'M');
 8001212:	224d      	movs	r2, #77	@ 0x4d
 8001214:	2155      	movs	r1, #85	@ 0x55
 8001216:	207d      	movs	r0, #125	@ 0x7d
 8001218:	f000 fe12 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(135,85,'e');
 800121c:	2265      	movs	r2, #101	@ 0x65
 800121e:	2155      	movs	r1, #85	@ 0x55
 8001220:	2087      	movs	r0, #135	@ 0x87
 8001222:	f000 fe0d 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(143,85,'n');
 8001226:	226e      	movs	r2, #110	@ 0x6e
 8001228:	2155      	movs	r1, #85	@ 0x55
 800122a:	208f      	movs	r0, #143	@ 0x8f
 800122c:	f000 fe08 	bl	8001e40 <LCD_DisplayChar>
	LCD_DisplayChar(150,85,'u');
 8001230:	2275      	movs	r2, #117	@ 0x75
 8001232:	2155      	movs	r1, #85	@ 0x55
 8001234:	2096      	movs	r0, #150	@ 0x96
 8001236:	f000 fe03 	bl	8001e40 <LCD_DisplayChar>
}
 800123a:	bf00      	nop
 800123c:	3730      	adds	r7, #48	@ 0x30
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000004 	.word	0x20000004
 8001248:	404e0000 	.word	0x404e0000
 800124c:	88888889 	.word	0x88888889
 8001250:	08007f78 	.word	0x08007f78
 8001254:	200000e4 	.word	0x200000e4
 8001258:	2000000c 	.word	0x2000000c

0800125c <CheckForWinner>:

uint8_t CheckForWinner(uint8_t x, uint8_t y, ChipColor color){
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	@ 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	460b      	mov	r3, r1
 8001268:	71bb      	strb	r3, [r7, #6]
 800126a:	4613      	mov	r3, r2
 800126c:	717b      	strb	r3, [r7, #5]
	// direction lookup table
	int8_t dir[4][2] = {{-1, 1},  // UP_LEFT
 800126e:	4a58      	ldr	r2, [pc, #352]	@ (80013d0 <CheckForWinner+0x174>)
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001278:	e883 0003 	stmia.w	r3, {r0, r1}
						{ 1, 0},  // UP
						{ 1, 1},  // UP_RIGHT
						{ 0, 1}}; // RIGHT

	// check for win
	for (uint8_t i=0; i<4; i++){
 800127c:	2300      	movs	r3, #0
 800127e:	77fb      	strb	r3, [r7, #31]
 8001280:	e07d      	b.n	800137e <CheckForWinner+0x122>
		uint8_t connect = 1; // number of consecutive chips
 8001282:	2301      	movs	r3, #1
 8001284:	77bb      	strb	r3, [r7, #30]

		uint8_t j = 1;
 8001286:	2301      	movs	r3, #1
 8001288:	777b      	strb	r3, [r7, #29]
		while (1){ // check positive dir
			uint8_t adjx = x + dir[i][0] * j; uint8_t adjy = y + dir[i][1] * j; // get new indices
 800128a:	7ffb      	ldrb	r3, [r7, #31]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	3320      	adds	r3, #32
 8001290:	443b      	add	r3, r7
 8001292:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	7f7a      	ldrb	r2, [r7, #29]
 800129a:	fb12 f303 	smulbb	r3, r2, r3
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	4413      	add	r3, r2
 80012a4:	75fb      	strb	r3, [r7, #23]
 80012a6:	7ffb      	ldrb	r3, [r7, #31]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	3320      	adds	r3, #32
 80012ac:	443b      	add	r3, r7
 80012ae:	f913 3c13 	ldrsb.w	r3, [r3, #-19]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	7f7a      	ldrb	r2, [r7, #29]
 80012b6:	fb12 f303 	smulbb	r3, r2, r3
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	79bb      	ldrb	r3, [r7, #6]
 80012be:	4413      	add	r3, r2
 80012c0:	75bb      	strb	r3, [r7, #22]
			if (adjx < 0 || adjx >= NUM_COLUMNS || adjy < 0 || adjy >= NUM_ROWS) break;
 80012c2:	7dfb      	ldrb	r3, [r7, #23]
 80012c4:	2b06      	cmp	r3, #6
 80012c6:	d818      	bhi.n	80012fa <CheckForWinner+0x9e>
 80012c8:	7dbb      	ldrb	r3, [r7, #22]
 80012ca:	2b05      	cmp	r3, #5
 80012cc:	d815      	bhi.n	80012fa <CheckForWinner+0x9e>
			if (gameboard.column[adjx].contents[adjy] != color) break;
 80012ce:	7dfa      	ldrb	r2, [r7, #23]
 80012d0:	7db9      	ldrb	r1, [r7, #22]
 80012d2:	4840      	ldr	r0, [pc, #256]	@ (80013d4 <CheckForWinner+0x178>)
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4403      	add	r3, r0
 80012de:	440b      	add	r3, r1
 80012e0:	3302      	adds	r3, #2
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	797a      	ldrb	r2, [r7, #5]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d106      	bne.n	80012f8 <CheckForWinner+0x9c>
			connect++; j++;
 80012ea:	7fbb      	ldrb	r3, [r7, #30]
 80012ec:	3301      	adds	r3, #1
 80012ee:	77bb      	strb	r3, [r7, #30]
 80012f0:	7f7b      	ldrb	r3, [r7, #29]
 80012f2:	3301      	adds	r3, #1
 80012f4:	777b      	strb	r3, [r7, #29]
		while (1){ // check positive dir
 80012f6:	e7c8      	b.n	800128a <CheckForWinner+0x2e>
			if (gameboard.column[adjx].contents[adjy] != color) break;
 80012f8:	bf00      	nop
		}
		j = 1;
 80012fa:	2301      	movs	r3, #1
 80012fc:	777b      	strb	r3, [r7, #29]
		while (1){ // check negative dir
			uint8_t adjx = x - dir[i][0] * j; uint8_t adjy = y - dir[i][1] * j; // get new indices
 80012fe:	7ffb      	ldrb	r3, [r7, #31]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	3320      	adds	r3, #32
 8001304:	443b      	add	r3, r7
 8001306:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	7f7a      	ldrb	r2, [r7, #29]
 800130e:	fb12 f303 	smulbb	r3, r2, r3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	79fa      	ldrb	r2, [r7, #7]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	757b      	strb	r3, [r7, #21]
 800131a:	7ffb      	ldrb	r3, [r7, #31]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	3320      	adds	r3, #32
 8001320:	443b      	add	r3, r7
 8001322:	f913 3c13 	ldrsb.w	r3, [r3, #-19]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	7f7a      	ldrb	r2, [r7, #29]
 800132a:	fb12 f303 	smulbb	r3, r2, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	79ba      	ldrb	r2, [r7, #6]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	753b      	strb	r3, [r7, #20]
			if (adjx < 0 || adjx >= NUM_COLUMNS || adjy < 0 || adjy >= NUM_ROWS) break;
 8001336:	7d7b      	ldrb	r3, [r7, #21]
 8001338:	2b06      	cmp	r3, #6
 800133a:	d818      	bhi.n	800136e <CheckForWinner+0x112>
 800133c:	7d3b      	ldrb	r3, [r7, #20]
 800133e:	2b05      	cmp	r3, #5
 8001340:	d815      	bhi.n	800136e <CheckForWinner+0x112>
			if (gameboard.column[adjx].contents[adjy] != color) break;
 8001342:	7d7a      	ldrb	r2, [r7, #21]
 8001344:	7d39      	ldrb	r1, [r7, #20]
 8001346:	4823      	ldr	r0, [pc, #140]	@ (80013d4 <CheckForWinner+0x178>)
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4403      	add	r3, r0
 8001352:	440b      	add	r3, r1
 8001354:	3302      	adds	r3, #2
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	797a      	ldrb	r2, [r7, #5]
 800135a:	429a      	cmp	r2, r3
 800135c:	d106      	bne.n	800136c <CheckForWinner+0x110>
			connect++; j++;
 800135e:	7fbb      	ldrb	r3, [r7, #30]
 8001360:	3301      	adds	r3, #1
 8001362:	77bb      	strb	r3, [r7, #30]
 8001364:	7f7b      	ldrb	r3, [r7, #29]
 8001366:	3301      	adds	r3, #1
 8001368:	777b      	strb	r3, [r7, #29]
		while (1){ // check negative dir
 800136a:	e7c8      	b.n	80012fe <CheckForWinner+0xa2>
			if (gameboard.column[adjx].contents[adjy] != color) break;
 800136c:	bf00      	nop
		}
		if (connect >= 4) return 1;
 800136e:	7fbb      	ldrb	r3, [r7, #30]
 8001370:	2b03      	cmp	r3, #3
 8001372:	d901      	bls.n	8001378 <CheckForWinner+0x11c>
 8001374:	2301      	movs	r3, #1
 8001376:	e024      	b.n	80013c2 <CheckForWinner+0x166>
	for (uint8_t i=0; i<4; i++){
 8001378:	7ffb      	ldrb	r3, [r7, #31]
 800137a:	3301      	adds	r3, #1
 800137c:	77fb      	strb	r3, [r7, #31]
 800137e:	7ffb      	ldrb	r3, [r7, #31]
 8001380:	2b03      	cmp	r3, #3
 8001382:	f67f af7e 	bls.w	8001282 <CheckForWinner+0x26>
	}

	// check for tie
	bool tie = true;
 8001386:	2301      	movs	r3, #1
 8001388:	773b      	strb	r3, [r7, #28]
	for (int i=0; i<NUM_COLUMNS; i++){
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
 800138e:	e00f      	b.n	80013b0 <CheckForWinner+0x154>
		if (gameboard.column[i].currentHeight < FULL){
 8001390:	4910      	ldr	r1, [pc, #64]	@ (80013d4 <CheckForWinner+0x178>)
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	440b      	add	r3, r1
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	d802      	bhi.n	80013aa <CheckForWinner+0x14e>
			tie = false;
 80013a4:	2300      	movs	r3, #0
 80013a6:	773b      	strb	r3, [r7, #28]
			break;
 80013a8:	e005      	b.n	80013b6 <CheckForWinner+0x15a>
	for (int i=0; i<NUM_COLUMNS; i++){
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	3301      	adds	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	ddec      	ble.n	8001390 <CheckForWinner+0x134>
		}
	}
	if (tie) return 2;
 80013b6:	7f3b      	ldrb	r3, [r7, #28]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <CheckForWinner+0x164>
 80013bc:	2302      	movs	r3, #2
 80013be:	e000      	b.n	80013c2 <CheckForWinner+0x166>

	return 0;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	@ 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	08007f80 	.word	0x08007f80
 80013d4:	2000009c 	.word	0x2000009c

080013d8 <GetNextMove>:

uint8_t GetNextMove(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
    for (uint8_t col = 0; col < NUM_COLUMNS; col++) {
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
 80013e2:	e084      	b.n	80014ee <GetNextMove+0x116>
    	if (gameboard.column[col].currentHeight == FULL) continue;
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	495c      	ldr	r1, [pc, #368]	@ (8001558 <GetNextMove+0x180>)
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	440b      	add	r3, r1
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	2b06      	cmp	r3, #6
 80013f6:	d076      	beq.n	80014e6 <GetNextMove+0x10e>

    	// place chip in gameboard (no visual)
		uint8_t row = gameboard.column[col].currentHeight;
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	4957      	ldr	r1, [pc, #348]	@ (8001558 <GetNextMove+0x180>)
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	440b      	add	r3, r1
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	717b      	strb	r3, [r7, #5]
		gameboard.column[col].currentHeight++;
 800140a:	7bfa      	ldrb	r2, [r7, #15]
 800140c:	4952      	ldr	r1, [pc, #328]	@ (8001558 <GetNextMove+0x180>)
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	440b      	add	r3, r1
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	b298      	uxth	r0, r3
 800141e:	494e      	ldr	r1, [pc, #312]	@ (8001558 <GetNextMove+0x180>)
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	440b      	add	r3, r1
 800142a:	4602      	mov	r2, r0
 800142c:	801a      	strh	r2, [r3, #0]

		// check for AI win
		gameboard.column[col].contents[row] = AI_COLOR;
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	7979      	ldrb	r1, [r7, #5]
 8001432:	4849      	ldr	r0, [pc, #292]	@ (8001558 <GetNextMove+0x180>)
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4403      	add	r3, r0
 800143e:	440b      	add	r3, r1
 8001440:	3302      	adds	r3, #2
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
		bool wins = CheckForWinner(col, row, AI_COLOR);
 8001446:	7979      	ldrb	r1, [r7, #5]
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	2200      	movs	r2, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff05 	bl	800125c <CheckForWinner>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	bf14      	ite	ne
 8001458:	2301      	movne	r3, #1
 800145a:	2300      	moveq	r3, #0
 800145c:	713b      	strb	r3, [r7, #4]

		// check for block player win
		gameboard.column[col].contents[row] = SWITCH_COLOR(AI_COLOR);
 800145e:	7bfa      	ldrb	r2, [r7, #15]
 8001460:	7979      	ldrb	r1, [r7, #5]
 8001462:	483d      	ldr	r0, [pc, #244]	@ (8001558 <GetNextMove+0x180>)
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4403      	add	r3, r0
 800146e:	440b      	add	r3, r1
 8001470:	3302      	adds	r3, #2
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
		bool blocks = CheckForWinner(col, row, SWITCH_COLOR(AI_COLOR));
 8001476:	7979      	ldrb	r1, [r7, #5]
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	2201      	movs	r2, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff feed 	bl	800125c <CheckForWinner>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	bf14      	ite	ne
 8001488:	2301      	movne	r3, #1
 800148a:	2300      	moveq	r3, #0
 800148c:	70fb      	strb	r3, [r7, #3]

		// remove chip from gameboard
		gameboard.column[col].currentHeight--;
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	4931      	ldr	r1, [pc, #196]	@ (8001558 <GetNextMove+0x180>)
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	440b      	add	r3, r1
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	3b01      	subs	r3, #1
 80014a0:	b298      	uxth	r0, r3
 80014a2:	492d      	ldr	r1, [pc, #180]	@ (8001558 <GetNextMove+0x180>)
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	440b      	add	r3, r1
 80014ae:	4602      	mov	r2, r0
 80014b0:	801a      	strh	r2, [r3, #0]
		gameboard.column[col].contents[row] = EMPTY;
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	7979      	ldrb	r1, [r7, #5]
 80014b6:	4828      	ldr	r0, [pc, #160]	@ (8001558 <GetNextMove+0x180>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4403      	add	r3, r0
 80014c2:	440b      	add	r3, r1
 80014c4:	3302      	adds	r3, #2
 80014c6:	2202      	movs	r2, #2
 80014c8:	701a      	strb	r2, [r3, #0]

		if (wins)
 80014ca:	793b      	ldrb	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <GetNextMove+0x100>
			return (col+1);
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	3301      	adds	r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	e03b      	b.n	8001550 <GetNextMove+0x178>
		if (blocks)
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d004      	beq.n	80014e8 <GetNextMove+0x110>
			return (col+1);
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	3301      	adds	r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	e034      	b.n	8001550 <GetNextMove+0x178>
    	if (gameboard.column[col].currentHeight == FULL) continue;
 80014e6:	bf00      	nop
    for (uint8_t col = 0; col < NUM_COLUMNS; col++) {
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	3301      	adds	r3, #1
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	2b06      	cmp	r3, #6
 80014f2:	f67f af77 	bls.w	80013e4 <GetNextMove+0xc>
    }

    // prioritize middle columns
    for (int i=0; i<4; i++){
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	e025      	b.n	8001548 <GetNextMove+0x170>
    	uint8_t rightCol = 4+i, leftCol = 4-i;
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	3304      	adds	r3, #4
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f1c3 0304 	rsb	r3, r3, #4
 800150c:	71bb      	strb	r3, [r7, #6]
    	if (gameboard.column[rightCol-1].currentHeight < FULL)
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	1e5a      	subs	r2, r3, #1
 8001512:	4911      	ldr	r1, [pc, #68]	@ (8001558 <GetNextMove+0x180>)
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	440b      	add	r3, r1
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	2b05      	cmp	r3, #5
 8001522:	d801      	bhi.n	8001528 <GetNextMove+0x150>
    		return rightCol;
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	e013      	b.n	8001550 <GetNextMove+0x178>
    	if (gameboard.column[rightCol-1].currentHeight < FULL)
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	1e5a      	subs	r2, r3, #1
 800152c:	490a      	ldr	r1, [pc, #40]	@ (8001558 <GetNextMove+0x180>)
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	440b      	add	r3, r1
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	2b05      	cmp	r3, #5
 800153c:	d801      	bhi.n	8001542 <GetNextMove+0x16a>
    		return leftCol;
 800153e:	79bb      	ldrb	r3, [r7, #6]
 8001540:	e006      	b.n	8001550 <GetNextMove+0x178>
    for (int i=0; i<4; i++){
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	3301      	adds	r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b03      	cmp	r3, #3
 800154c:	ddd6      	ble.n	80014fc <GetNextMove+0x124>
    }
    return 1; // should never reach here but gets rid of warning
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	2000009c 	.word	0x2000009c

0800155c <PlayGame>:

uint32_t PlayGame(uint8_t numPlayers){
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b089      	sub	sp, #36	@ 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
	// initialize
	for (int i=0; i<NUM_COLUMNS; i++){
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
 800156a:	e020      	b.n	80015ae <PlayGame+0x52>
		gameboard.column[i].currentHeight = 0;
 800156c:	4991      	ldr	r1, [pc, #580]	@ (80017b4 <PlayGame+0x258>)
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	440b      	add	r3, r1
 800157a:	2200      	movs	r2, #0
 800157c:	801a      	strh	r2, [r3, #0]
		for (int j=0; j<NUM_ROWS; j++){
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	e00e      	b.n	80015a2 <PlayGame+0x46>
			gameboard.column[i].contents[j] = EMPTY;
 8001584:	498b      	ldr	r1, [pc, #556]	@ (80017b4 <PlayGame+0x258>)
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	18ca      	adds	r2, r1, r3
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	4413      	add	r3, r2
 8001596:	3302      	adds	r3, #2
 8001598:	2202      	movs	r2, #2
 800159a:	701a      	strb	r2, [r3, #0]
		for (int j=0; j<NUM_ROWS; j++){
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	3301      	adds	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	dded      	ble.n	8001584 <PlayGame+0x28>
	for (int i=0; i<NUM_COLUMNS; i++){
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	3301      	adds	r3, #1
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	2b06      	cmp	r3, #6
 80015b2:	dddb      	ble.n	800156c <PlayGame+0x10>
		}
	}
	gameboard.whosTurn = YELLOW;
 80015b4:	4b7f      	ldr	r3, [pc, #508]	@ (80017b4 <PlayGame+0x258>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
	uint8_t previousColumn = currentColumn;
 80015bc:	4b7e      	ldr	r3, [pc, #504]	@ (80017b8 <PlayGame+0x25c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	75fb      	strb	r3, [r7, #23]
	LCD_Draw_Circle_Fill(CHIP_HSPACE*currentColumn, CHIP_VSPACE, CHIP_RADIUS, LCD_COLOR_YELLOW);
 80015c2:	4b7d      	ldr	r3, [pc, #500]	@ (80017b8 <PlayGame+0x25c>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	b298      	uxth	r0, r3
 80015d0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80015d4:	220a      	movs	r2, #10
 80015d6:	211e      	movs	r1, #30
 80015d8:	f000 fb08 	bl	8001bec <LCD_Draw_Circle_Fill>

	// reset timer
	Tim2Reset();
 80015dc:	f000 feb2 	bl	8002344 <Tim2Reset>
	Tim2Start();
 80015e0:	f000 fe7c 	bl	80022dc <Tim2Start>
	numTimerOverflow = 0;
 80015e4:	4b75      	ldr	r3, [pc, #468]	@ (80017bc <PlayGame+0x260>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]

	while (1){
		uint16_t playerColor = LCD_COLOR(gameboard.whosTurn);
 80015ea:	4b72      	ldr	r3, [pc, #456]	@ (80017b4 <PlayGame+0x258>)
 80015ec:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d102      	bne.n	80015fa <PlayGame+0x9e>
 80015f4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80015f8:	e001      	b.n	80015fe <PlayGame+0xa2>
 80015fa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80015fe:	82bb      	strh	r3, [r7, #20]

		// poll for column selection
		previousColumn = currentColumn;
 8001600:	4b6d      	ldr	r3, [pc, #436]	@ (80017b8 <PlayGame+0x25c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	75fb      	strb	r3, [r7, #23]
		if (numPlayers == 2 || gameboard.whosTurn == YELLOW){
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d004      	beq.n	8001616 <PlayGame+0xba>
 800160c:	4b69      	ldr	r3, [pc, #420]	@ (80017b4 <PlayGame+0x258>)
 800160e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8001612:	2b01      	cmp	r3, #1
 8001614:	d11f      	bne.n	8001656 <PlayGame+0xfa>
			if (switchColumn(&StaticTouchData, &currentColumn)){
 8001616:	4968      	ldr	r1, [pc, #416]	@ (80017b8 <PlayGame+0x25c>)
 8001618:	4869      	ldr	r0, [pc, #420]	@ (80017c0 <PlayGame+0x264>)
 800161a:	f000 fdbe 	bl	800219a <switchColumn>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d042      	beq.n	80016aa <PlayGame+0x14e>
				LCD_Draw_Circle_Fill(CHIP_HSPACE*previousColumn, CHIP_VSPACE, CHIP_RADIUS, LCD_COLOR_BLUE);
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	b29b      	uxth	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	b298      	uxth	r0, r3
 8001632:	231f      	movs	r3, #31
 8001634:	220a      	movs	r2, #10
 8001636:	211e      	movs	r1, #30
 8001638:	f000 fad8 	bl	8001bec <LCD_Draw_Circle_Fill>
				LCD_Draw_Circle_Fill(CHIP_HSPACE*currentColumn, CHIP_VSPACE, CHIP_RADIUS, playerColor);
 800163c:	4b5e      	ldr	r3, [pc, #376]	@ (80017b8 <PlayGame+0x25c>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	b298      	uxth	r0, r3
 800164a:	8abb      	ldrh	r3, [r7, #20]
 800164c:	220a      	movs	r2, #10
 800164e:	211e      	movs	r1, #30
 8001650:	f000 facc 	bl	8001bec <LCD_Draw_Circle_Fill>
			if (switchColumn(&StaticTouchData, &currentColumn)){
 8001654:	e029      	b.n	80016aa <PlayGame+0x14e>
			}
		} else { // AI's turn
			currentColumn = GetNextMove();
 8001656:	f7ff febf 	bl	80013d8 <GetNextMove>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	4b56      	ldr	r3, [pc, #344]	@ (80017b8 <PlayGame+0x25c>)
 8001660:	701a      	strb	r2, [r3, #0]

			HAL_Delay(400);
 8001662:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001666:	f002 fc09 	bl	8003e7c <HAL_Delay>
			LCD_Draw_Circle_Fill(CHIP_HSPACE*previousColumn, CHIP_VSPACE, CHIP_RADIUS, LCD_COLOR_BLUE);
 800166a:	7dfb      	ldrb	r3, [r7, #23]
 800166c:	b29b      	uxth	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	0112      	lsls	r2, r2, #4
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	b298      	uxth	r0, r3
 8001678:	231f      	movs	r3, #31
 800167a:	220a      	movs	r2, #10
 800167c:	211e      	movs	r1, #30
 800167e:	f000 fab5 	bl	8001bec <LCD_Draw_Circle_Fill>
			LCD_Draw_Circle_Fill(CHIP_HSPACE*currentColumn, CHIP_VSPACE, CHIP_RADIUS, LCD_COLOR(AI_COLOR));
 8001682:	4b4d      	ldr	r3, [pc, #308]	@ (80017b8 <PlayGame+0x25c>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	0112      	lsls	r2, r2, #4
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	b298      	uxth	r0, r3
 8001690:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001694:	220a      	movs	r2, #10
 8001696:	211e      	movs	r1, #30
 8001698:	f000 faa8 	bl	8001bec <LCD_Draw_Circle_Fill>
			HAL_Delay(400);
 800169c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80016a0:	f002 fbec 	bl	8003e7c <HAL_Delay>

			addSchedulerEvent(DROP_CHIP);
 80016a4:	2002      	movs	r0, #2
 80016a6:	f000 fdb7 	bl	8002218 <addSchedulerEvent>
		}

		// check for button press
		uint32_t eventsToRun = getScheduledEvents();
 80016aa:	f000 fda9 	bl	8002200 <getScheduledEvents>
 80016ae:	6138      	str	r0, [r7, #16]
		if (eventsToRun & DROP_CHIP){
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d06c      	beq.n	8001794 <PlayGame+0x238>
			removeSchedulerEvent(DROP_CHIP);
 80016ba:	2002      	movs	r0, #2
 80016bc:	f000 fdbe 	bl	800223c <removeSchedulerEvent>
			dropChip(&gameboard, currentColumn, playerColor);
 80016c0:	4b3d      	ldr	r3, [pc, #244]	@ (80017b8 <PlayGame+0x25c>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	8aba      	ldrh	r2, [r7, #20]
 80016c6:	4619      	mov	r1, r3
 80016c8:	483a      	ldr	r0, [pc, #232]	@ (80017b4 <PlayGame+0x258>)
 80016ca:	f000 fca8 	bl	800201e <dropChip>

			// check for 4 in a row
			uint8_t x = currentColumn-1;
 80016ce:	4b3a      	ldr	r3, [pc, #232]	@ (80017b8 <PlayGame+0x25c>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
			uint8_t y = gameboard.column[currentColumn-1].currentHeight-1;
 80016d6:	4b38      	ldr	r3, [pc, #224]	@ (80017b8 <PlayGame+0x25c>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	1e5a      	subs	r2, r3, #1
 80016dc:	4935      	ldr	r1, [pc, #212]	@ (80017b4 <PlayGame+0x258>)
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	440b      	add	r3, r1
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	3b01      	subs	r3, #1
 80016ee:	73bb      	strb	r3, [r7, #14]
			gameboard.column[x].contents[y] = gameboard.whosTurn;
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	7bb9      	ldrb	r1, [r7, #14]
 80016f4:	4b2f      	ldr	r3, [pc, #188]	@ (80017b4 <PlayGame+0x258>)
 80016f6:	f893 4046 	ldrb.w	r4, [r3, #70]	@ 0x46
 80016fa:	482e      	ldr	r0, [pc, #184]	@ (80017b4 <PlayGame+0x258>)
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4403      	add	r3, r0
 8001706:	440b      	add	r3, r1
 8001708:	3302      	adds	r3, #2
 800170a:	4622      	mov	r2, r4
 800170c:	701a      	strb	r2, [r3, #0]
			if (CheckForWinner(x, y, gameboard.whosTurn) == 1){
 800170e:	4b29      	ldr	r3, [pc, #164]	@ (80017b4 <PlayGame+0x258>)
 8001710:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8001714:	7bb9      	ldrb	r1, [r7, #14]
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fd9f 	bl	800125c <CheckForWinner>
 800171e:	4603      	mov	r3, r0
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <PlayGame+0x1d4>
				winner = gameboard.whosTurn;
 8001724:	4b23      	ldr	r3, [pc, #140]	@ (80017b4 <PlayGame+0x258>)
 8001726:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800172a:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <PlayGame+0x268>)
 800172c:	701a      	strb	r2, [r3, #0]
				break;
 800172e:	e035      	b.n	800179c <PlayGame+0x240>
			} else if (CheckForWinner(x, y, gameboard.whosTurn) == 2){
 8001730:	4b20      	ldr	r3, [pc, #128]	@ (80017b4 <PlayGame+0x258>)
 8001732:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8001736:	7bb9      	ldrb	r1, [r7, #14]
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fd8e 	bl	800125c <CheckForWinner>
 8001740:	4603      	mov	r3, r0
 8001742:	2b02      	cmp	r3, #2
 8001744:	d103      	bne.n	800174e <PlayGame+0x1f2>
				winner = EMPTY;
 8001746:	4b1f      	ldr	r3, [pc, #124]	@ (80017c4 <PlayGame+0x268>)
 8001748:	2202      	movs	r2, #2
 800174a:	701a      	strb	r2, [r3, #0]
				break;
 800174c:	e026      	b.n	800179c <PlayGame+0x240>
			}

			// switch player
			gameboard.whosTurn = SWITCH_COLOR(gameboard.whosTurn);
 800174e:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <PlayGame+0x258>)
 8001750:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8001754:	2b01      	cmp	r3, #1
 8001756:	bf14      	ite	ne
 8001758:	2301      	movne	r3, #1
 800175a:	2300      	moveq	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	461a      	mov	r2, r3
 8001760:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <PlayGame+0x258>)
 8001762:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			playerColor = LCD_COLOR(gameboard.whosTurn);
 8001766:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <PlayGame+0x258>)
 8001768:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800176c:	2b01      	cmp	r3, #1
 800176e:	d102      	bne.n	8001776 <PlayGame+0x21a>
 8001770:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001774:	e001      	b.n	800177a <PlayGame+0x21e>
 8001776:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800177a:	82bb      	strh	r3, [r7, #20]
			LCD_Draw_Circle_Fill(CHIP_HSPACE*currentColumn, CHIP_VSPACE, CHIP_RADIUS, playerColor);
 800177c:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <PlayGame+0x25c>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	b298      	uxth	r0, r3
 800178a:	8abb      	ldrh	r3, [r7, #20]
 800178c:	220a      	movs	r2, #10
 800178e:	211e      	movs	r1, #30
 8001790:	f000 fa2c 	bl	8001bec <LCD_Draw_Circle_Fill>
		}
		HAL_Delay(200);
 8001794:	20c8      	movs	r0, #200	@ 0xc8
 8001796:	f002 fb71 	bl	8003e7c <HAL_Delay>
	while (1){
 800179a:	e726      	b.n	80015ea <PlayGame+0x8e>
	}
	Tim2Stop();
 800179c:	f000 fdb0 	bl	8002300 <Tim2Stop>
	return GetTimeInSeconds(numTimerOverflow);
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <PlayGame+0x260>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fdf5 	bl	8002394 <GetTimeInSeconds>
 80017aa:	4603      	mov	r3, r0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3724      	adds	r7, #36	@ 0x24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}
 80017b4:	2000009c 	.word	0x2000009c
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000098 	.word	0x20000098
 80017c0:	20000090 	.word	0x20000090
 80017c4:	200000e4 	.word	0x200000e4

080017c8 <StartGame>:

void StartGame(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
	DisplayTitle();
 80017ce:	f7ff fae1 	bl	8000d94 <DisplayTitle>
	HAL_Delay(2000);
 80017d2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80017d6:	f002 fb51 	bl	8003e7c <HAL_Delay>
	while(1){
		DisplayMenu();
 80017da:	f7ff fb13 	bl	8000e04 <DisplayMenu>
		HAL_Delay(200);
 80017de:	20c8      	movs	r0, #200	@ 0xc8
 80017e0:	f002 fb4c 	bl	8003e7c <HAL_Delay>
		uint8_t numPlayers = selectMode(&StaticTouchData);
 80017e4:	480d      	ldr	r0, [pc, #52]	@ (800181c <StartGame+0x54>)
 80017e6:	f000 fc97 	bl	8002118 <selectMode>
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
		DisplayGame();
 80017ee:	f7ff fbd7 	bl	8000fa0 <DisplayGame>
		if (numPlayers == 1 || numPlayers == 2){
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d002      	beq.n	80017fe <StartGame+0x36>
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d10b      	bne.n	8001816 <StartGame+0x4e>
			uint32_t time = PlayGame(numPlayers);
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff feab 	bl	800155c <PlayGame>
 8001806:	6038      	str	r0, [r7, #0]
			DisplayEnd(time);
 8001808:	6838      	ldr	r0, [r7, #0]
 800180a:	f7ff fbd3 	bl	8000fb4 <DisplayEnd>
			returnToMenu(&StaticTouchData);
 800180e:	4803      	ldr	r0, [pc, #12]	@ (800181c <StartGame+0x54>)
 8001810:	f000 fca9 	bl	8002166 <returnToMenu>
		if (numPlayers == 1 || numPlayers == 2){
 8001814:	e001      	b.n	800181a <StartGame+0x52>
		} else LCD_Error_Handler();
 8001816:	f000 fc50 	bl	80020ba <LCD_Error_Handler>
	while(1){
 800181a:	e7de      	b.n	80017da <StartGame+0x12>
 800181c:	20000090 	.word	0x20000090

08001820 <EXTI0_IRQHandler>:
	}
}

void EXTI0_IRQHandler(){
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001824:	2006      	movs	r0, #6
 8001826:	f002 fc94 	bl	8004152 <HAL_NVIC_DisableIRQ>
	if (gameboard.column[currentColumn-1].currentHeight < NUM_ROWS)
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <EXTI0_IRQHandler+0x38>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	1e5a      	subs	r2, r3, #1
 8001830:	490a      	ldr	r1, [pc, #40]	@ (800185c <EXTI0_IRQHandler+0x3c>)
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	440b      	add	r3, r1
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	2b05      	cmp	r3, #5
 8001840:	d802      	bhi.n	8001848 <EXTI0_IRQHandler+0x28>
		addSchedulerEvent(DROP_CHIP);
 8001842:	2002      	movs	r0, #2
 8001844:	f000 fce8 	bl	8002218 <addSchedulerEvent>
	__HAL_GPIO_EXTI_CLEAR_FLAG(BTN_PIN);
 8001848:	4b05      	ldr	r3, [pc, #20]	@ (8001860 <EXTI0_IRQHandler+0x40>)
 800184a:	2201      	movs	r2, #1
 800184c:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800184e:	2006      	movs	r0, #6
 8001850:	f002 fc71 	bl	8004136 <HAL_NVIC_EnableIRQ>
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000000 	.word	0x20000000
 800185c:	2000009c 	.word	0x2000009c
 8001860:	40013c00 	.word	0x40013c00

08001864 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8001868:	201c      	movs	r0, #28
 800186a:	f002 fc72 	bl	8004152 <HAL_NVIC_DisableIRQ>
	numTimerOverflow++;
 800186e:	4b07      	ldr	r3, [pc, #28]	@ (800188c <TIM2_IRQHandler+0x28>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	3301      	adds	r3, #1
 8001874:	4a05      	ldr	r2, [pc, #20]	@ (800188c <TIM2_IRQHandler+0x28>)
 8001876:	6013      	str	r3, [r2, #0]
	Tim2ClearSR();
 8001878:	f000 fd7e 	bl	8002378 <Tim2ClearSR>
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 800187c:	201c      	movs	r0, #28
 800187e:	f002 fc82 	bl	8004186 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001882:	201c      	movs	r0, #28
 8001884:	f002 fc57 	bl	8004136 <HAL_NVIC_EnableIRQ>
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000098 	.word	0x20000098

08001890 <ButtonInit>:
 *      Author: mrflu
 */

#include "Button_Driver.h"

void ButtonInit(){
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef PC;
	PC.Pin = BTN_PIN;
 8001896:	2301      	movs	r3, #1
 8001898:	607b      	str	r3, [r7, #4]
	PC.Mode = GPIO_MODE_IT_RISING;
 800189a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800189e:	60bb      	str	r3, [r7, #8]
	PC.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
	PC.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018a4:	2301      	movs	r3, #1
 80018a6:	613b      	str	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018a8:	2300      	movs	r3, #0
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <ButtonInit+0x4c>)
 80018ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b0:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <ButtonInit+0x4c>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b8:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <ButtonInit+0x4c>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	603b      	str	r3, [r7, #0]
 80018c2:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &PC);
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <ButtonInit+0x50>)
 80018ca:	f002 fc6b 	bl	80041a4 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018ce:	2006      	movs	r0, #6
 80018d0:	f002 fc31 	bl	8004136 <HAL_NVIC_EnableIRQ>
}
 80018d4:	bf00      	nop
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020000 	.word	0x40020000

080018e4 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	@ 0x30
 80018e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f2:	4a59      	ldr	r2, [pc, #356]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 80018f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018fa:	4b57      	ldr	r3, [pc, #348]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001902:	61bb      	str	r3, [r7, #24]
 8001904:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	4b53      	ldr	r3, [pc, #332]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a52      	ldr	r2, [pc, #328]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b50      	ldr	r3, [pc, #320]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	4b4c      	ldr	r3, [pc, #304]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a4b      	ldr	r2, [pc, #300]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b49      	ldr	r3, [pc, #292]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b45      	ldr	r3, [pc, #276]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a44      	ldr	r2, [pc, #272]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b42      	ldr	r3, [pc, #264]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a3d      	ldr	r2, [pc, #244]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 8001964:	f043 0308 	orr.w	r3, r3, #8
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	4b37      	ldr	r3, [pc, #220]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a36      	ldr	r2, [pc, #216]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 8001980:	f043 0320 	orr.w	r3, r3, #32
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b34      	ldr	r3, [pc, #208]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0320 	and.w	r3, r3, #32
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	4b30      	ldr	r3, [pc, #192]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 800199c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a58 <LCD_GPIO_Init+0x174>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80019ae:	f641 0358 	movw	r3, #6232	@ 0x1858
 80019b2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80019bc:	2302      	movs	r3, #2
 80019be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80019c0:	230e      	movs	r3, #14
 80019c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	4619      	mov	r1, r3
 80019ca:	4824      	ldr	r0, [pc, #144]	@ (8001a5c <LCD_GPIO_Init+0x178>)
 80019cc:	f002 fbea 	bl	80041a4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80019d0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80019d4:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	4820      	ldr	r0, [pc, #128]	@ (8001a60 <LCD_GPIO_Init+0x17c>)
 80019de:	f002 fbe1 	bl	80041a4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80019e2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80019e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	4619      	mov	r1, r3
 80019ee:	481d      	ldr	r0, [pc, #116]	@ (8001a64 <LCD_GPIO_Init+0x180>)
 80019f0:	f002 fbd8 	bl	80041a4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80019f4:	2348      	movs	r3, #72	@ 0x48
 80019f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	4619      	mov	r1, r3
 80019fe:	481a      	ldr	r0, [pc, #104]	@ (8001a68 <LCD_GPIO_Init+0x184>)
 8001a00:	f002 fbd0 	bl	80041a4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001a04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4816      	ldr	r0, [pc, #88]	@ (8001a6c <LCD_GPIO_Init+0x188>)
 8001a12:	f002 fbc7 	bl	80041a4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001a16:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001a1a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001a1c:	f107 031c 	add.w	r3, r7, #28
 8001a20:	4619      	mov	r1, r3
 8001a22:	4813      	ldr	r0, [pc, #76]	@ (8001a70 <LCD_GPIO_Init+0x18c>)
 8001a24:	f002 fbbe 	bl	80041a4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001a2c:	2309      	movs	r3, #9
 8001a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001a30:	f107 031c 	add.w	r3, r7, #28
 8001a34:	4619      	mov	r1, r3
 8001a36:	480a      	ldr	r0, [pc, #40]	@ (8001a60 <LCD_GPIO_Init+0x17c>)
 8001a38:	f002 fbb4 	bl	80041a4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001a3c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	4809      	ldr	r0, [pc, #36]	@ (8001a70 <LCD_GPIO_Init+0x18c>)
 8001a4a:	f002 fbab 	bl	80041a4 <HAL_GPIO_Init>
}
 8001a4e:	bf00      	nop
 8001a50:	3730      	adds	r7, #48	@ 0x30
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	40020400 	.word	0x40020400
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40020c00 	.word	0x40020c00
 8001a6c:	40021400 	.word	0x40021400
 8001a70:	40021800 	.word	0x40021800

08001a74 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b090      	sub	sp, #64	@ 0x40
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001a82:	23f0      	movs	r3, #240	@ 0xf0
 8001a84:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8001a8a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001a8e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001a90:	2302      	movs	r3, #2
 8001a92:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001a94:	23ff      	movs	r3, #255	@ 0xff
 8001a96:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001a9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001aa2:	2305      	movs	r3, #5
 8001aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	@ (8001aec <LTCD_Layer_Init+0x78>)
 8001aae:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001ab0:	23f0      	movs	r3, #240	@ 0xf0
 8001ab2:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001ab4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001acc:	79fa      	ldrb	r2, [r7, #7]
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4806      	ldr	r0, [pc, #24]	@ (8001af0 <LTCD_Layer_Init+0x7c>)
 8001ad6:	f003 ffa7 	bl	8005a28 <HAL_LTDC_ConfigLayer>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001ae0:	f000 faeb 	bl	80020ba <LCD_Error_Handler>
	}
}
 8001ae4:	bf00      	nop
 8001ae6:	3740      	adds	r7, #64	@ 0x40
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200001c4 	.word	0x200001c4
 8001af0:	200000e8 	.word	0x200000e8

08001af4 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001af8:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba4 <LTCD__Init+0xb0>)
 8001afa:	4a2b      	ldr	r2, [pc, #172]	@ (8001ba8 <LTCD__Init+0xb4>)
 8001afc:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001afe:	4b29      	ldr	r3, [pc, #164]	@ (8001ba4 <LTCD__Init+0xb0>)
 8001b00:	2209      	movs	r2, #9
 8001b02:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001b04:	4b27      	ldr	r3, [pc, #156]	@ (8001ba4 <LTCD__Init+0xb0>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001b0a:	4b26      	ldr	r3, [pc, #152]	@ (8001ba4 <LTCD__Init+0xb0>)
 8001b0c:	221d      	movs	r2, #29
 8001b0e:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001b10:	4b24      	ldr	r3, [pc, #144]	@ (8001ba4 <LTCD__Init+0xb0>)
 8001b12:	2203      	movs	r2, #3
 8001b14:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001b16:	4b23      	ldr	r3, [pc, #140]	@ (8001ba4 <LTCD__Init+0xb0>)
 8001b18:	f240 120d 	movw	r2, #269	@ 0x10d
 8001b1c:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001b1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ba4 <LTCD__Init+0xb0>)
 8001b20:	f240 1243 	movw	r2, #323	@ 0x143
 8001b24:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001b26:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba4 <LTCD__Init+0xb0>)
 8001b28:	f240 1217 	movw	r2, #279	@ 0x117
 8001b2c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba4 <LTCD__Init+0xb0>)
 8001b30:	f240 1247 	movw	r2, #327	@ 0x147
 8001b34:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001b36:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba4 <LTCD__Init+0xb0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001b3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ba4 <LTCD__Init+0xb0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001b46:	4b17      	ldr	r3, [pc, #92]	@ (8001ba4 <LTCD__Init+0xb0>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b4e:	4b17      	ldr	r3, [pc, #92]	@ (8001bac <LTCD__Init+0xb8>)
 8001b50:	2208      	movs	r2, #8
 8001b52:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001b54:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <LTCD__Init+0xb8>)
 8001b56:	22c0      	movs	r2, #192	@ 0xc0
 8001b58:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001b5a:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <LTCD__Init+0xb8>)
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <LTCD__Init+0xb8>)
 8001b62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b66:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001b68:	4810      	ldr	r0, [pc, #64]	@ (8001bac <LTCD__Init+0xb8>)
 8001b6a:	f004 fdb7 	bl	80066dc <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba4 <LTCD__Init+0xb0>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <LTCD__Init+0xb0>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <LTCD__Init+0xb0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b80:	4b08      	ldr	r3, [pc, #32]	@ (8001ba4 <LTCD__Init+0xb0>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001b86:	f7ff fead 	bl	80018e4 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b8a:	4806      	ldr	r0, [pc, #24]	@ (8001ba4 <LTCD__Init+0xb0>)
 8001b8c:	f003 fe7c 	bl	8005888 <HAL_LTDC_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001b96:	f000 fa90 	bl	80020ba <LCD_Error_Handler>
	 }

	ili9341_Init();
 8001b9a:	f000 fc1d 	bl	80023d8 <ili9341_Init>
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200000e8 	.word	0x200000e8
 8001ba8:	40016800 	.word	0x40016800
 8001bac:	20000190 	.word	0x20000190

08001bb0 <LCD_Draw_Pixel>:

/* START Draw functions */

void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	80fb      	strh	r3, [r7, #6]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	80bb      	strh	r3, [r7, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001bc2:	88ba      	ldrh	r2, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	461a      	mov	r2, r3
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4905      	ldr	r1, [pc, #20]	@ (8001be8 <LCD_Draw_Pixel+0x38>)
 8001bd4:	887a      	ldrh	r2, [r7, #2]
 8001bd6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	200001c4 	.word	0x200001c4

08001bec <LCD_Draw_Circle_Fill>:

void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	4608      	mov	r0, r1
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	80fb      	strh	r3, [r7, #6]
 8001bfe:	4603      	mov	r3, r0
 8001c00:	80bb      	strh	r3, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	807b      	strh	r3, [r7, #2]
 8001c06:	4613      	mov	r3, r2
 8001c08:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8001c0a:	887b      	ldrh	r3, [r7, #2]
 8001c0c:	425b      	negs	r3, r3
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	81fb      	strh	r3, [r7, #14]
 8001c12:	e034      	b.n	8001c7e <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8001c14:	887b      	ldrh	r3, [r7, #2]
 8001c16:	425b      	negs	r3, r3
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	81bb      	strh	r3, [r7, #12]
 8001c1c:	e024      	b.n	8001c68 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8001c1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c22:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c26:	fb03 f202 	mul.w	r2, r3, r2
 8001c2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c2e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001c32:	fb01 f303 	mul.w	r3, r1, r3
 8001c36:	441a      	add	r2, r3
 8001c38:	887b      	ldrh	r3, [r7, #2]
 8001c3a:	8879      	ldrh	r1, [r7, #2]
 8001c3c:	fb01 f303 	mul.w	r3, r1, r3
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dc0b      	bgt.n	8001c5c <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8001c44:	89ba      	ldrh	r2, [r7, #12]
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	4413      	add	r3, r2
 8001c4a:	b298      	uxth	r0, r3
 8001c4c:	89fa      	ldrh	r2, [r7, #14]
 8001c4e:	88bb      	ldrh	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	883a      	ldrh	r2, [r7, #0]
 8001c56:	4619      	mov	r1, r3
 8001c58:	f7ff ffaa 	bl	8001bb0 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8001c5c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	3301      	adds	r3, #1
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	81bb      	strh	r3, [r7, #12]
 8001c68:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	ddd5      	ble.n	8001c1e <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8001c72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3301      	adds	r3, #1
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	81fb      	strh	r3, [r7, #14]
 8001c7e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001c82:	887b      	ldrh	r3, [r7, #2]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	ddc5      	ble.n	8001c14 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd90      	pop	{r4, r7, pc}

08001c92 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001c92:	b590      	push	{r4, r7, lr}
 8001c94:	b085      	sub	sp, #20
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4604      	mov	r4, r0
 8001c9a:	4608      	mov	r0, r1
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4623      	mov	r3, r4
 8001ca2:	80fb      	strh	r3, [r7, #6]
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	80bb      	strh	r3, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]
 8001cac:	4613      	mov	r3, r2
 8001cae:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	81fb      	strh	r3, [r7, #14]
 8001cb4:	e00b      	b.n	8001cce <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8001cb6:	89fa      	ldrh	r2, [r7, #14]
 8001cb8:	88bb      	ldrh	r3, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	b299      	uxth	r1, r3
 8001cbe:	883a      	ldrh	r2, [r7, #0]
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff74 	bl	8001bb0 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8001cc8:	89fb      	ldrh	r3, [r7, #14]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	81fb      	strh	r3, [r7, #14]
 8001cce:	89fa      	ldrh	r2, [r7, #14]
 8001cd0:	887b      	ldrh	r3, [r7, #2]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d3ef      	bcc.n	8001cb6 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd90      	pop	{r4, r7, pc}

08001ce0 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	460a      	mov	r2, r1
 8001cea:	71fb      	strb	r3, [r7, #7]
 8001cec:	4613      	mov	r3, r2
 8001cee:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10e      	bne.n	8001d14 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	e007      	b.n	8001d0c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001cfc:	4908      	ldr	r1, [pc, #32]	@ (8001d20 <LCD_Clear+0x40>)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	88ba      	ldrh	r2, [r7, #4]
 8001d02:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001d12:	d3f3      	bcc.n	8001cfc <LCD_Clear+0x1c>
		}
	}
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	200001c4 	.word	0x200001c4

08001d24 <LCD_SetTextColor>:

void LCD_SetTextColor(uint16_t Color)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	@ (8001d40 <LCD_SetTextColor+0x1c>)
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	8013      	strh	r3, [r2, #0]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	20000002 	.word	0x20000002

08001d44 <LCD_SetFont>:

void LCD_SetFont(FONT_t *fonts)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001d4c:	4a04      	ldr	r2, [pc, #16]	@ (8001d60 <LCD_SetFont+0x1c>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	200001c0 	.word	0x200001c0

08001d64 <LCD_Draw_Char>:

void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	603a      	str	r2, [r7, #0]
 8001d6e:	80fb      	strh	r3, [r7, #6]
 8001d70:	460b      	mov	r3, r1
 8001d72:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	e04c      	b.n	8001e1c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	e03f      	b.n	8001e08 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	4619      	mov	r1, r3
 8001d94:	4b27      	ldr	r3, [pc, #156]	@ (8001e34 <LCD_Draw_Char+0xd0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	889b      	ldrh	r3, [r3, #4]
 8001d9a:	4a27      	ldr	r2, [pc, #156]	@ (8001e38 <LCD_Draw_Char+0xd4>)
 8001d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001da0:	08db      	lsrs	r3, r3, #3
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	2280      	movs	r2, #128	@ 0x80
 8001da8:	409a      	lsls	r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	fa42 f303 	asr.w	r3, r2, r3
 8001db0:	400b      	ands	r3, r1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d104      	bne.n	8001dc0 <LCD_Draw_Char+0x5c>
 8001db6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e34 <LCD_Draw_Char+0xd0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	2b0c      	cmp	r3, #12
 8001dbe:	d920      	bls.n	8001e02 <LCD_Draw_Char+0x9e>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	fa42 f303 	asr.w	r3, r2, r3
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d104      	bne.n	8001de4 <LCD_Draw_Char+0x80>
 8001dda:	4b16      	ldr	r3, [pc, #88]	@ (8001e34 <LCD_Draw_Char+0xd0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	889b      	ldrh	r3, [r3, #4]
 8001de0:	2b0c      	cmp	r3, #12
 8001de2:	d80e      	bhi.n	8001e02 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	4413      	add	r3, r2
 8001dec:	b298      	uxth	r0, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	88bb      	ldrh	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	4a10      	ldr	r2, [pc, #64]	@ (8001e3c <LCD_Draw_Char+0xd8>)
 8001dfa:	8812      	ldrh	r2, [r2, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7ff fed7 	bl	8001bb0 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	3301      	adds	r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <LCD_Draw_Char+0xd0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	889b      	ldrh	r3, [r3, #4]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d3b8      	bcc.n	8001d88 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <LCD_Draw_Char+0xd0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	88db      	ldrh	r3, [r3, #6]
 8001e22:	461a      	mov	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d3ab      	bcc.n	8001d82 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200001c0 	.word	0x200001c0
 8001e38:	aaaaaaab 	.word	0xaaaaaaab
 8001e3c:	20000002 	.word	0x20000002

08001e40 <LCD_DisplayChar>:

void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	80fb      	strh	r3, [r7, #6]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	80bb      	strh	r3, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	3b20      	subs	r3, #32
 8001e56:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001e58:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <LCD_DisplayChar+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	4907      	ldr	r1, [pc, #28]	@ (8001e80 <LCD_DisplayChar+0x40>)
 8001e62:	6809      	ldr	r1, [r1, #0]
 8001e64:	88c9      	ldrh	r1, [r1, #6]
 8001e66:	fb01 f303 	mul.w	r3, r1, r3
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	441a      	add	r2, r3
 8001e6e:	88b9      	ldrh	r1, [r7, #4]
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff76 	bl	8001d64 <LCD_Draw_Char>
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200001c0 	.word	0x200001c0

08001e84 <displayEmptyBoard>:

void displayEmptyBoard(void){
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
	for (int i=1; i<9; i++){
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	e02c      	b.n	8001eea <displayEmptyBoard+0x66>
		LCD_Draw_Vertical_Line(30*i+14, 125, 195, LCD_COLOR_BLACK);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	0112      	lsls	r2, r2, #4
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	330e      	adds	r3, #14
 8001ea0:	b298      	uxth	r0, r3
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	22c3      	movs	r2, #195	@ 0xc3
 8001ea6:	217d      	movs	r1, #125	@ 0x7d
 8001ea8:	f7ff fef3 	bl	8001c92 <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line(30*i+15, 125, 195, LCD_COLOR_BLACK);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	330f      	adds	r3, #15
 8001ebc:	b298      	uxth	r0, r3
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	22c3      	movs	r2, #195	@ 0xc3
 8001ec2:	217d      	movs	r1, #125	@ 0x7d
 8001ec4:	f7ff fee5 	bl	8001c92 <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line(30*i+16, 125, 195, LCD_COLOR_BLACK);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	461a      	mov	r2, r3
 8001ece:	0112      	lsls	r2, r2, #4
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3310      	adds	r3, #16
 8001ed8:	b298      	uxth	r0, r3
 8001eda:	2300      	movs	r3, #0
 8001edc:	22c3      	movs	r2, #195	@ 0xc3
 8001ede:	217d      	movs	r1, #125	@ 0x7d
 8001ee0:	f7ff fed7 	bl	8001c92 <LCD_Draw_Vertical_Line>
	for (int i=1; i<9; i++){
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	ddcf      	ble.n	8001e90 <displayEmptyBoard+0xc>
	}
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <displayFilledBoard>:

void displayFilledBoard(void){
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
	displayEmptyBoard();
 8001f00:	f7ff ffc0 	bl	8001e84 <displayEmptyBoard>
	for (int i=0; i<6; i+=2){
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	e03d      	b.n	8001f86 <displayFilledBoard+0x8c>
		uint16_t height = 300-30*i;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001f1c:	80bb      	strh	r3, [r7, #4]
		LCD_Draw_Circle_Fill(  CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_YELLOW);
 8001f1e:	88b9      	ldrh	r1, [r7, #4]
 8001f20:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001f24:	220a      	movs	r2, #10
 8001f26:	201e      	movs	r0, #30
 8001f28:	f7ff fe60 	bl	8001bec <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(2*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_RED);
 8001f2c:	88b9      	ldrh	r1, [r7, #4]
 8001f2e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f32:	220a      	movs	r2, #10
 8001f34:	203c      	movs	r0, #60	@ 0x3c
 8001f36:	f7ff fe59 	bl	8001bec <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(3*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_YELLOW);
 8001f3a:	88b9      	ldrh	r1, [r7, #4]
 8001f3c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001f40:	220a      	movs	r2, #10
 8001f42:	205a      	movs	r0, #90	@ 0x5a
 8001f44:	f7ff fe52 	bl	8001bec <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(4*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_RED);
 8001f48:	88b9      	ldrh	r1, [r7, #4]
 8001f4a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f4e:	220a      	movs	r2, #10
 8001f50:	2078      	movs	r0, #120	@ 0x78
 8001f52:	f7ff fe4b 	bl	8001bec <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(5*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_YELLOW);
 8001f56:	88b9      	ldrh	r1, [r7, #4]
 8001f58:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001f5c:	220a      	movs	r2, #10
 8001f5e:	2096      	movs	r0, #150	@ 0x96
 8001f60:	f7ff fe44 	bl	8001bec <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(6*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_RED);
 8001f64:	88b9      	ldrh	r1, [r7, #4]
 8001f66:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f6a:	220a      	movs	r2, #10
 8001f6c:	20b4      	movs	r0, #180	@ 0xb4
 8001f6e:	f7ff fe3d 	bl	8001bec <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(7*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_YELLOW);
 8001f72:	88b9      	ldrh	r1, [r7, #4]
 8001f74:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001f78:	220a      	movs	r2, #10
 8001f7a:	20d2      	movs	r0, #210	@ 0xd2
 8001f7c:	f7ff fe36 	bl	8001bec <LCD_Draw_Circle_Fill>
	for (int i=0; i<6; i+=2){
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3302      	adds	r3, #2
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b05      	cmp	r3, #5
 8001f8a:	ddbe      	ble.n	8001f0a <displayFilledBoard+0x10>
	}
	for (int i=1; i<6; i+=2){
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	e03d      	b.n	800200e <displayFilledBoard+0x114>
		uint16_t height = 300-30*i;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001fa4:	80fb      	strh	r3, [r7, #6]
		LCD_Draw_Circle_Fill(  CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_RED);
 8001fa6:	88f9      	ldrh	r1, [r7, #6]
 8001fa8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001fac:	220a      	movs	r2, #10
 8001fae:	201e      	movs	r0, #30
 8001fb0:	f7ff fe1c 	bl	8001bec <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(2*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_YELLOW);
 8001fb4:	88f9      	ldrh	r1, [r7, #6]
 8001fb6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001fba:	220a      	movs	r2, #10
 8001fbc:	203c      	movs	r0, #60	@ 0x3c
 8001fbe:	f7ff fe15 	bl	8001bec <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(3*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_RED);
 8001fc2:	88f9      	ldrh	r1, [r7, #6]
 8001fc4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001fc8:	220a      	movs	r2, #10
 8001fca:	205a      	movs	r0, #90	@ 0x5a
 8001fcc:	f7ff fe0e 	bl	8001bec <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(4*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_YELLOW);
 8001fd0:	88f9      	ldrh	r1, [r7, #6]
 8001fd2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001fd6:	220a      	movs	r2, #10
 8001fd8:	2078      	movs	r0, #120	@ 0x78
 8001fda:	f7ff fe07 	bl	8001bec <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(5*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_RED);
 8001fde:	88f9      	ldrh	r1, [r7, #6]
 8001fe0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001fe4:	220a      	movs	r2, #10
 8001fe6:	2096      	movs	r0, #150	@ 0x96
 8001fe8:	f7ff fe00 	bl	8001bec <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(6*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_YELLOW);
 8001fec:	88f9      	ldrh	r1, [r7, #6]
 8001fee:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001ff2:	220a      	movs	r2, #10
 8001ff4:	20b4      	movs	r0, #180	@ 0xb4
 8001ff6:	f7ff fdf9 	bl	8001bec <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(7*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_RED);
 8001ffa:	88f9      	ldrh	r1, [r7, #6]
 8001ffc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002000:	220a      	movs	r2, #10
 8002002:	20d2      	movs	r0, #210	@ 0xd2
 8002004:	f7ff fdf2 	bl	8001bec <LCD_Draw_Circle_Fill>
	for (int i=1; i<6; i+=2){
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	3302      	adds	r3, #2
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b05      	cmp	r3, #5
 8002012:	ddbe      	ble.n	8001f92 <displayFilledBoard+0x98>
	}
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <dropChip>:

void dropChip(Gameboard * gameboard, uint8_t currentColumn, uint16_t color){
 800201e:	b590      	push	{r4, r7, lr}
 8002020:	b085      	sub	sp, #20
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	70fb      	strb	r3, [r7, #3]
 800202a:	4613      	mov	r3, r2
 800202c:	803b      	strh	r3, [r7, #0]
	uint16_t currentHeight = gameboard->column[currentColumn-1].currentHeight;
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	1e5a      	subs	r2, r3, #1
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	440b      	add	r3, r1
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	81fb      	strh	r3, [r7, #14]
	uint16_t dropHeight = 300-CHIP_HSPACE*currentHeight;
 8002042:	89fb      	ldrh	r3, [r7, #14]
 8002044:	461a      	mov	r2, r3
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	b29b      	uxth	r3, r3
 800204e:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8002052:	81bb      	strh	r3, [r7, #12]
	LCD_Draw_Circle_Fill(CHIP_HSPACE*currentColumn, dropHeight, CHIP_RADIUS, color);
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	b29b      	uxth	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	b298      	uxth	r0, r3
 8002062:	883b      	ldrh	r3, [r7, #0]
 8002064:	89b9      	ldrh	r1, [r7, #12]
 8002066:	220a      	movs	r2, #10
 8002068:	f7ff fdc0 	bl	8001bec <LCD_Draw_Circle_Fill>

	gameboard->column[currentColumn-1].contents[currentHeight] = gameboard->whosTurn;
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	1e5a      	subs	r2, r3, #1
 8002070:	89f9      	ldrh	r1, [r7, #14]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 4046 	ldrb.w	r4, [r3, #70]	@ 0x46
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4403      	add	r3, r0
 8002084:	440b      	add	r3, r1
 8002086:	3302      	adds	r3, #2
 8002088:	4622      	mov	r2, r4
 800208a:	701a      	strb	r2, [r3, #0]
	gameboard->column[currentColumn-1].currentHeight++;
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	1e5a      	subs	r2, r3, #1
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	440b      	add	r3, r1
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	3301      	adds	r3, #1
 80020a0:	b298      	uxth	r0, r3
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	440b      	add	r3, r1
 80020ae:	4602      	mov	r2, r0
 80020b0:	801a      	strh	r2, [r3, #0]
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd90      	pop	{r4, r7, pc}

080020ba <LCD_Error_Handler>:

void LCD_Error_Handler(void)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020be:	b672      	cpsid	i
}
 80020c0:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1){
		LCD_Clear(0, LCD_COLOR_RED);
 80020c2:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7ff fe0a 	bl	8001ce0 <LCD_Clear>
		HAL_Delay(1000);
 80020cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020d0:	f001 fed4 	bl	8003e7c <HAL_Delay>
		LCD_Clear(0, LCD_COLOR_WHITE);
 80020d4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80020d8:	2000      	movs	r0, #0
 80020da:	f7ff fe01 	bl	8001ce0 <LCD_Clear>
		HAL_Delay(1000);
 80020de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020e2:	f001 fecb 	bl	8003e7c <HAL_Delay>
		LCD_Clear(0, LCD_COLOR_RED);
 80020e6:	bf00      	nop
 80020e8:	e7eb      	b.n	80020c2 <LCD_Error_Handler+0x8>

080020ea <InitializeLCDTouch>:
}

/* Touch Functionality */

void InitializeLCDTouch(void)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 80020ee:	f001 fa90 	bl	8003612 <STMPE811_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d001      	beq.n	80020fc <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 80020f8:	bf00      	nop
 80020fa:	e7fd      	b.n	80020f8 <InitializeLCDTouch+0xe>
  }
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}

08002100 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f001 fb3a 	bl	8003782 <STMPE811_ReadTouch>
 800210e:	4603      	mov	r3, r0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <selectMode>:
void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
	STMPE811_Write(RegToWrite, writeData);
}

uint8_t selectMode(STMPE811_TouchData * touchStruct){
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	touchStruct->y = 0;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	805a      	strh	r2, [r3, #2]
	while (1) {
		if (returnTouchStateAndLocation(touchStruct) == STMPE811_State_Pressed){
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffea 	bl	8002100 <returnTouchStateAndLocation>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f9      	bne.n	8002126 <selectMode+0xe>
			if (touchStruct->y > LCD_PIXEL_HEIGHT-50 && touchStruct->y < LCD_PIXEL_HEIGHT-10)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	885b      	ldrh	r3, [r3, #2]
 8002136:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800213a:	d906      	bls.n	800214a <selectMode+0x32>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	885b      	ldrh	r3, [r3, #2]
 8002140:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 8002144:	d201      	bcs.n	800214a <selectMode+0x32>
				return (uint8_t)1;
 8002146:	2301      	movs	r3, #1
 8002148:	e009      	b.n	800215e <selectMode+0x46>
			else if (touchStruct->y > LCD_PIXEL_HEIGHT-100 && touchStruct->y < LCD_PIXEL_HEIGHT-60)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	885b      	ldrh	r3, [r3, #2]
 800214e:	2bdc      	cmp	r3, #220	@ 0xdc
 8002150:	d9e9      	bls.n	8002126 <selectMode+0xe>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	885b      	ldrh	r3, [r3, #2]
 8002156:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800215a:	d2e4      	bcs.n	8002126 <selectMode+0xe>
				return (uint8_t)2;
 800215c:	2302      	movs	r3, #2
		}
	}
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <returnToMenu>:

void returnToMenu(STMPE811_TouchData * touchStruct){
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
	touchStruct->y = 0;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	805a      	strh	r2, [r3, #2]
	while (1) {
		if (returnTouchStateAndLocation(touchStruct) == STMPE811_State_Pressed){
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ffc3 	bl	8002100 <returnTouchStateAndLocation>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f9      	bne.n	8002174 <returnToMenu+0xe>
			if (touchStruct->y > LCD_PIXEL_HEIGHT-110 && touchStruct->y < LCD_PIXEL_HEIGHT-70)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	885b      	ldrh	r3, [r3, #2]
 8002184:	2bd2      	cmp	r3, #210	@ 0xd2
 8002186:	d9f5      	bls.n	8002174 <returnToMenu+0xe>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	885b      	ldrh	r3, [r3, #2]
 800218c:	2bf9      	cmp	r3, #249	@ 0xf9
 800218e:	d900      	bls.n	8002192 <returnToMenu+0x2c>
		if (returnTouchStateAndLocation(touchStruct) == STMPE811_State_Pressed){
 8002190:	e7f0      	b.n	8002174 <returnToMenu+0xe>
				return;
 8002192:	bf00      	nop
		}
	}
}
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <switchColumn>:

bool switchColumn(STMPE811_TouchData * touchStruct, uint8_t * currentColumn){
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
	touchStruct->x = 0;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	801a      	strh	r2, [r3, #0]
	if (returnTouchStateAndLocation(touchStruct) == STMPE811_State_Pressed){
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffa8 	bl	8002100 <returnTouchStateAndLocation>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d11e      	bne.n	80021f4 <switchColumn+0x5a>
		if (touchStruct->x < LCD_PIXEL_WIDTH / 2){
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	2b77      	cmp	r3, #119	@ 0x77
 80021bc:	d80c      	bhi.n	80021d8 <switchColumn+0x3e>
			*currentColumn = (*currentColumn > 1) ? *currentColumn-1 : 7;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d904      	bls.n	80021d0 <switchColumn+0x36>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	e000      	b.n	80021d2 <switchColumn+0x38>
 80021d0:	2207      	movs	r2, #7
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	e00b      	b.n	80021f0 <switchColumn+0x56>
		} else {
			*currentColumn = (*currentColumn < 7) ? *currentColumn+1 : 1;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b06      	cmp	r3, #6
 80021de:	d804      	bhi.n	80021ea <switchColumn+0x50>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	3301      	adds	r3, #1
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	e000      	b.n	80021ec <switchColumn+0x52>
 80021ea:	2201      	movs	r2, #1
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	701a      	strb	r2, [r3, #0]
		}
		return true;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <switchColumn+0x5c>
	}
	return false;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <getScheduledEvents>:

#include "Scheduler.h"

static uint32_t scheduledEvents = 0;

uint32_t getScheduledEvents(){
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8002204:	4b03      	ldr	r3, [pc, #12]	@ (8002214 <getScheduledEvents+0x14>)
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	200259c4 	.word	0x200259c4

08002218 <addSchedulerEvent>:

void addSchedulerEvent(uint32_t event){
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event;
 8002220:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <addSchedulerEvent+0x20>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4313      	orrs	r3, r2
 8002228:	4a03      	ldr	r2, [pc, #12]	@ (8002238 <addSchedulerEvent+0x20>)
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	200259c4 	.word	0x200259c4

0800223c <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event){
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	43da      	mvns	r2, r3
 8002248:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <removeSchedulerEvent+0x24>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4013      	ands	r3, r2
 800224e:	4a04      	ldr	r2, [pc, #16]	@ (8002260 <removeSchedulerEvent+0x24>)
 8002250:	6013      	str	r3, [r2, #0]
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	200259c4 	.word	0x200259c4

08002264 <Tim2Init>:

#include "Timer_Driver.h"

static TIM_HandleTypeDef TC;

void Tim2Init(){
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
	TC.Instance = TIM2;
 800226a:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <Tim2Init+0x6c>)
 800226c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002270:	601a      	str	r2, [r3, #0]
	TC.Init.Prescaler         = PRESCALER; // 0x0
 8002272:	4b17      	ldr	r3, [pc, #92]	@ (80022d0 <Tim2Init+0x6c>)
 8002274:	2200      	movs	r2, #0
 8002276:	605a      	str	r2, [r3, #4]
	TC.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8002278:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <Tim2Init+0x6c>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
	TC.Init.Period            = AUTORELOAD; // 0x03D08FFF
 800227e:	4b14      	ldr	r3, [pc, #80]	@ (80022d0 <Tim2Init+0x6c>)
 8002280:	4a14      	ldr	r2, [pc, #80]	@ (80022d4 <Tim2Init+0x70>)
 8002282:	60da      	str	r2, [r3, #12]
	TC.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8002284:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <Tim2Init+0x6c>)
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]
	TC.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228a:	4b11      	ldr	r3, [pc, #68]	@ (80022d0 <Tim2Init+0x6c>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]

	__HAL_RCC_TIM2_CLK_ENABLE();
 8002290:	2300      	movs	r3, #0
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	4b10      	ldr	r3, [pc, #64]	@ (80022d8 <Tim2Init+0x74>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002298:	4a0f      	ldr	r2, [pc, #60]	@ (80022d8 <Tim2Init+0x74>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a0:	4b0d      	ldr	r3, [pc, #52]	@ (80022d8 <Tim2Init+0x74>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
	HAL_TIM_Base_Init(&TC);
 80022ac:	4808      	ldr	r0, [pc, #32]	@ (80022d0 <Tim2Init+0x6c>)
 80022ae:	f004 fedf 	bl	8007070 <HAL_TIM_Base_Init>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022b2:	201c      	movs	r0, #28
 80022b4:	f001 ff3f 	bl	8004136 <HAL_NVIC_EnableIRQ>
	__HAL_TIM_ENABLE_IT(&TC, TIM_IT_UPDATE);
 80022b8:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <Tim2Init+0x6c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <Tim2Init+0x6c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	60da      	str	r2, [r3, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	200259c8 	.word	0x200259c8
 80022d4:	03d08fff 	.word	0x03d08fff
 80022d8:	40023800 	.word	0x40023800

080022dc <Tim2Start>:

void Tim2Start(){
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE(&TC);
 80022e0:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <Tim2Start+0x20>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <Tim2Start+0x20>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	200259c8 	.word	0x200259c8

08002300 <Tim2Stop>:

void Tim2Stop(){
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
	__HAL_TIM_DISABLE(&TC);
 8002304:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <Tim2Stop+0x40>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6a1a      	ldr	r2, [r3, #32]
 800230a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10f      	bne.n	8002334 <Tim2Stop+0x34>
 8002314:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <Tim2Stop+0x40>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6a1a      	ldr	r2, [r3, #32]
 800231a:	f240 4344 	movw	r3, #1092	@ 0x444
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d107      	bne.n	8002334 <Tim2Stop+0x34>
 8002324:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <Tim2Stop+0x40>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <Tim2Stop+0x40>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	200259c8 	.word	0x200259c8

08002344 <Tim2Reset>:

void Tim2Reset(){
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&TC, RESET);
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <Tim2Reset+0x18>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2200      	movs	r2, #0
 800234e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	200259c8 	.word	0x200259c8

08002360 <GetTim2Count>:

uint32_t GetTim2Count(){
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&TC);
 8002364:	4b03      	ldr	r3, [pc, #12]	@ (8002374 <GetTim2Count+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	200259c8 	.word	0x200259c8

08002378 <Tim2ClearSR>:

void SetTim2AutoReload(uint32_t val){
	__HAL_TIM_SET_AUTORELOAD(&TC, val);
}

void Tim2ClearSR(){
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT(&TC, TIM_SR_UIF);
 800237c:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <Tim2ClearSR+0x18>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0201 	mvn.w	r2, #1
 8002384:	611a      	str	r2, [r3, #16]
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	200259c8 	.word	0x200259c8

08002394 <GetTimeInSeconds>:

uint32_t GetTimeInSeconds(uint32_t numTimerOverflow) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
    uint32_t timer_clock = HAL_RCC_GetPCLK1Freq()*2;
 800239c:	f004 f98a 	bl	80066b4 <HAL_RCC_GetPCLK1Freq>
 80023a0:	4603      	mov	r3, r0
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	60fb      	str	r3, [r7, #12]
    uint32_t time = (GetTim2Count()+1) / timer_clock;
 80023a6:	f7ff ffdb 	bl	8002360 <GetTim2Count>
 80023aa:	4603      	mov	r3, r0
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	60bb      	str	r3, [r7, #8]
    time += ((numTimerOverflow*(AUTORELOAD+1)) / timer_clock);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a06      	ldr	r2, [pc, #24]	@ (80023d4 <GetTimeInSeconds+0x40>)
 80023ba:	fb03 f202 	mul.w	r2, r3, r2
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	4413      	add	r3, r2
 80023c8:	60bb      	str	r3, [r7, #8]
    return time;
 80023ca:	68bb      	ldr	r3, [r7, #8]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	03d09000 	.word	0x03d09000

080023d8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80023dc:	f000 f9fe 	bl	80027dc <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80023e0:	20ca      	movs	r0, #202	@ 0xca
 80023e2:	f000 f943 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80023e6:	20c3      	movs	r0, #195	@ 0xc3
 80023e8:	f000 f94d 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80023ec:	2008      	movs	r0, #8
 80023ee:	f000 f94a 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80023f2:	2050      	movs	r0, #80	@ 0x50
 80023f4:	f000 f947 	bl	8002686 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80023f8:	20cf      	movs	r0, #207	@ 0xcf
 80023fa:	f000 f937 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80023fe:	2000      	movs	r0, #0
 8002400:	f000 f941 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8002404:	20c1      	movs	r0, #193	@ 0xc1
 8002406:	f000 f93e 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800240a:	2030      	movs	r0, #48	@ 0x30
 800240c:	f000 f93b 	bl	8002686 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8002410:	20ed      	movs	r0, #237	@ 0xed
 8002412:	f000 f92b 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8002416:	2064      	movs	r0, #100	@ 0x64
 8002418:	f000 f935 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800241c:	2003      	movs	r0, #3
 800241e:	f000 f932 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8002422:	2012      	movs	r0, #18
 8002424:	f000 f92f 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8002428:	2081      	movs	r0, #129	@ 0x81
 800242a:	f000 f92c 	bl	8002686 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800242e:	20e8      	movs	r0, #232	@ 0xe8
 8002430:	f000 f91c 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8002434:	2085      	movs	r0, #133	@ 0x85
 8002436:	f000 f926 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800243a:	2000      	movs	r0, #0
 800243c:	f000 f923 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002440:	2078      	movs	r0, #120	@ 0x78
 8002442:	f000 f920 	bl	8002686 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8002446:	20cb      	movs	r0, #203	@ 0xcb
 8002448:	f000 f910 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800244c:	2039      	movs	r0, #57	@ 0x39
 800244e:	f000 f91a 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8002452:	202c      	movs	r0, #44	@ 0x2c
 8002454:	f000 f917 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002458:	2000      	movs	r0, #0
 800245a:	f000 f914 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800245e:	2034      	movs	r0, #52	@ 0x34
 8002460:	f000 f911 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8002464:	2002      	movs	r0, #2
 8002466:	f000 f90e 	bl	8002686 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800246a:	20f7      	movs	r0, #247	@ 0xf7
 800246c:	f000 f8fe 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8002470:	2020      	movs	r0, #32
 8002472:	f000 f908 	bl	8002686 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8002476:	20ea      	movs	r0, #234	@ 0xea
 8002478:	f000 f8f8 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800247c:	2000      	movs	r0, #0
 800247e:	f000 f902 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002482:	2000      	movs	r0, #0
 8002484:	f000 f8ff 	bl	8002686 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8002488:	20b1      	movs	r0, #177	@ 0xb1
 800248a:	f000 f8ef 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800248e:	2000      	movs	r0, #0
 8002490:	f000 f8f9 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002494:	201b      	movs	r0, #27
 8002496:	f000 f8f6 	bl	8002686 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800249a:	20b6      	movs	r0, #182	@ 0xb6
 800249c:	f000 f8e6 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80024a0:	200a      	movs	r0, #10
 80024a2:	f000 f8f0 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80024a6:	20a2      	movs	r0, #162	@ 0xa2
 80024a8:	f000 f8ed 	bl	8002686 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80024ac:	20c0      	movs	r0, #192	@ 0xc0
 80024ae:	f000 f8dd 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80024b2:	2010      	movs	r0, #16
 80024b4:	f000 f8e7 	bl	8002686 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80024b8:	20c1      	movs	r0, #193	@ 0xc1
 80024ba:	f000 f8d7 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80024be:	2010      	movs	r0, #16
 80024c0:	f000 f8e1 	bl	8002686 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80024c4:	20c5      	movs	r0, #197	@ 0xc5
 80024c6:	f000 f8d1 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80024ca:	2045      	movs	r0, #69	@ 0x45
 80024cc:	f000 f8db 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80024d0:	2015      	movs	r0, #21
 80024d2:	f000 f8d8 	bl	8002686 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80024d6:	20c7      	movs	r0, #199	@ 0xc7
 80024d8:	f000 f8c8 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80024dc:	2090      	movs	r0, #144	@ 0x90
 80024de:	f000 f8d2 	bl	8002686 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80024e2:	2036      	movs	r0, #54	@ 0x36
 80024e4:	f000 f8c2 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80024e8:	20c8      	movs	r0, #200	@ 0xc8
 80024ea:	f000 f8cc 	bl	8002686 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80024ee:	20f2      	movs	r0, #242	@ 0xf2
 80024f0:	f000 f8bc 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80024f4:	2000      	movs	r0, #0
 80024f6:	f000 f8c6 	bl	8002686 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80024fa:	20b0      	movs	r0, #176	@ 0xb0
 80024fc:	f000 f8b6 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8002500:	20c2      	movs	r0, #194	@ 0xc2
 8002502:	f000 f8c0 	bl	8002686 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002506:	20b6      	movs	r0, #182	@ 0xb6
 8002508:	f000 f8b0 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800250c:	200a      	movs	r0, #10
 800250e:	f000 f8ba 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8002512:	20a7      	movs	r0, #167	@ 0xa7
 8002514:	f000 f8b7 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8002518:	2027      	movs	r0, #39	@ 0x27
 800251a:	f000 f8b4 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800251e:	2004      	movs	r0, #4
 8002520:	f000 f8b1 	bl	8002686 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8002524:	202a      	movs	r0, #42	@ 0x2a
 8002526:	f000 f8a1 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800252a:	2000      	movs	r0, #0
 800252c:	f000 f8ab 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002530:	2000      	movs	r0, #0
 8002532:	f000 f8a8 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002536:	2000      	movs	r0, #0
 8002538:	f000 f8a5 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800253c:	20ef      	movs	r0, #239	@ 0xef
 800253e:	f000 f8a2 	bl	8002686 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8002542:	202b      	movs	r0, #43	@ 0x2b
 8002544:	f000 f892 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002548:	2000      	movs	r0, #0
 800254a:	f000 f89c 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800254e:	2000      	movs	r0, #0
 8002550:	f000 f899 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002554:	2001      	movs	r0, #1
 8002556:	f000 f896 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800255a:	203f      	movs	r0, #63	@ 0x3f
 800255c:	f000 f893 	bl	8002686 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8002560:	20f6      	movs	r0, #246	@ 0xf6
 8002562:	f000 f883 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002566:	2001      	movs	r0, #1
 8002568:	f000 f88d 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800256c:	2000      	movs	r0, #0
 800256e:	f000 f88a 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8002572:	2006      	movs	r0, #6
 8002574:	f000 f887 	bl	8002686 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8002578:	202c      	movs	r0, #44	@ 0x2c
 800257a:	f000 f877 	bl	800266c <ili9341_Write_Reg>
  LCD_Delay(200);
 800257e:	20c8      	movs	r0, #200	@ 0xc8
 8002580:	f000 f9e8 	bl	8002954 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002584:	2026      	movs	r0, #38	@ 0x26
 8002586:	f000 f871 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800258a:	2001      	movs	r0, #1
 800258c:	f000 f87b 	bl	8002686 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8002590:	20e0      	movs	r0, #224	@ 0xe0
 8002592:	f000 f86b 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8002596:	200f      	movs	r0, #15
 8002598:	f000 f875 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800259c:	2029      	movs	r0, #41	@ 0x29
 800259e:	f000 f872 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80025a2:	2024      	movs	r0, #36	@ 0x24
 80025a4:	f000 f86f 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80025a8:	200c      	movs	r0, #12
 80025aa:	f000 f86c 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80025ae:	200e      	movs	r0, #14
 80025b0:	f000 f869 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80025b4:	2009      	movs	r0, #9
 80025b6:	f000 f866 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80025ba:	204e      	movs	r0, #78	@ 0x4e
 80025bc:	f000 f863 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80025c0:	2078      	movs	r0, #120	@ 0x78
 80025c2:	f000 f860 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80025c6:	203c      	movs	r0, #60	@ 0x3c
 80025c8:	f000 f85d 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80025cc:	2009      	movs	r0, #9
 80025ce:	f000 f85a 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80025d2:	2013      	movs	r0, #19
 80025d4:	f000 f857 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80025d8:	2005      	movs	r0, #5
 80025da:	f000 f854 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80025de:	2017      	movs	r0, #23
 80025e0:	f000 f851 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80025e4:	2011      	movs	r0, #17
 80025e6:	f000 f84e 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80025ea:	2000      	movs	r0, #0
 80025ec:	f000 f84b 	bl	8002686 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80025f0:	20e1      	movs	r0, #225	@ 0xe1
 80025f2:	f000 f83b 	bl	800266c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80025f6:	2000      	movs	r0, #0
 80025f8:	f000 f845 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80025fc:	2016      	movs	r0, #22
 80025fe:	f000 f842 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002602:	201b      	movs	r0, #27
 8002604:	f000 f83f 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002608:	2004      	movs	r0, #4
 800260a:	f000 f83c 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800260e:	2011      	movs	r0, #17
 8002610:	f000 f839 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002614:	2007      	movs	r0, #7
 8002616:	f000 f836 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800261a:	2031      	movs	r0, #49	@ 0x31
 800261c:	f000 f833 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8002620:	2033      	movs	r0, #51	@ 0x33
 8002622:	f000 f830 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8002626:	2042      	movs	r0, #66	@ 0x42
 8002628:	f000 f82d 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800262c:	2005      	movs	r0, #5
 800262e:	f000 f82a 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002632:	200c      	movs	r0, #12
 8002634:	f000 f827 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002638:	200a      	movs	r0, #10
 800263a:	f000 f824 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800263e:	2028      	movs	r0, #40	@ 0x28
 8002640:	f000 f821 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002644:	202f      	movs	r0, #47	@ 0x2f
 8002646:	f000 f81e 	bl	8002686 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800264a:	200f      	movs	r0, #15
 800264c:	f000 f81b 	bl	8002686 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002650:	2011      	movs	r0, #17
 8002652:	f000 f80b 	bl	800266c <ili9341_Write_Reg>
  LCD_Delay(200);
 8002656:	20c8      	movs	r0, #200	@ 0xc8
 8002658:	f000 f97c 	bl	8002954 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800265c:	2029      	movs	r0, #41	@ 0x29
 800265e:	f000 f805 	bl	800266c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002662:	202c      	movs	r0, #44	@ 0x2c
 8002664:	f000 f802 	bl	800266c <ili9341_Write_Reg>
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}

0800266c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	4618      	mov	r0, r3
 800267a:	f000 f949 	bl	8002910 <LCD_IO_WriteReg>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f91a 	bl	80028cc <LCD_IO_WriteData>
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80026a4:	4819      	ldr	r0, [pc, #100]	@ (800270c <SPI_Init+0x6c>)
 80026a6:	f004 fbf8 	bl	8006e9a <HAL_SPI_GetState>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d12b      	bne.n	8002708 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80026b0:	4b16      	ldr	r3, [pc, #88]	@ (800270c <SPI_Init+0x6c>)
 80026b2:	4a17      	ldr	r2, [pc, #92]	@ (8002710 <SPI_Init+0x70>)
 80026b4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80026b6:	4b15      	ldr	r3, [pc, #84]	@ (800270c <SPI_Init+0x6c>)
 80026b8:	2218      	movs	r2, #24
 80026ba:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80026bc:	4b13      	ldr	r3, [pc, #76]	@ (800270c <SPI_Init+0x6c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80026c2:	4b12      	ldr	r3, [pc, #72]	@ (800270c <SPI_Init+0x6c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80026c8:	4b10      	ldr	r3, [pc, #64]	@ (800270c <SPI_Init+0x6c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80026ce:	4b0f      	ldr	r3, [pc, #60]	@ (800270c <SPI_Init+0x6c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80026d4:	4b0d      	ldr	r3, [pc, #52]	@ (800270c <SPI_Init+0x6c>)
 80026d6:	2207      	movs	r2, #7
 80026d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80026da:	4b0c      	ldr	r3, [pc, #48]	@ (800270c <SPI_Init+0x6c>)
 80026dc:	2200      	movs	r2, #0
 80026de:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80026e0:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <SPI_Init+0x6c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80026e6:	4b09      	ldr	r3, [pc, #36]	@ (800270c <SPI_Init+0x6c>)
 80026e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026ec:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80026ee:	4b07      	ldr	r3, [pc, #28]	@ (800270c <SPI_Init+0x6c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80026f4:	4b05      	ldr	r3, [pc, #20]	@ (800270c <SPI_Init+0x6c>)
 80026f6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026fa:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80026fc:	4803      	ldr	r0, [pc, #12]	@ (800270c <SPI_Init+0x6c>)
 80026fe:	f000 f833 	bl	8002768 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002702:	4802      	ldr	r0, [pc, #8]	@ (800270c <SPI_Init+0x6c>)
 8002704:	f004 f9d4 	bl	8006ab0 <HAL_SPI_Init>
  }
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20025a10 	.word	0x20025a10
 8002710:	40015000 	.word	0x40015000

08002714 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002722:	4b09      	ldr	r3, [pc, #36]	@ (8002748 <SPI_Write+0x34>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	1db9      	adds	r1, r7, #6
 8002728:	2201      	movs	r2, #1
 800272a:	4808      	ldr	r0, [pc, #32]	@ (800274c <SPI_Write+0x38>)
 800272c:	f004 fa71 	bl	8006c12 <HAL_SPI_Transmit>
 8002730:	4603      	mov	r3, r0
 8002732:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800273a:	f000 f809 	bl	8002750 <SPI_Error>
  }
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000014 	.word	0x20000014
 800274c:	20025a10 	.word	0x20025a10

08002750 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002754:	4803      	ldr	r0, [pc, #12]	@ (8002764 <SPI_Error+0x14>)
 8002756:	f004 fa34 	bl	8006bc2 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800275a:	f7ff ffa1 	bl	80026a0 <SPI_Init>
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20025a10 	.word	0x20025a10

08002768 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	@ 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	4b17      	ldr	r3, [pc, #92]	@ (80027d4 <SPI_MspInit+0x6c>)
 8002776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002778:	4a16      	ldr	r2, [pc, #88]	@ (80027d4 <SPI_MspInit+0x6c>)
 800277a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800277e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002780:	4b14      	ldr	r3, [pc, #80]	@ (80027d4 <SPI_MspInit+0x6c>)
 8002782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002784:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	4b10      	ldr	r3, [pc, #64]	@ (80027d4 <SPI_MspInit+0x6c>)
 8002792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002794:	4a0f      	ldr	r2, [pc, #60]	@ (80027d4 <SPI_MspInit+0x6c>)
 8002796:	f043 0320 	orr.w	r3, r3, #32
 800279a:	6313      	str	r3, [r2, #48]	@ 0x30
 800279c:	4b0d      	ldr	r3, [pc, #52]	@ (80027d4 <SPI_MspInit+0x6c>)
 800279e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80027a8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80027ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80027ae:	2302      	movs	r3, #2
 80027b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80027b2:	2302      	movs	r3, #2
 80027b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80027b6:	2301      	movs	r3, #1
 80027b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80027ba:	2305      	movs	r3, #5
 80027bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	4619      	mov	r1, r3
 80027c4:	4804      	ldr	r0, [pc, #16]	@ (80027d8 <SPI_MspInit+0x70>)
 80027c6:	f001 fced 	bl	80041a4 <HAL_GPIO_Init>
}
 80027ca:	bf00      	nop
 80027cc:	3728      	adds	r7, #40	@ 0x28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40021400 	.word	0x40021400

080027dc <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80027e2:	4b36      	ldr	r3, [pc, #216]	@ (80028bc <LCD_IO_Init+0xe0>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d164      	bne.n	80028b4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80027ea:	4b34      	ldr	r3, [pc, #208]	@ (80028bc <LCD_IO_Init+0xe0>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80027f0:	2300      	movs	r3, #0
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	4b32      	ldr	r3, [pc, #200]	@ (80028c0 <LCD_IO_Init+0xe4>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f8:	4a31      	ldr	r2, [pc, #196]	@ (80028c0 <LCD_IO_Init+0xe4>)
 80027fa:	f043 0308 	orr.w	r3, r3, #8
 80027fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002800:	4b2f      	ldr	r3, [pc, #188]	@ (80028c0 <LCD_IO_Init+0xe4>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800280c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002810:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002812:	2301      	movs	r3, #1
 8002814:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800281a:	2302      	movs	r3, #2
 800281c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800281e:	f107 030c 	add.w	r3, r7, #12
 8002822:	4619      	mov	r1, r3
 8002824:	4827      	ldr	r0, [pc, #156]	@ (80028c4 <LCD_IO_Init+0xe8>)
 8002826:	f001 fcbd 	bl	80041a4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	4b24      	ldr	r3, [pc, #144]	@ (80028c0 <LCD_IO_Init+0xe4>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	4a23      	ldr	r2, [pc, #140]	@ (80028c0 <LCD_IO_Init+0xe4>)
 8002834:	f043 0308 	orr.w	r3, r3, #8
 8002838:	6313      	str	r3, [r2, #48]	@ 0x30
 800283a:	4b21      	ldr	r3, [pc, #132]	@ (80028c0 <LCD_IO_Init+0xe4>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800284a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800284c:	2301      	movs	r3, #1
 800284e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002854:	2302      	movs	r3, #2
 8002856:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002858:	f107 030c 	add.w	r3, r7, #12
 800285c:	4619      	mov	r1, r3
 800285e:	4819      	ldr	r0, [pc, #100]	@ (80028c4 <LCD_IO_Init+0xe8>)
 8002860:	f001 fca0 	bl	80041a4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002864:	2300      	movs	r3, #0
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <LCD_IO_Init+0xe4>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286c:	4a14      	ldr	r2, [pc, #80]	@ (80028c0 <LCD_IO_Init+0xe4>)
 800286e:	f043 0304 	orr.w	r3, r3, #4
 8002872:	6313      	str	r3, [r2, #48]	@ 0x30
 8002874:	4b12      	ldr	r3, [pc, #72]	@ (80028c0 <LCD_IO_Init+0xe4>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002880:	2304      	movs	r3, #4
 8002882:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002884:	2301      	movs	r3, #1
 8002886:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800288c:	2302      	movs	r3, #2
 800288e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002890:	f107 030c 	add.w	r3, r7, #12
 8002894:	4619      	mov	r1, r3
 8002896:	480c      	ldr	r0, [pc, #48]	@ (80028c8 <LCD_IO_Init+0xec>)
 8002898:	f001 fc84 	bl	80041a4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 800289c:	2200      	movs	r2, #0
 800289e:	2104      	movs	r1, #4
 80028a0:	4809      	ldr	r0, [pc, #36]	@ (80028c8 <LCD_IO_Init+0xec>)
 80028a2:	f001 ff37 	bl	8004714 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80028a6:	2201      	movs	r2, #1
 80028a8:	2104      	movs	r1, #4
 80028aa:	4807      	ldr	r0, [pc, #28]	@ (80028c8 <LCD_IO_Init+0xec>)
 80028ac:	f001 ff32 	bl	8004714 <HAL_GPIO_WritePin>

    SPI_Init();
 80028b0:	f7ff fef6 	bl	80026a0 <SPI_Init>
  }
}
 80028b4:	bf00      	nop
 80028b6:	3720      	adds	r7, #32
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20025a68 	.word	0x20025a68
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020c00 	.word	0x40020c00
 80028c8:	40020800 	.word	0x40020800

080028cc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80028d6:	2201      	movs	r2, #1
 80028d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028dc:	480a      	ldr	r0, [pc, #40]	@ (8002908 <LCD_IO_WriteData+0x3c>)
 80028de:	f001 ff19 	bl	8004714 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80028e2:	2200      	movs	r2, #0
 80028e4:	2104      	movs	r1, #4
 80028e6:	4809      	ldr	r0, [pc, #36]	@ (800290c <LCD_IO_WriteData+0x40>)
 80028e8:	f001 ff14 	bl	8004714 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff ff10 	bl	8002714 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80028f4:	2201      	movs	r2, #1
 80028f6:	2104      	movs	r1, #4
 80028f8:	4804      	ldr	r0, [pc, #16]	@ (800290c <LCD_IO_WriteData+0x40>)
 80028fa:	f001 ff0b 	bl	8004714 <HAL_GPIO_WritePin>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40020c00 	.word	0x40020c00
 800290c:	40020800 	.word	0x40020800

08002910 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800291a:	2200      	movs	r2, #0
 800291c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002920:	480a      	ldr	r0, [pc, #40]	@ (800294c <LCD_IO_WriteReg+0x3c>)
 8002922:	f001 fef7 	bl	8004714 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002926:	2200      	movs	r2, #0
 8002928:	2104      	movs	r1, #4
 800292a:	4809      	ldr	r0, [pc, #36]	@ (8002950 <LCD_IO_WriteReg+0x40>)
 800292c:	f001 fef2 	bl	8004714 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	b29b      	uxth	r3, r3
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff feed 	bl	8002714 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800293a:	2201      	movs	r2, #1
 800293c:	2104      	movs	r1, #4
 800293e:	4804      	ldr	r0, [pc, #16]	@ (8002950 <LCD_IO_WriteReg+0x40>)
 8002940:	f001 fee8 	bl	8004714 <HAL_GPIO_WritePin>
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40020c00 	.word	0x40020c00
 8002950:	40020800 	.word	0x40020800

08002954 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f001 fa8d 	bl	8003e7c <HAL_Delay>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <main>:
static void MX_TIM2_Init(void);
static void MX_SPI5_Init(void);
static void MX_I2C3_Init(void);

int main(void)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800296e:	f001 fa13 	bl	8003d98 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8002972:	f000 f817 	bl	80029a4 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002976:	f000 fa07 	bl	8002d88 <MX_GPIO_Init>
	MX_LTDC_Init();
 800297a:	f000 f8bd 	bl	8002af8 <MX_LTDC_Init>
	MX_RNG_Init();
 800297e:	f000 f96d 	bl	8002c5c <MX_RNG_Init>
	MX_TIM2_Init();
 8002982:	f000 f9b5 	bl	8002cf0 <MX_TIM2_Init>
	MX_SPI5_Init();
 8002986:	f000 f97d 	bl	8002c84 <MX_SPI5_Init>
	MX_I2C3_Init();
 800298a:	f000 f875 	bl	8002a78 <MX_I2C3_Init>

	ApplicationInit();
 800298e:	f7fe f9e5 	bl	8000d5c <ApplicationInit>
	HAL_Delay(1000);
 8002992:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002996:	f001 fa71 	bl	8003e7c <HAL_Delay>

	StartGame();
 800299a:	f7fe ff15 	bl	80017c8 <StartGame>
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b094      	sub	sp, #80	@ 0x50
 80029a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029aa:	f107 0320 	add.w	r3, r7, #32
 80029ae:	2230      	movs	r2, #48	@ 0x30
 80029b0:	2100      	movs	r1, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f004 fe54 	bl	8007660 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 80029c8:	2300      	movs	r3, #0
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	4b28      	ldr	r3, [pc, #160]	@ (8002a70 <SystemClock_Config+0xcc>)
 80029ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d0:	4a27      	ldr	r2, [pc, #156]	@ (8002a70 <SystemClock_Config+0xcc>)
 80029d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80029d8:	4b25      	ldr	r3, [pc, #148]	@ (8002a70 <SystemClock_Config+0xcc>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029e4:	2300      	movs	r3, #0
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	4b22      	ldr	r3, [pc, #136]	@ (8002a74 <SystemClock_Config+0xd0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a21      	ldr	r2, [pc, #132]	@ (8002a74 <SystemClock_Config+0xd0>)
 80029ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a74 <SystemClock_Config+0xd0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a00:	2301      	movs	r3, #1
 8002a02:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a08:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002a14:	2308      	movs	r3, #8
 8002a16:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002a18:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002a1c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002a22:	2307      	movs	r3, #7
 8002a24:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a26:	f107 0320 	add.w	r3, r7, #32
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f003 f9d2 	bl	8005dd4 <HAL_RCC_OscConfig>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <SystemClock_Config+0x96>
	{
	Error_Handler();
 8002a36:	f000 fb55 	bl	80030e4 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a3a:	230f      	movs	r3, #15
 8002a3c:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a46:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002a4a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a50:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a52:	f107 030c 	add.w	r3, r7, #12
 8002a56:	2105      	movs	r1, #5
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f003 fc33 	bl	80062c4 <HAL_RCC_ClockConfig>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <SystemClock_Config+0xc4>
	{
	Error_Handler();
 8002a64:	f000 fb3e 	bl	80030e4 <Error_Handler>
	}
}
 8002a68:	bf00      	nop
 8002a6a:	3750      	adds	r7, #80	@ 0x50
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40007000 	.word	0x40007000

08002a78 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
	hi2c3.Instance = I2C3;
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002aec <MX_I2C3_Init+0x74>)
 8002a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002af0 <MX_I2C3_Init+0x78>)
 8002a80:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8002a82:	4b1a      	ldr	r3, [pc, #104]	@ (8002aec <MX_I2C3_Init+0x74>)
 8002a84:	4a1b      	ldr	r2, [pc, #108]	@ (8002af4 <MX_I2C3_Init+0x7c>)
 8002a86:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a88:	4b18      	ldr	r3, [pc, #96]	@ (8002aec <MX_I2C3_Init+0x74>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8002a8e:	4b17      	ldr	r3, [pc, #92]	@ (8002aec <MX_I2C3_Init+0x74>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a94:	4b15      	ldr	r3, [pc, #84]	@ (8002aec <MX_I2C3_Init+0x74>)
 8002a96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a9a:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a9c:	4b13      	ldr	r3, [pc, #76]	@ (8002aec <MX_I2C3_Init+0x74>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8002aa2:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <MX_I2C3_Init+0x74>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002aa8:	4b10      	ldr	r3, [pc, #64]	@ (8002aec <MX_I2C3_Init+0x74>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002aae:	4b0f      	ldr	r3, [pc, #60]	@ (8002aec <MX_I2C3_Init+0x74>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002ab4:	480d      	ldr	r0, [pc, #52]	@ (8002aec <MX_I2C3_Init+0x74>)
 8002ab6:	f001 fe47 	bl	8004748 <HAL_I2C_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_I2C3_Init+0x4c>
	{
	Error_Handler();
 8002ac0:	f000 fb10 	bl	80030e4 <Error_Handler>
	}

	/* Configure Analogue filter */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4809      	ldr	r0, [pc, #36]	@ (8002aec <MX_I2C3_Init+0x74>)
 8002ac8:	f002 fe62 	bl	8005790 <HAL_I2CEx_ConfigAnalogFilter>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_I2C3_Init+0x5e>
	{
	Error_Handler();
 8002ad2:	f000 fb07 	bl	80030e4 <Error_Handler>
	}

	/* Configure Digital filter */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4804      	ldr	r0, [pc, #16]	@ (8002aec <MX_I2C3_Init+0x74>)
 8002ada:	f002 fe95 	bl	8005808 <HAL_I2CEx_ConfigDigitalFilter>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_I2C3_Init+0x70>
	{
	Error_Handler();
 8002ae4:	f000 fafe 	bl	80030e4 <Error_Handler>
	}
}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20025a6c 	.word	0x20025a6c
 8002af0:	40005c00 	.word	0x40005c00
 8002af4:	000186a0 	.word	0x000186a0

08002af8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b09a      	sub	sp, #104	@ 0x68
 8002afc:	af00      	add	r7, sp, #0
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002afe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b02:	2234      	movs	r2, #52	@ 0x34
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f004 fdaa 	bl	8007660 <memset>
	LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002b0c:	463b      	mov	r3, r7
 8002b0e:	2234      	movs	r2, #52	@ 0x34
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f004 fda4 	bl	8007660 <memset>

	hltdc.Instance = LTDC;
 8002b18:	4b4e      	ldr	r3, [pc, #312]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002b1a:	4a4f      	ldr	r2, [pc, #316]	@ (8002c58 <MX_LTDC_Init+0x160>)
 8002b1c:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002b1e:	4b4d      	ldr	r3, [pc, #308]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002b24:	4b4b      	ldr	r3, [pc, #300]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002b30:	4b48      	ldr	r3, [pc, #288]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 7;
 8002b36:	4b47      	ldr	r3, [pc, #284]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002b38:	2207      	movs	r2, #7
 8002b3a:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 3;
 8002b3c:	4b45      	ldr	r3, [pc, #276]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002b3e:	2203      	movs	r2, #3
 8002b40:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 14;
 8002b42:	4b44      	ldr	r3, [pc, #272]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002b44:	220e      	movs	r2, #14
 8002b46:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 5;
 8002b48:	4b42      	ldr	r3, [pc, #264]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002b4a:	2205      	movs	r2, #5
 8002b4c:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 654;
 8002b4e:	4b41      	ldr	r3, [pc, #260]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002b50:	f240 228e 	movw	r2, #654	@ 0x28e
 8002b54:	625a      	str	r2, [r3, #36]	@ 0x24
	hltdc.Init.AccumulatedActiveH = 485;
 8002b56:	4b3f      	ldr	r3, [pc, #252]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002b58:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8002b5c:	629a      	str	r2, [r3, #40]	@ 0x28
	hltdc.Init.TotalWidth = 660;
 8002b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002b60:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8002b64:	62da      	str	r2, [r3, #44]	@ 0x2c
	hltdc.Init.TotalHeigh = 487;
 8002b66:	4b3b      	ldr	r3, [pc, #236]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002b68:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002b6c:	631a      	str	r2, [r3, #48]	@ 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8002b6e:	4b39      	ldr	r3, [pc, #228]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8002b76:	4b37      	ldr	r3, [pc, #220]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	hltdc.Init.Backcolor.Red = 0;
 8002b7e:	4b35      	ldr	r3, [pc, #212]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002b86:	4833      	ldr	r0, [pc, #204]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002b88:	f002 fe7e 	bl	8005888 <HAL_LTDC_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_LTDC_Init+0x9e>
	{
	Error_Handler();
 8002b92:	f000 faa7 	bl	80030e4 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.WindowX1 = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.WindowY0 = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	pLayerCfg.WindowY1 = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	643b      	str	r3, [r7, #64]	@ 0x40
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	647b      	str	r3, [r7, #68]	@ 0x44
	pLayerCfg.Alpha = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	64bb      	str	r3, [r7, #72]	@ 0x48
	pLayerCfg.Alpha0 = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002bb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bb6:	653b      	str	r3, [r7, #80]	@ 0x50
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002bb8:	2305      	movs	r3, #5
 8002bba:	657b      	str	r3, [r7, #84]	@ 0x54
	pLayerCfg.FBStartAdress = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	65bb      	str	r3, [r7, #88]	@ 0x58
	pLayerCfg.ImageWidth = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	pLayerCfg.ImageHeight = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	663b      	str	r3, [r7, #96]	@ 0x60
	pLayerCfg.Backcolor.Blue = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	pLayerCfg.Backcolor.Green = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	pLayerCfg.Backcolor.Red = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002bda:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002bde:	2200      	movs	r2, #0
 8002be0:	4619      	mov	r1, r3
 8002be2:	481c      	ldr	r0, [pc, #112]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002be4:	f002 ff20 	bl	8005a28 <HAL_LTDC_ConfigLayer>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_LTDC_Init+0xfa>
	{
	Error_Handler();
 8002bee:	f000 fa79 	bl	80030e4 <Error_Handler>
	}
	pLayerCfg1.WindowX0 = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	603b      	str	r3, [r7, #0]
	pLayerCfg1.WindowX1 = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
	pLayerCfg1.WindowY0 = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60bb      	str	r3, [r7, #8]
	pLayerCfg1.WindowY1 = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
	pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
	pLayerCfg1.Alpha = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
	pLayerCfg1.Alpha0 = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
	pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c12:	61fb      	str	r3, [r7, #28]
	pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002c14:	2305      	movs	r3, #5
 8002c16:	623b      	str	r3, [r7, #32]
	pLayerCfg1.FBStartAdress = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg1.ImageWidth = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg1.ImageHeight = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pLayerCfg1.Backcolor.Blue = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	pLayerCfg1.Backcolor.Green = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	pLayerCfg1.Backcolor.Red = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002c36:	463b      	mov	r3, r7
 8002c38:	2201      	movs	r2, #1
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4805      	ldr	r0, [pc, #20]	@ (8002c54 <MX_LTDC_Init+0x15c>)
 8002c3e:	f002 fef3 	bl	8005a28 <HAL_LTDC_ConfigLayer>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_LTDC_Init+0x154>
	{
	Error_Handler();
 8002c48:	f000 fa4c 	bl	80030e4 <Error_Handler>
	}
}
 8002c4c:	bf00      	nop
 8002c4e:	3768      	adds	r7, #104	@ 0x68
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20025ac0 	.word	0x20025ac0
 8002c58:	40016800 	.word	0x40016800

08002c5c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
	hrng.Instance = RNG;
 8002c60:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <MX_RNG_Init+0x20>)
 8002c62:	4a07      	ldr	r2, [pc, #28]	@ (8002c80 <MX_RNG_Init+0x24>)
 8002c64:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002c66:	4805      	ldr	r0, [pc, #20]	@ (8002c7c <MX_RNG_Init+0x20>)
 8002c68:	f003 fef8 	bl	8006a5c <HAL_RNG_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_RNG_Init+0x1a>
	{
	Error_Handler();
 8002c72:	f000 fa37 	bl	80030e4 <Error_Handler>
	}
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20025b68 	.word	0x20025b68
 8002c80:	50060800 	.word	0x50060800

08002c84 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
	hspi5.Instance = SPI5;
 8002c88:	4b17      	ldr	r3, [pc, #92]	@ (8002ce8 <MX_SPI5_Init+0x64>)
 8002c8a:	4a18      	ldr	r2, [pc, #96]	@ (8002cec <MX_SPI5_Init+0x68>)
 8002c8c:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8002c8e:	4b16      	ldr	r3, [pc, #88]	@ (8002ce8 <MX_SPI5_Init+0x64>)
 8002c90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c94:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002c96:	4b14      	ldr	r3, [pc, #80]	@ (8002ce8 <MX_SPI5_Init+0x64>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ce8 <MX_SPI5_Init+0x64>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ca2:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <MX_SPI5_Init+0x64>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce8 <MX_SPI5_Init+0x64>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8002cae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce8 <MX_SPI5_Init+0x64>)
 8002cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cb4:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce8 <MX_SPI5_Init+0x64>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <MX_SPI5_Init+0x64>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cc2:	4b09      	ldr	r3, [pc, #36]	@ (8002ce8 <MX_SPI5_Init+0x64>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc8:	4b07      	ldr	r3, [pc, #28]	@ (8002ce8 <MX_SPI5_Init+0x64>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 10;
 8002cce:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <MX_SPI5_Init+0x64>)
 8002cd0:	220a      	movs	r2, #10
 8002cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002cd4:	4804      	ldr	r0, [pc, #16]	@ (8002ce8 <MX_SPI5_Init+0x64>)
 8002cd6:	f003 feeb 	bl	8006ab0 <HAL_SPI_Init>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_SPI5_Init+0x60>
	{
	Error_Handler();
 8002ce0:	f000 fa00 	bl	80030e4 <Error_Handler>
	}
}
 8002ce4:	bf00      	nop
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20025b78 	.word	0x20025b78
 8002cec:	40015000 	.word	0x40015000

08002cf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cf6:	f107 0308 	add.w	r3, r7, #8
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d04:	463b      	mov	r3, r7
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]

	htim2.Instance = TIM2;
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d84 <MX_TIM2_Init+0x94>)
 8002d0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d12:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002d14:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <MX_TIM2_Init+0x94>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d84 <MX_TIM2_Init+0x94>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8002d20:	4b18      	ldr	r3, [pc, #96]	@ (8002d84 <MX_TIM2_Init+0x94>)
 8002d22:	f04f 32ff 	mov.w	r2, #4294967295
 8002d26:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d28:	4b16      	ldr	r3, [pc, #88]	@ (8002d84 <MX_TIM2_Init+0x94>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d2e:	4b15      	ldr	r3, [pc, #84]	@ (8002d84 <MX_TIM2_Init+0x94>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d34:	4813      	ldr	r0, [pc, #76]	@ (8002d84 <MX_TIM2_Init+0x94>)
 8002d36:	f004 f99b 	bl	8007070 <HAL_TIM_Base_Init>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM2_Init+0x54>
	{
	Error_Handler();
 8002d40:	f000 f9d0 	bl	80030e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d48:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d4a:	f107 0308 	add.w	r3, r7, #8
 8002d4e:	4619      	mov	r1, r3
 8002d50:	480c      	ldr	r0, [pc, #48]	@ (8002d84 <MX_TIM2_Init+0x94>)
 8002d52:	f004 f9dc 	bl	800710e <HAL_TIM_ConfigClockSource>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM2_Init+0x70>
	{
	Error_Handler();
 8002d5c:	f000 f9c2 	bl	80030e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d60:	2300      	movs	r3, #0
 8002d62:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d68:	463b      	mov	r3, r7
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4805      	ldr	r0, [pc, #20]	@ (8002d84 <MX_TIM2_Init+0x94>)
 8002d6e:	f004 fbdb 	bl	8007528 <HAL_TIMEx_MasterConfigSynchronization>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_TIM2_Init+0x8c>
	{
	Error_Handler();
 8002d78:	f000 f9b4 	bl	80030e4 <Error_Handler>
	}
}
 8002d7c:	bf00      	nop
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20025bd0 	.word	0x20025bd0

08002d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08e      	sub	sp, #56	@ 0x38
 8002d8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	623b      	str	r3, [r7, #32]
 8002da2:	4bb2      	ldr	r3, [pc, #712]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	4ab1      	ldr	r2, [pc, #708]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dae:	4baf      	ldr	r3, [pc, #700]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	623b      	str	r3, [r7, #32]
 8002db8:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	4bab      	ldr	r3, [pc, #684]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc2:	4aaa      	ldr	r2, [pc, #680]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002dc4:	f043 0320 	orr.w	r3, r3, #32
 8002dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dca:	4ba8      	ldr	r3, [pc, #672]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	4ba4      	ldr	r3, [pc, #656]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	4aa3      	ldr	r2, [pc, #652]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de6:	4ba1      	ldr	r3, [pc, #644]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	4b9d      	ldr	r3, [pc, #628]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	4a9c      	ldr	r2, [pc, #624]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e02:	4b9a      	ldr	r3, [pc, #616]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	4b96      	ldr	r3, [pc, #600]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	4a95      	ldr	r2, [pc, #596]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002e18:	f043 0302 	orr.w	r3, r3, #2
 8002e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1e:	4b93      	ldr	r3, [pc, #588]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	4b8f      	ldr	r3, [pc, #572]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	4a8e      	ldr	r2, [pc, #568]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e3a:	4b8c      	ldr	r3, [pc, #560]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	4b88      	ldr	r3, [pc, #544]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	4a87      	ldr	r2, [pc, #540]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002e50:	f043 0310 	orr.w	r3, r3, #16
 8002e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e56:	4b85      	ldr	r3, [pc, #532]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	4b81      	ldr	r3, [pc, #516]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	4a80      	ldr	r2, [pc, #512]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002e6c:	f043 0308 	orr.w	r3, r3, #8
 8002e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e72:	4b7e      	ldr	r3, [pc, #504]	@ (800306c <MX_GPIO_Init+0x2e4>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2116      	movs	r1, #22
 8002e82:	487b      	ldr	r0, [pc, #492]	@ (8003070 <MX_GPIO_Init+0x2e8>)
 8002e84:	f001 fc46 	bl	8004714 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2180      	movs	r1, #128	@ 0x80
 8002e8c:	4879      	ldr	r0, [pc, #484]	@ (8003074 <MX_GPIO_Init+0x2ec>)
 8002e8e:	f001 fc41 	bl	8004714 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002e92:	2200      	movs	r2, #0
 8002e94:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002e98:	4877      	ldr	r0, [pc, #476]	@ (8003078 <MX_GPIO_Init+0x2f0>)
 8002e9a:	f001 fc3b 	bl	8004714 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002ea4:	4875      	ldr	r0, [pc, #468]	@ (800307c <MX_GPIO_Init+0x2f4>)
 8002ea6:	f001 fc35 	bl	8004714 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
						   A4_Pin A5_Pin SDNRAS_Pin A6_Pin
						   A7_Pin A8_Pin A9_Pin */
	GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002eaa:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002eae:	627b      	str	r3, [r7, #36]	@ 0x24
						  |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
						  |A7_Pin|A8_Pin|A9_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ebc:	230c      	movs	r3, #12
 8002ebe:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	486e      	ldr	r0, [pc, #440]	@ (8003080 <MX_GPIO_Init+0x2f8>)
 8002ec8:	f001 f96c 	bl	80041a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SDNWE_Pin */
	GPIO_InitStruct.Pin = SDNWE_Pin;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002edc:	230c      	movs	r3, #12
 8002ede:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002ee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4862      	ldr	r0, [pc, #392]	@ (8003070 <MX_GPIO_Init+0x2e8>)
 8002ee8:	f001 f95c 	bl	80041a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002eec:	2316      	movs	r3, #22
 8002eee:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002efc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f00:	4619      	mov	r1, r3
 8002f02:	485b      	ldr	r0, [pc, #364]	@ (8003070 <MX_GPIO_Init+0x2e8>)
 8002f04:	f001 f94e 	bl	80041a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002f08:	f248 0307 	movw	r3, #32775	@ 0x8007
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002f0e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002f12:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4855      	ldr	r0, [pc, #340]	@ (8003074 <MX_GPIO_Init+0x2ec>)
 8002f20:	f001 f940 	bl	80041a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002f24:	2380      	movs	r3, #128	@ 0x80
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f30:	2300      	movs	r3, #0
 8002f32:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f38:	4619      	mov	r1, r3
 8002f3a:	484e      	ldr	r0, [pc, #312]	@ (8003074 <MX_GPIO_Init+0x2ec>)
 8002f3c:	f001 f932 	bl	80041a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002f40:	2320      	movs	r3, #32
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002f44:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002f48:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002f4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f52:	4619      	mov	r1, r3
 8002f54:	4846      	ldr	r0, [pc, #280]	@ (8003070 <MX_GPIO_Init+0x2e8>)
 8002f56:	f001 f925 	bl	80041a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4845      	ldr	r0, [pc, #276]	@ (8003084 <MX_GPIO_Init+0x2fc>)
 8002f6e:	f001 f919 	bl	80041a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
						   SDCLK_Pin SDNCAS_Pin */
	GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002f72:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002f76:	627b      	str	r3, [r7, #36]	@ 0x24
						  |SDCLK_Pin|SDNCAS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f80:	2303      	movs	r3, #3
 8002f82:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f84:	230c      	movs	r3, #12
 8002f86:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	483b      	ldr	r0, [pc, #236]	@ (800307c <MX_GPIO_Init+0x2f4>)
 8002f90:	f001 f908 	bl	80041a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
						   D8_Pin D9_Pin D10_Pin D11_Pin
						   D12_Pin NBL0_Pin NBL1_Pin */
	GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002f94:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002f98:	627b      	str	r3, [r7, #36]	@ 0x24
						  |D8_Pin|D9_Pin|D10_Pin|D11_Pin
						  |D12_Pin|NBL0_Pin|NBL1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002fa6:	230c      	movs	r3, #12
 8002fa8:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002faa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4835      	ldr	r0, [pc, #212]	@ (8003088 <MX_GPIO_Init+0x300>)
 8002fb2:	f001 f8f7 	bl	80041a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002fb6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002fc8:	230c      	movs	r3, #12
 8002fca:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	482c      	ldr	r0, [pc, #176]	@ (8003084 <MX_GPIO_Init+0x2fc>)
 8002fd4:	f001 f8e6 	bl	80041a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_HS_Pin */
	GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002fd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002fe6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fea:	4619      	mov	r1, r3
 8002fec:	4825      	ldr	r0, [pc, #148]	@ (8003084 <MX_GPIO_Init+0x2fc>)
 8002fee:	f001 f8d9 	bl	80041a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
						   D1_Pin D2_Pin D3_Pin */
	GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002ff2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002ff6:	627b      	str	r3, [r7, #36]	@ 0x24
						  |D1_Pin|D2_Pin|D3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003000:	2303      	movs	r3, #3
 8003002:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003004:	230c      	movs	r3, #12
 8003006:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003008:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800300c:	4619      	mov	r1, r3
 800300e:	481a      	ldr	r0, [pc, #104]	@ (8003078 <MX_GPIO_Init+0x2f0>)
 8003010:	f001 f8c8 	bl	80041a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 8003014:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003018:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800301a:	2300      	movs	r3, #0
 800301c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8003022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003026:	4619      	mov	r1, r3
 8003028:	4813      	ldr	r0, [pc, #76]	@ (8003078 <MX_GPIO_Init+0x2f0>)
 800302a:	f001 f8bb 	bl	80041a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800302e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003032:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003034:	2301      	movs	r3, #1
 8003036:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303c:	2300      	movs	r3, #0
 800303e:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003040:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003044:	4619      	mov	r1, r3
 8003046:	480c      	ldr	r0, [pc, #48]	@ (8003078 <MX_GPIO_Init+0x2f0>)
 8003048:	f001 f8ac 	bl	80041a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
	GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800304c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003050:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305a:	2303      	movs	r3, #3
 800305c:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800305e:	2307      	movs	r3, #7
 8003060:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003062:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003066:	4619      	mov	r1, r3
 8003068:	e010      	b.n	800308c <MX_GPIO_Init+0x304>
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800
 8003070:	40020800 	.word	0x40020800
 8003074:	40020000 	.word	0x40020000
 8003078:	40020c00 	.word	0x40020c00
 800307c:	40021800 	.word	0x40021800
 8003080:	40021400 	.word	0x40021400
 8003084:	40020400 	.word	0x40020400
 8003088:	40021000 	.word	0x40021000
 800308c:	4812      	ldr	r0, [pc, #72]	@ (80030d8 <MX_GPIO_Init+0x350>)
 800308e:	f001 f889 	bl	80041a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8003092:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003098:	2301      	movs	r3, #1
 800309a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309c:	2300      	movs	r3, #0
 800309e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a0:	2300      	movs	r3, #0
 80030a2:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030a8:	4619      	mov	r1, r3
 80030aa:	480c      	ldr	r0, [pc, #48]	@ (80030dc <MX_GPIO_Init+0x354>)
 80030ac:	f001 f87a 	bl	80041a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
	GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80030b0:	2360      	movs	r3, #96	@ 0x60
 80030b2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b4:	2302      	movs	r3, #2
 80030b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030bc:	2303      	movs	r3, #3
 80030be:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80030c0:	230c      	movs	r3, #12
 80030c2:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030c8:	4619      	mov	r1, r3
 80030ca:	4805      	ldr	r0, [pc, #20]	@ (80030e0 <MX_GPIO_Init+0x358>)
 80030cc:	f001 f86a 	bl	80041a4 <HAL_GPIO_Init>
}
 80030d0:	bf00      	nop
 80030d2:	3738      	adds	r7, #56	@ 0x38
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40020000 	.word	0x40020000
 80030dc:	40021800 	.word	0x40021800
 80030e0:	40020400 	.word	0x40020400

080030e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80030e8:	b672      	cpsid	i
}
 80030ea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <Error_Handler+0x8>

080030f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	4b10      	ldr	r3, [pc, #64]	@ (800313c <HAL_MspInit+0x4c>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	4a0f      	ldr	r2, [pc, #60]	@ (800313c <HAL_MspInit+0x4c>)
 8003100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003104:	6453      	str	r3, [r2, #68]	@ 0x44
 8003106:	4b0d      	ldr	r3, [pc, #52]	@ (800313c <HAL_MspInit+0x4c>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800310e:	607b      	str	r3, [r7, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	4b09      	ldr	r3, [pc, #36]	@ (800313c <HAL_MspInit+0x4c>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	4a08      	ldr	r2, [pc, #32]	@ (800313c <HAL_MspInit+0x4c>)
 800311c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003120:	6413      	str	r3, [r2, #64]	@ 0x40
 8003122:	4b06      	ldr	r3, [pc, #24]	@ (800313c <HAL_MspInit+0x4c>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800312e:	2007      	movs	r0, #7
 8003130:	f000 ffda 	bl	80040e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40023800 	.word	0x40023800

08003140 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	@ 0x28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	f107 0314 	add.w	r3, r7, #20
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a29      	ldr	r2, [pc, #164]	@ (8003204 <HAL_I2C_MspInit+0xc4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d14b      	bne.n	80031fa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	4b28      	ldr	r3, [pc, #160]	@ (8003208 <HAL_I2C_MspInit+0xc8>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	4a27      	ldr	r2, [pc, #156]	@ (8003208 <HAL_I2C_MspInit+0xc8>)
 800316c:	f043 0304 	orr.w	r3, r3, #4
 8003170:	6313      	str	r3, [r2, #48]	@ 0x30
 8003172:	4b25      	ldr	r3, [pc, #148]	@ (8003208 <HAL_I2C_MspInit+0xc8>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	4b21      	ldr	r3, [pc, #132]	@ (8003208 <HAL_I2C_MspInit+0xc8>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	4a20      	ldr	r2, [pc, #128]	@ (8003208 <HAL_I2C_MspInit+0xc8>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	6313      	str	r3, [r2, #48]	@ 0x30
 800318e:	4b1e      	ldr	r3, [pc, #120]	@ (8003208 <HAL_I2C_MspInit+0xc8>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800319a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800319e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031a0:	2312      	movs	r3, #18
 80031a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a8:	2300      	movs	r3, #0
 80031aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80031ac:	2304      	movs	r3, #4
 80031ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80031b0:	f107 0314 	add.w	r3, r7, #20
 80031b4:	4619      	mov	r1, r3
 80031b6:	4815      	ldr	r0, [pc, #84]	@ (800320c <HAL_I2C_MspInit+0xcc>)
 80031b8:	f000 fff4 	bl	80041a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80031bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031c2:	2312      	movs	r3, #18
 80031c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ca:	2300      	movs	r3, #0
 80031cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80031ce:	2304      	movs	r3, #4
 80031d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	4619      	mov	r1, r3
 80031d8:	480d      	ldr	r0, [pc, #52]	@ (8003210 <HAL_I2C_MspInit+0xd0>)
 80031da:	f000 ffe3 	bl	80041a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	4b09      	ldr	r3, [pc, #36]	@ (8003208 <HAL_I2C_MspInit+0xc8>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	4a08      	ldr	r2, [pc, #32]	@ (8003208 <HAL_I2C_MspInit+0xc8>)
 80031e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80031ee:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <HAL_I2C_MspInit+0xc8>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80031fa:	bf00      	nop
 80031fc:	3728      	adds	r7, #40	@ 0x28
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40005c00 	.word	0x40005c00
 8003208:	40023800 	.word	0x40023800
 800320c:	40020800 	.word	0x40020800
 8003210:	40020000 	.word	0x40020000

08003214 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b09a      	sub	sp, #104	@ 0x68
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800322c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003230:	2230      	movs	r2, #48	@ 0x30
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f004 fa13 	bl	8007660 <memset>
  if(hltdc->Instance==LTDC)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a81      	ldr	r2, [pc, #516]	@ (8003444 <HAL_LTDC_MspInit+0x230>)
 8003240:	4293      	cmp	r3, r2
 8003242:	f040 80fb 	bne.w	800343c <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003246:	2308      	movs	r3, #8
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 800324a:	23c8      	movs	r3, #200	@ 0xc8
 800324c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800324e:	2302      	movs	r3, #2
 8003250:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8003252:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003256:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003258:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800325c:	4618      	mov	r0, r3
 800325e:	f003 fa3d 	bl	80066dc <HAL_RCCEx_PeriphCLKConfig>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8003268:	f7ff ff3c 	bl	80030e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800326c:	2300      	movs	r3, #0
 800326e:	623b      	str	r3, [r7, #32]
 8003270:	4b75      	ldr	r3, [pc, #468]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 8003272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003274:	4a74      	ldr	r2, [pc, #464]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 8003276:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800327a:	6453      	str	r3, [r2, #68]	@ 0x44
 800327c:	4b72      	ldr	r3, [pc, #456]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 800327e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003280:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003284:	623b      	str	r3, [r7, #32]
 8003286:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003288:	2300      	movs	r3, #0
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	4b6e      	ldr	r3, [pc, #440]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 800328e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003290:	4a6d      	ldr	r2, [pc, #436]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 8003292:	f043 0320 	orr.w	r3, r3, #32
 8003296:	6313      	str	r3, [r2, #48]	@ 0x30
 8003298:	4b6b      	ldr	r3, [pc, #428]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 800329a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a4:	2300      	movs	r3, #0
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	4b67      	ldr	r3, [pc, #412]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 80032aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ac:	4a66      	ldr	r2, [pc, #408]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80032b4:	4b64      	ldr	r3, [pc, #400]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 80032b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	4b60      	ldr	r3, [pc, #384]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	4a5f      	ldr	r2, [pc, #380]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 80032ca:	f043 0302 	orr.w	r3, r3, #2
 80032ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80032d0:	4b5d      	ldr	r3, [pc, #372]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	4b59      	ldr	r3, [pc, #356]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	4a58      	ldr	r2, [pc, #352]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 80032e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ec:	4b56      	ldr	r3, [pc, #344]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	4b52      	ldr	r3, [pc, #328]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003300:	4a51      	ldr	r2, [pc, #324]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 8003302:	f043 0304 	orr.w	r3, r3, #4
 8003306:	6313      	str	r3, [r2, #48]	@ 0x30
 8003308:	4b4f      	ldr	r3, [pc, #316]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003314:	2300      	movs	r3, #0
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	4b4b      	ldr	r3, [pc, #300]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331c:	4a4a      	ldr	r2, [pc, #296]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 800331e:	f043 0308 	orr.w	r3, r3, #8
 8003322:	6313      	str	r3, [r2, #48]	@ 0x30
 8003324:	4b48      	ldr	r3, [pc, #288]	@ (8003448 <HAL_LTDC_MspInit+0x234>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003330:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003334:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003336:	2302      	movs	r3, #2
 8003338:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333a:	2300      	movs	r3, #0
 800333c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333e:	2300      	movs	r3, #0
 8003340:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003342:	230e      	movs	r3, #14
 8003344:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003346:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800334a:	4619      	mov	r1, r3
 800334c:	483f      	ldr	r0, [pc, #252]	@ (800344c <HAL_LTDC_MspInit+0x238>)
 800334e:	f000 ff29 	bl	80041a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003352:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003356:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003358:	2302      	movs	r3, #2
 800335a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335c:	2300      	movs	r3, #0
 800335e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003360:	2300      	movs	r3, #0
 8003362:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003364:	230e      	movs	r3, #14
 8003366:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003368:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800336c:	4619      	mov	r1, r3
 800336e:	4838      	ldr	r0, [pc, #224]	@ (8003450 <HAL_LTDC_MspInit+0x23c>)
 8003370:	f000 ff18 	bl	80041a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003374:	2303      	movs	r3, #3
 8003376:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003378:	2302      	movs	r3, #2
 800337a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	2300      	movs	r3, #0
 800337e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003380:	2300      	movs	r3, #0
 8003382:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003384:	2309      	movs	r3, #9
 8003386:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003388:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800338c:	4619      	mov	r1, r3
 800338e:	4831      	ldr	r0, [pc, #196]	@ (8003454 <HAL_LTDC_MspInit+0x240>)
 8003390:	f000 ff08 	bl	80041a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003394:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003398:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339a:	2302      	movs	r3, #2
 800339c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a2:	2300      	movs	r3, #0
 80033a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033a6:	230e      	movs	r3, #14
 80033a8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80033ae:	4619      	mov	r1, r3
 80033b0:	4828      	ldr	r0, [pc, #160]	@ (8003454 <HAL_LTDC_MspInit+0x240>)
 80033b2:	f000 fef7 	bl	80041a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80033b6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80033ba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033bc:	2302      	movs	r3, #2
 80033be:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c4:	2300      	movs	r3, #0
 80033c6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033c8:	230e      	movs	r3, #14
 80033ca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80033d0:	4619      	mov	r1, r3
 80033d2:	4821      	ldr	r0, [pc, #132]	@ (8003458 <HAL_LTDC_MspInit+0x244>)
 80033d4:	f000 fee6 	bl	80041a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80033d8:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80033dc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033de:	2302      	movs	r3, #2
 80033e0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e6:	2300      	movs	r3, #0
 80033e8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033ea:	230e      	movs	r3, #14
 80033ec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80033f2:	4619      	mov	r1, r3
 80033f4:	4819      	ldr	r0, [pc, #100]	@ (800345c <HAL_LTDC_MspInit+0x248>)
 80033f6:	f000 fed5 	bl	80041a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80033fa:	2348      	movs	r3, #72	@ 0x48
 80033fc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fe:	2302      	movs	r3, #2
 8003400:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003406:	2300      	movs	r3, #0
 8003408:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800340a:	230e      	movs	r3, #14
 800340c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800340e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003412:	4619      	mov	r1, r3
 8003414:	4812      	ldr	r0, [pc, #72]	@ (8003460 <HAL_LTDC_MspInit+0x24c>)
 8003416:	f000 fec5 	bl	80041a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800341a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800341e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
 8003422:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003428:	2300      	movs	r3, #0
 800342a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800342c:	2309      	movs	r3, #9
 800342e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003430:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003434:	4619      	mov	r1, r3
 8003436:	4808      	ldr	r0, [pc, #32]	@ (8003458 <HAL_LTDC_MspInit+0x244>)
 8003438:	f000 feb4 	bl	80041a4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800343c:	bf00      	nop
 800343e:	3768      	adds	r7, #104	@ 0x68
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40016800 	.word	0x40016800
 8003448:	40023800 	.word	0x40023800
 800344c:	40021400 	.word	0x40021400
 8003450:	40020000 	.word	0x40020000
 8003454:	40020400 	.word	0x40020400
 8003458:	40021800 	.word	0x40021800
 800345c:	40020800 	.word	0x40020800
 8003460:	40020c00 	.word	0x40020c00

08003464 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a0b      	ldr	r2, [pc, #44]	@ (80034a0 <HAL_RNG_MspInit+0x3c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d10d      	bne.n	8003492 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	4b0a      	ldr	r3, [pc, #40]	@ (80034a4 <HAL_RNG_MspInit+0x40>)
 800347c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800347e:	4a09      	ldr	r2, [pc, #36]	@ (80034a4 <HAL_RNG_MspInit+0x40>)
 8003480:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003484:	6353      	str	r3, [r2, #52]	@ 0x34
 8003486:	4b07      	ldr	r3, [pc, #28]	@ (80034a4 <HAL_RNG_MspInit+0x40>)
 8003488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800348a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8003492:	bf00      	nop
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	50060800 	.word	0x50060800
 80034a4:	40023800 	.word	0x40023800

080034a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	@ 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a19      	ldr	r2, [pc, #100]	@ (800352c <HAL_SPI_MspInit+0x84>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d12c      	bne.n	8003524 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	4b18      	ldr	r3, [pc, #96]	@ (8003530 <HAL_SPI_MspInit+0x88>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	4a17      	ldr	r2, [pc, #92]	@ (8003530 <HAL_SPI_MspInit+0x88>)
 80034d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034da:	4b15      	ldr	r3, [pc, #84]	@ (8003530 <HAL_SPI_MspInit+0x88>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b11      	ldr	r3, [pc, #68]	@ (8003530 <HAL_SPI_MspInit+0x88>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	4a10      	ldr	r2, [pc, #64]	@ (8003530 <HAL_SPI_MspInit+0x88>)
 80034f0:	f043 0320 	orr.w	r3, r3, #32
 80034f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003530 <HAL_SPI_MspInit+0x88>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003502:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003508:	2302      	movs	r3, #2
 800350a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003510:	2300      	movs	r3, #0
 8003512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003514:	2305      	movs	r3, #5
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	4619      	mov	r1, r3
 800351e:	4805      	ldr	r0, [pc, #20]	@ (8003534 <HAL_SPI_MspInit+0x8c>)
 8003520:	f000 fe40 	bl	80041a4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003524:	bf00      	nop
 8003526:	3728      	adds	r7, #40	@ 0x28
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40015000 	.word	0x40015000
 8003530:	40023800 	.word	0x40023800
 8003534:	40021400 	.word	0x40021400

08003538 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a08      	ldr	r2, [pc, #32]	@ (8003568 <HAL_SPI_MspDeInit+0x30>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d10a      	bne.n	8003560 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800354a:	4b08      	ldr	r3, [pc, #32]	@ (800356c <HAL_SPI_MspDeInit+0x34>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354e:	4a07      	ldr	r2, [pc, #28]	@ (800356c <HAL_SPI_MspDeInit+0x34>)
 8003550:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003554:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003556:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800355a:	4805      	ldr	r0, [pc, #20]	@ (8003570 <HAL_SPI_MspDeInit+0x38>)
 800355c:	f000 ffce 	bl	80044fc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40015000 	.word	0x40015000
 800356c:	40023800 	.word	0x40023800
 8003570:	40021400 	.word	0x40021400

08003574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003584:	d10d      	bne.n	80035a2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	4b09      	ldr	r3, [pc, #36]	@ (80035b0 <HAL_TIM_Base_MspInit+0x3c>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358e:	4a08      	ldr	r2, [pc, #32]	@ (80035b0 <HAL_TIM_Base_MspInit+0x3c>)
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	6413      	str	r3, [r2, #64]	@ 0x40
 8003596:	4b06      	ldr	r3, [pc, #24]	@ (80035b0 <HAL_TIM_Base_MspInit+0x3c>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800

080035b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035b8:	bf00      	nop
 80035ba:	e7fd      	b.n	80035b8 <NMI_Handler+0x4>

080035bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035c0:	bf00      	nop
 80035c2:	e7fd      	b.n	80035c0 <HardFault_Handler+0x4>

080035c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035c8:	bf00      	nop
 80035ca:	e7fd      	b.n	80035c8 <MemManage_Handler+0x4>

080035cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035d0:	bf00      	nop
 80035d2:	e7fd      	b.n	80035d0 <BusFault_Handler+0x4>

080035d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035d8:	bf00      	nop
 80035da:	e7fd      	b.n	80035d8 <UsageFault_Handler+0x4>

080035dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035ea:	b480      	push	{r7}
 80035ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035fc:	bf00      	nop
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800360a:	f000 fc17 	bl	8003e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}

08003612 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8003618:	f000 f9ce 	bl	80039b8 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 800361c:	f000 f98e 	bl	800393c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003620:	2202      	movs	r2, #2
 8003622:	2103      	movs	r1, #3
 8003624:	2082      	movs	r0, #130	@ 0x82
 8003626:	f000 fa1b 	bl	8003a60 <I2C3_Write>
    HAL_Delay(5);
 800362a:	2005      	movs	r0, #5
 800362c:	f000 fc26 	bl	8003e7c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003630:	2200      	movs	r2, #0
 8003632:	2103      	movs	r1, #3
 8003634:	2082      	movs	r0, #130	@ 0x82
 8003636:	f000 fa13 	bl	8003a60 <I2C3_Write>
    HAL_Delay(2);
 800363a:	2002      	movs	r0, #2
 800363c:	f000 fc1e 	bl	8003e7c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8003640:	1cba      	adds	r2, r7, #2
 8003642:	2302      	movs	r3, #2
 8003644:	2100      	movs	r1, #0
 8003646:	2082      	movs	r0, #130	@ 0x82
 8003648:	f000 fa5a 	bl	8003b00 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800364c:	887b      	ldrh	r3, [r7, #2]
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003652:	887b      	ldrh	r3, [r7, #2]
 8003654:	0a1b      	lsrs	r3, r3, #8
 8003656:	b29a      	uxth	r2, r3
 8003658:	88fb      	ldrh	r3, [r7, #6]
 800365a:	4313      	orrs	r3, r2
 800365c:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	f640 0211 	movw	r2, #2065	@ 0x811
 8003664:	4293      	cmp	r3, r2
 8003666:	d001      	beq.n	800366c <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8003668:	2303      	movs	r3, #3
 800366a:	e075      	b.n	8003758 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800366c:	2202      	movs	r2, #2
 800366e:	2103      	movs	r1, #3
 8003670:	2082      	movs	r0, #130	@ 0x82
 8003672:	f000 f9f5 	bl	8003a60 <I2C3_Write>
    HAL_Delay(5);
 8003676:	2005      	movs	r0, #5
 8003678:	f000 fc00 	bl	8003e7c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800367c:	2200      	movs	r2, #0
 800367e:	2103      	movs	r1, #3
 8003680:	2082      	movs	r0, #130	@ 0x82
 8003682:	f000 f9ed 	bl	8003a60 <I2C3_Write>
    HAL_Delay(2);
 8003686:	2002      	movs	r0, #2
 8003688:	f000 fbf8 	bl	8003e7c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800368c:	2004      	movs	r0, #4
 800368e:	f000 f867 	bl	8003760 <STMPE811_Read>
 8003692:	4603      	mov	r3, r0
 8003694:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8003696:	797b      	ldrb	r3, [r7, #5]
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800369e:	797b      	ldrb	r3, [r7, #5]
 80036a0:	461a      	mov	r2, r3
 80036a2:	2104      	movs	r1, #4
 80036a4:	2082      	movs	r0, #130	@ 0x82
 80036a6:	f000 f9db 	bl	8003a60 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80036aa:	2004      	movs	r0, #4
 80036ac:	f000 f858 	bl	8003760 <STMPE811_Read>
 80036b0:	4603      	mov	r3, r0
 80036b2:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80036b4:	797b      	ldrb	r3, [r7, #5]
 80036b6:	f023 0302 	bic.w	r3, r3, #2
 80036ba:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80036bc:	797b      	ldrb	r3, [r7, #5]
 80036be:	461a      	mov	r2, r3
 80036c0:	2104      	movs	r1, #4
 80036c2:	2082      	movs	r0, #130	@ 0x82
 80036c4:	f000 f9cc 	bl	8003a60 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80036c8:	2249      	movs	r2, #73	@ 0x49
 80036ca:	2120      	movs	r1, #32
 80036cc:	2082      	movs	r0, #130	@ 0x82
 80036ce:	f000 f9c7 	bl	8003a60 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80036d2:	2002      	movs	r0, #2
 80036d4:	f000 fbd2 	bl	8003e7c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80036d8:	2201      	movs	r2, #1
 80036da:	2121      	movs	r1, #33	@ 0x21
 80036dc:	2082      	movs	r0, #130	@ 0x82
 80036de:	f000 f9bf 	bl	8003a60 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80036e2:	2017      	movs	r0, #23
 80036e4:	f000 f83c 	bl	8003760 <STMPE811_Read>
 80036e8:	4603      	mov	r3, r0
 80036ea:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80036ec:	797b      	ldrb	r3, [r7, #5]
 80036ee:	f043 031e 	orr.w	r3, r3, #30
 80036f2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80036f4:	797b      	ldrb	r3, [r7, #5]
 80036f6:	461a      	mov	r2, r3
 80036f8:	2117      	movs	r1, #23
 80036fa:	2082      	movs	r0, #130	@ 0x82
 80036fc:	f000 f9b0 	bl	8003a60 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8003700:	229a      	movs	r2, #154	@ 0x9a
 8003702:	2141      	movs	r1, #65	@ 0x41
 8003704:	2082      	movs	r0, #130	@ 0x82
 8003706:	f000 f9ab 	bl	8003a60 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 800370a:	2201      	movs	r2, #1
 800370c:	214a      	movs	r1, #74	@ 0x4a
 800370e:	2082      	movs	r0, #130	@ 0x82
 8003710:	f000 f9a6 	bl	8003a60 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003714:	2201      	movs	r2, #1
 8003716:	214b      	movs	r1, #75	@ 0x4b
 8003718:	2082      	movs	r0, #130	@ 0x82
 800371a:	f000 f9a1 	bl	8003a60 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800371e:	2200      	movs	r2, #0
 8003720:	214b      	movs	r1, #75	@ 0x4b
 8003722:	2082      	movs	r0, #130	@ 0x82
 8003724:	f000 f99c 	bl	8003a60 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8003728:	2201      	movs	r2, #1
 800372a:	2156      	movs	r1, #86	@ 0x56
 800372c:	2082      	movs	r0, #130	@ 0x82
 800372e:	f000 f997 	bl	8003a60 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8003732:	2201      	movs	r2, #1
 8003734:	2158      	movs	r1, #88	@ 0x58
 8003736:	2082      	movs	r0, #130	@ 0x82
 8003738:	f000 f992 	bl	8003a60 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 800373c:	2203      	movs	r2, #3
 800373e:	2140      	movs	r1, #64	@ 0x40
 8003740:	2082      	movs	r0, #130	@ 0x82
 8003742:	f000 f98d 	bl	8003a60 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8003746:	22ff      	movs	r2, #255	@ 0xff
 8003748:	210b      	movs	r1, #11
 800374a:	2082      	movs	r0, #130	@ 0x82
 800374c:	f000 f988 	bl	8003a60 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8003750:	20c8      	movs	r0, #200	@ 0xc8
 8003752:	f000 fb93 	bl	8003e7c <HAL_Delay>

    return STMPE811_State_Ok;
 8003756:	2302      	movs	r3, #2

}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800376a:	f107 020f 	add.w	r2, r7, #15
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	4619      	mov	r1, r3
 8003772:	2082      	movs	r0, #130	@ 0x82
 8003774:	f000 f99e 	bl	8003ab4 <I2C3_Read>

    return readData;
 8003778:	7bfb      	ldrb	r3, [r7, #15]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	791a      	ldrb	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8003792:	2040      	movs	r0, #64	@ 0x40
 8003794:	f7ff ffe4 	bl	8003760 <STMPE811_Read>
 8003798:	4603      	mov	r3, r0
 800379a:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 800379c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	db0e      	blt.n	80037c2 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80037aa:	2201      	movs	r2, #1
 80037ac:	214b      	movs	r1, #75	@ 0x4b
 80037ae:	2082      	movs	r0, #130	@ 0x82
 80037b0:	f000 f956 	bl	8003a60 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80037b4:	2200      	movs	r2, #0
 80037b6:	214b      	movs	r1, #75	@ 0x4b
 80037b8:	2082      	movs	r0, #130	@ 0x82
 80037ba:	f000 f951 	bl	8003a60 <I2C3_Write>

        return STMPE811_State_Released;
 80037be:	2301      	movs	r3, #1
 80037c0:	e0a7      	b.n	8003912 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	799b      	ldrb	r3, [r3, #6]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d117      	bne.n	80037fa <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 f9b8 	bl	8003b44 <TM_STMPE811_ReadX>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	885b      	ldrh	r3, [r3, #2]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fa0b 	bl	8003c00 <TM_STMPE811_ReadY>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80037f0:	3301      	adds	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	805a      	strh	r2, [r3, #2]
 80037f8:	e048      	b.n	800388c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	799b      	ldrb	r3, [r3, #6]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d112      	bne.n	8003828 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f99c 	bl	8003b44 <TM_STMPE811_ReadX>
 800380c:	4603      	mov	r3, r0
 800380e:	461a      	mov	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	885b      	ldrh	r3, [r3, #2]
 8003818:	4618      	mov	r0, r3
 800381a:	f000 f9f1 	bl	8003c00 <TM_STMPE811_ReadY>
 800381e:	4603      	mov	r3, r0
 8003820:	461a      	mov	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	805a      	strh	r2, [r3, #2]
 8003826:	e031      	b.n	800388c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	799b      	ldrb	r3, [r3, #6]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d115      	bne.n	800385c <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	885b      	ldrh	r3, [r3, #2]
 8003834:	4618      	mov	r0, r3
 8003836:	f000 f985 	bl	8003b44 <TM_STMPE811_ReadX>
 800383a:	4603      	mov	r3, r0
 800383c:	461a      	mov	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f9da 	bl	8003c00 <TM_STMPE811_ReadY>
 800384c:	4603      	mov	r3, r0
 800384e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003852:	3301      	adds	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	801a      	strh	r2, [r3, #0]
 800385a:	e017      	b.n	800388c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	799b      	ldrb	r3, [r3, #6]
 8003860:	2b03      	cmp	r3, #3
 8003862:	d113      	bne.n	800388c <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f000 f96b 	bl	8003b44 <TM_STMPE811_ReadX>
 800386e:	4603      	mov	r3, r0
 8003870:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003874:	b29a      	uxth	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f9be 	bl	8003c00 <TM_STMPE811_ReadY>
 8003884:	4603      	mov	r3, r0
 8003886:	461a      	mov	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800388c:	2201      	movs	r2, #1
 800388e:	214b      	movs	r1, #75	@ 0x4b
 8003890:	2082      	movs	r0, #130	@ 0x82
 8003892:	f000 f8e5 	bl	8003a60 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003896:	2200      	movs	r2, #0
 8003898:	214b      	movs	r1, #75	@ 0x4b
 800389a:	2082      	movs	r0, #130	@ 0x82
 800389c:	f000 f8e0 	bl	8003a60 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	799b      	ldrb	r3, [r3, #6]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <STMPE811_ReadTouch+0x12e>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	799b      	ldrb	r3, [r3, #6]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d115      	bne.n	80038dc <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d027      	beq.n	8003908 <STMPE811_ReadTouch+0x186>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	2bee      	cmp	r3, #238	@ 0xee
 80038be:	d823      	bhi.n	8003908 <STMPE811_ReadTouch+0x186>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	885b      	ldrh	r3, [r3, #2]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01f      	beq.n	8003908 <STMPE811_ReadTouch+0x186>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	885b      	ldrh	r3, [r3, #2]
 80038cc:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80038d0:	d81a      	bhi.n	8003908 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80038d8:	2300      	movs	r3, #0
 80038da:	e01a      	b.n	8003912 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d012      	beq.n	800390a <STMPE811_ReadTouch+0x188>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80038ec:	d80d      	bhi.n	800390a <STMPE811_ReadTouch+0x188>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	885b      	ldrh	r3, [r3, #2]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <STMPE811_ReadTouch+0x188>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	885b      	ldrh	r3, [r3, #2]
 80038fa:	2bee      	cmp	r3, #238	@ 0xee
 80038fc:	d805      	bhi.n	800390a <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8003904:	2300      	movs	r3, #0
 8003906:	e004      	b.n	8003912 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8003908:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8003910:	2301      	movs	r3, #1
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8003920:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8003928:	bf00      	nop
 800392a:	e7fd      	b.n	8003928 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20025c6c 	.word	0x20025c6c

0800393c <I2C3_Init>:

static void I2C3_Init()
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	603b      	str	r3, [r7, #0]
 8003946:	4b18      	ldr	r3, [pc, #96]	@ (80039a8 <I2C3_Init+0x6c>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	4a17      	ldr	r2, [pc, #92]	@ (80039a8 <I2C3_Init+0x6c>)
 800394c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003950:	6413      	str	r3, [r2, #64]	@ 0x40
 8003952:	4b15      	ldr	r3, [pc, #84]	@ (80039a8 <I2C3_Init+0x6c>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800395e:	4b13      	ldr	r3, [pc, #76]	@ (80039ac <I2C3_Init+0x70>)
 8003960:	4a13      	ldr	r2, [pc, #76]	@ (80039b0 <I2C3_Init+0x74>)
 8003962:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8003964:	4b11      	ldr	r3, [pc, #68]	@ (80039ac <I2C3_Init+0x70>)
 8003966:	4a13      	ldr	r2, [pc, #76]	@ (80039b4 <I2C3_Init+0x78>)
 8003968:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800396a:	4b10      	ldr	r3, [pc, #64]	@ (80039ac <I2C3_Init+0x70>)
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003970:	4b0e      	ldr	r3, [pc, #56]	@ (80039ac <I2C3_Init+0x70>)
 8003972:	2200      	movs	r2, #0
 8003974:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003976:	4b0d      	ldr	r3, [pc, #52]	@ (80039ac <I2C3_Init+0x70>)
 8003978:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800397c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800397e:	4b0b      	ldr	r3, [pc, #44]	@ (80039ac <I2C3_Init+0x70>)
 8003980:	2200      	movs	r2, #0
 8003982:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003984:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <I2C3_Init+0x70>)
 8003986:	2200      	movs	r2, #0
 8003988:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800398a:	4808      	ldr	r0, [pc, #32]	@ (80039ac <I2C3_Init+0x70>)
 800398c:	f000 fedc 	bl	8004748 <HAL_I2C_Init>
 8003990:	4603      	mov	r3, r0
 8003992:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800399a:	bf00      	nop
 800399c:	e7fd      	b.n	800399a <I2C3_Init+0x5e>
    }
    return;
 800399e:	bf00      	nop
}
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800
 80039ac:	20025c18 	.word	0x20025c18
 80039b0:	40005c00 	.word	0x40005c00
 80039b4:	000186a0 	.word	0x000186a0

080039b8 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039be:	f107 030c 	add.w	r3, r7, #12
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	605a      	str	r2, [r3, #4]
 80039c8:	609a      	str	r2, [r3, #8]
 80039ca:	60da      	str	r2, [r3, #12]
 80039cc:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	4b20      	ldr	r3, [pc, #128]	@ (8003a54 <I2C3_MspInit+0x9c>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a54 <I2C3_MspInit+0x9c>)
 80039d8:	f043 0304 	orr.w	r3, r3, #4
 80039dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039de:	4b1d      	ldr	r3, [pc, #116]	@ (8003a54 <I2C3_MspInit+0x9c>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	607b      	str	r3, [r7, #4]
 80039ee:	4b19      	ldr	r3, [pc, #100]	@ (8003a54 <I2C3_MspInit+0x9c>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f2:	4a18      	ldr	r2, [pc, #96]	@ (8003a54 <I2C3_MspInit+0x9c>)
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039fa:	4b16      	ldr	r3, [pc, #88]	@ (8003a54 <I2C3_MspInit+0x9c>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	607b      	str	r3, [r7, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003a06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a0c:	2312      	movs	r3, #18
 8003a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003a18:	2304      	movs	r3, #4
 8003a1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003a1c:	f107 030c 	add.w	r3, r7, #12
 8003a20:	4619      	mov	r1, r3
 8003a22:	480d      	ldr	r0, [pc, #52]	@ (8003a58 <I2C3_MspInit+0xa0>)
 8003a24:	f000 fbbe 	bl	80041a4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003a28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a2e:	2312      	movs	r3, #18
 8003a30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003a3e:	f107 030c 	add.w	r3, r7, #12
 8003a42:	4619      	mov	r1, r3
 8003a44:	4805      	ldr	r0, [pc, #20]	@ (8003a5c <I2C3_MspInit+0xa4>)
 8003a46:	f000 fbad 	bl	80041a4 <HAL_GPIO_Init>
    
}
 8003a4a:	bf00      	nop
 8003a4c:	3720      	adds	r7, #32
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40023800 	.word	0x40023800
 8003a58:	40020800 	.word	0x40020800
 8003a5c:	40020000 	.word	0x40020000

08003a60 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af04      	add	r7, sp, #16
 8003a66:	4603      	mov	r3, r0
 8003a68:	80fb      	strh	r3, [r7, #6]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	717b      	strb	r3, [r7, #5]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8003a72:	793b      	ldrb	r3, [r7, #4]
 8003a74:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003a76:	797b      	ldrb	r3, [r7, #5]
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	88f9      	ldrh	r1, [r7, #6]
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa8 <I2C3_Write+0x48>)
 8003a7e:	9302      	str	r3, [sp, #8]
 8003a80:	2301      	movs	r3, #1
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	f107 030f 	add.w	r3, r7, #15
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	4807      	ldr	r0, [pc, #28]	@ (8003aac <I2C3_Write+0x4c>)
 8003a8e:	f000 ff9f 	bl	80049d0 <HAL_I2C_Mem_Write>
 8003a92:	4603      	mov	r3, r0
 8003a94:	461a      	mov	r2, r3
 8003a96:	4b06      	ldr	r3, [pc, #24]	@ (8003ab0 <I2C3_Write+0x50>)
 8003a98:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003a9a:	f7ff ff3f 	bl	800391c <verifyHAL_I2C_IS_OKAY>
}
 8003a9e:	bf00      	nop
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	0003d090 	.word	0x0003d090
 8003aac:	20025c18 	.word	0x20025c18
 8003ab0:	20025c6c 	.word	0x20025c6c

08003ab4 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af04      	add	r7, sp, #16
 8003aba:	4603      	mov	r3, r0
 8003abc:	603a      	str	r2, [r7, #0]
 8003abe:	71fb      	strb	r3, [r7, #7]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	b299      	uxth	r1, r3
 8003ac8:	79bb      	ldrb	r3, [r7, #6]
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	4b09      	ldr	r3, [pc, #36]	@ (8003af4 <I2C3_Read+0x40>)
 8003ace:	9302      	str	r3, [sp, #8]
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	9301      	str	r3, [sp, #4]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	2301      	movs	r3, #1
 8003ada:	4807      	ldr	r0, [pc, #28]	@ (8003af8 <I2C3_Read+0x44>)
 8003adc:	f001 f872 	bl	8004bc4 <HAL_I2C_Mem_Read>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	4b05      	ldr	r3, [pc, #20]	@ (8003afc <I2C3_Read+0x48>)
 8003ae6:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003ae8:	f7ff ff18 	bl	800391c <verifyHAL_I2C_IS_OKAY>
}
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	0003d090 	.word	0x0003d090
 8003af8:	20025c18 	.word	0x20025c18
 8003afc:	20025c6c 	.word	0x20025c6c

08003b00 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af04      	add	r7, sp, #16
 8003b06:	603a      	str	r2, [r7, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	71fb      	strb	r3, [r7, #7]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	71bb      	strb	r3, [r7, #6]
 8003b12:	4613      	mov	r3, r2
 8003b14:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	b299      	uxth	r1, r3
 8003b1a:	79bb      	ldrb	r3, [r7, #6]
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	4b07      	ldr	r3, [pc, #28]	@ (8003b3c <I2C3_MulitByteRead+0x3c>)
 8003b20:	9302      	str	r3, [sp, #8]
 8003b22:	88bb      	ldrh	r3, [r7, #4]
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	4804      	ldr	r0, [pc, #16]	@ (8003b40 <I2C3_MulitByteRead+0x40>)
 8003b2e:	f001 f849 	bl	8004bc4 <HAL_I2C_Mem_Read>
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	0003d090 	.word	0x0003d090
 8003b40:	20025c18 	.word	0x20025c18

08003b44 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8003b4e:	204d      	movs	r0, #77	@ 0x4d
 8003b50:	f7ff fe06 	bl	8003760 <STMPE811_Read>
 8003b54:	4603      	mov	r3, r0
 8003b56:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003b58:	204e      	movs	r0, #78	@ 0x4e
 8003b5a:	f7ff fe01 	bl	8003760 <STMPE811_Read>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003b62:	7a7b      	ldrb	r3, [r7, #9]
 8003b64:	021b      	lsls	r3, r3, #8
 8003b66:	b21a      	sxth	r2, r3
 8003b68:	7a3b      	ldrb	r3, [r7, #8]
 8003b6a:	b21b      	sxth	r3, r3
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003b70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b74:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	dc06      	bgt.n	8003b8a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8003b7c:	89fb      	ldrh	r3, [r7, #14]
 8003b7e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8003b82:	330c      	adds	r3, #12
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	81fb      	strh	r3, [r7, #14]
 8003b88:	e005      	b.n	8003b96 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8003b8a:	89fb      	ldrh	r3, [r7, #14]
 8003b8c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003b90:	3308      	adds	r3, #8
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8003b96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b9a:	4a18      	ldr	r2, [pc, #96]	@ (8003bfc <TM_STMPE811_ReadX+0xb8>)
 8003b9c:	fb82 1203 	smull	r1, r2, r2, r3
 8003ba0:	441a      	add	r2, r3
 8003ba2:	10d2      	asrs	r2, r2, #3
 8003ba4:	17db      	asrs	r3, r3, #31
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8003baa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003bae:	2bef      	cmp	r3, #239	@ 0xef
 8003bb0:	dd02      	ble.n	8003bb8 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8003bb2:	23ef      	movs	r3, #239	@ 0xef
 8003bb4:	81fb      	strh	r3, [r7, #14]
 8003bb6:	e005      	b.n	8003bc4 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8003bb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	da01      	bge.n	8003bc4 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003bc4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003bc8:	88fb      	ldrh	r3, [r7, #6]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	dd05      	ble.n	8003bda <TM_STMPE811_ReadX+0x96>
 8003bce:	89fa      	ldrh	r2, [r7, #14]
 8003bd0:	88fb      	ldrh	r3, [r7, #6]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	b21b      	sxth	r3, r3
 8003bd8:	e004      	b.n	8003be4 <TM_STMPE811_ReadX+0xa0>
 8003bda:	89fb      	ldrh	r3, [r7, #14]
 8003bdc:	88fa      	ldrh	r2, [r7, #6]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	b21b      	sxth	r3, r3
 8003be4:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003be6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	dd01      	ble.n	8003bf2 <TM_STMPE811_ReadX+0xae>
        return val;
 8003bee:	89fb      	ldrh	r3, [r7, #14]
 8003bf0:	e000      	b.n	8003bf4 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	88888889 	.word	0x88888889

08003c00 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003c0a:	204f      	movs	r0, #79	@ 0x4f
 8003c0c:	f7ff fda8 	bl	8003760 <STMPE811_Read>
 8003c10:	4603      	mov	r3, r0
 8003c12:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003c14:	2050      	movs	r0, #80	@ 0x50
 8003c16:	f7ff fda3 	bl	8003760 <STMPE811_Read>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003c1e:	7a7b      	ldrb	r3, [r7, #9]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	b21a      	sxth	r2, r3
 8003c24:	7a3b      	ldrb	r3, [r7, #8]
 8003c26:	b21b      	sxth	r3, r3
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003c2c:	89fb      	ldrh	r3, [r7, #14]
 8003c2e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003c36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c3a:	4a19      	ldr	r2, [pc, #100]	@ (8003ca0 <TM_STMPE811_ReadY+0xa0>)
 8003c3c:	fb82 1203 	smull	r1, r2, r2, r3
 8003c40:	1052      	asrs	r2, r2, #1
 8003c42:	17db      	asrs	r3, r3, #31
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003c48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	dc02      	bgt.n	8003c56 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	81fb      	strh	r3, [r7, #14]
 8003c54:	e007      	b.n	8003c66 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8003c56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c5a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003c5e:	db02      	blt.n	8003c66 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003c60:	f240 133f 	movw	r3, #319	@ 0x13f
 8003c64:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003c66:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003c6a:	88fb      	ldrh	r3, [r7, #6]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	dd05      	ble.n	8003c7c <TM_STMPE811_ReadY+0x7c>
 8003c70:	89fa      	ldrh	r2, [r7, #14]
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	b21b      	sxth	r3, r3
 8003c7a:	e004      	b.n	8003c86 <TM_STMPE811_ReadY+0x86>
 8003c7c:	89fb      	ldrh	r3, [r7, #14]
 8003c7e:	88fa      	ldrh	r2, [r7, #6]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	b21b      	sxth	r3, r3
 8003c86:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003c88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	dd01      	ble.n	8003c94 <TM_STMPE811_ReadY+0x94>
        return val;
 8003c90:	89fb      	ldrh	r3, [r7, #14]
 8003c92:	e000      	b.n	8003c96 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8003c94:	88fb      	ldrh	r3, [r7, #6]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	2e8ba2e9 	.word	0x2e8ba2e9

08003ca4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cbc:	4a14      	ldr	r2, [pc, #80]	@ (8003d10 <_sbrk+0x5c>)
 8003cbe:	4b15      	ldr	r3, [pc, #84]	@ (8003d14 <_sbrk+0x60>)
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cc8:	4b13      	ldr	r3, [pc, #76]	@ (8003d18 <_sbrk+0x64>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cd0:	4b11      	ldr	r3, [pc, #68]	@ (8003d18 <_sbrk+0x64>)
 8003cd2:	4a12      	ldr	r2, [pc, #72]	@ (8003d1c <_sbrk+0x68>)
 8003cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cd6:	4b10      	ldr	r3, [pc, #64]	@ (8003d18 <_sbrk+0x64>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d207      	bcs.n	8003cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ce4:	f003 fcc4 	bl	8007670 <__errno>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	220c      	movs	r2, #12
 8003cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cee:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf2:	e009      	b.n	8003d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cf4:	4b08      	ldr	r3, [pc, #32]	@ (8003d18 <_sbrk+0x64>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cfa:	4b07      	ldr	r3, [pc, #28]	@ (8003d18 <_sbrk+0x64>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4413      	add	r3, r2
 8003d02:	4a05      	ldr	r2, [pc, #20]	@ (8003d18 <_sbrk+0x64>)
 8003d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d06:	68fb      	ldr	r3, [r7, #12]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20030000 	.word	0x20030000
 8003d14:	00000400 	.word	0x00000400
 8003d18:	20025c70 	.word	0x20025c70
 8003d1c:	20025dc0 	.word	0x20025dc0

08003d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d24:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <SystemInit+0x20>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2a:	4a05      	ldr	r2, [pc, #20]	@ (8003d40 <SystemInit+0x20>)
 8003d2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d34:	bf00      	nop
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003d44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d48:	f7ff ffea 	bl	8003d20 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d4c:	480c      	ldr	r0, [pc, #48]	@ (8003d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d4e:	490d      	ldr	r1, [pc, #52]	@ (8003d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d50:	4a0d      	ldr	r2, [pc, #52]	@ (8003d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d54:	e002      	b.n	8003d5c <LoopCopyDataInit>

08003d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d5a:	3304      	adds	r3, #4

08003d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d60:	d3f9      	bcc.n	8003d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d62:	4a0a      	ldr	r2, [pc, #40]	@ (8003d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d64:	4c0a      	ldr	r4, [pc, #40]	@ (8003d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d68:	e001      	b.n	8003d6e <LoopFillZerobss>

08003d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d6c:	3204      	adds	r2, #4

08003d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d70:	d3fb      	bcc.n	8003d6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003d72:	f003 fc83 	bl	800767c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d76:	f7fe fdf8 	bl	800296a <main>
  bx  lr    
 8003d7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003d7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d84:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003d88:	08009ab4 	.word	0x08009ab4
  ldr r2, =_sbss
 8003d8c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003d90:	20025dc0 	.word	0x20025dc0

08003d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d94:	e7fe      	b.n	8003d94 <ADC_IRQHandler>
	...

08003d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd8 <HAL_Init+0x40>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd8 <HAL_Init+0x40>)
 8003da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003da8:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd8 <HAL_Init+0x40>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd8 <HAL_Init+0x40>)
 8003dae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003db4:	4b08      	ldr	r3, [pc, #32]	@ (8003dd8 <HAL_Init+0x40>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a07      	ldr	r2, [pc, #28]	@ (8003dd8 <HAL_Init+0x40>)
 8003dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dc0:	2003      	movs	r0, #3
 8003dc2:	f000 f991 	bl	80040e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	f000 f808 	bl	8003ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dcc:	f7ff f990 	bl	80030f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40023c00 	.word	0x40023c00

08003ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003de4:	4b12      	ldr	r3, [pc, #72]	@ (8003e30 <HAL_InitTick+0x54>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4b12      	ldr	r3, [pc, #72]	@ (8003e34 <HAL_InitTick+0x58>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	4619      	mov	r1, r3
 8003dee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 f9b7 	bl	800416e <HAL_SYSTICK_Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e00e      	b.n	8003e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b0f      	cmp	r3, #15
 8003e0e:	d80a      	bhi.n	8003e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e10:	2200      	movs	r2, #0
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	f04f 30ff 	mov.w	r0, #4294967295
 8003e18:	f000 f971 	bl	80040fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e1c:	4a06      	ldr	r2, [pc, #24]	@ (8003e38 <HAL_InitTick+0x5c>)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e000      	b.n	8003e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	20000018 	.word	0x20000018
 8003e34:	20000020 	.word	0x20000020
 8003e38:	2000001c 	.word	0x2000001c

08003e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e40:	4b06      	ldr	r3, [pc, #24]	@ (8003e5c <HAL_IncTick+0x20>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	4b06      	ldr	r3, [pc, #24]	@ (8003e60 <HAL_IncTick+0x24>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	4a04      	ldr	r2, [pc, #16]	@ (8003e60 <HAL_IncTick+0x24>)
 8003e4e:	6013      	str	r3, [r2, #0]
}
 8003e50:	bf00      	nop
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	20000020 	.word	0x20000020
 8003e60:	20025c74 	.word	0x20025c74

08003e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return uwTick;
 8003e68:	4b03      	ldr	r3, [pc, #12]	@ (8003e78 <HAL_GetTick+0x14>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20025c74 	.word	0x20025c74

08003e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e84:	f7ff ffee 	bl	8003e64 <HAL_GetTick>
 8003e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e94:	d005      	beq.n	8003ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e96:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec0 <HAL_Delay+0x44>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ea2:	bf00      	nop
 8003ea4:	f7ff ffde 	bl	8003e64 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d8f7      	bhi.n	8003ea4 <HAL_Delay+0x28>
  {
  }
}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000020 	.word	0x20000020

08003ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f08 <__NVIC_SetPriorityGrouping+0x44>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ef6:	4a04      	ldr	r2, [pc, #16]	@ (8003f08 <__NVIC_SetPriorityGrouping+0x44>)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	60d3      	str	r3, [r2, #12]
}
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	e000ed00 	.word	0xe000ed00

08003f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f10:	4b04      	ldr	r3, [pc, #16]	@ (8003f24 <__NVIC_GetPriorityGrouping+0x18>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	0a1b      	lsrs	r3, r3, #8
 8003f16:	f003 0307 	and.w	r3, r3, #7
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	e000ed00 	.word	0xe000ed00

08003f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	db0b      	blt.n	8003f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	f003 021f 	and.w	r2, r3, #31
 8003f40:	4907      	ldr	r1, [pc, #28]	@ (8003f60 <__NVIC_EnableIRQ+0x38>)
 8003f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2001      	movs	r0, #1
 8003f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	e000e100 	.word	0xe000e100

08003f64 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	db12      	blt.n	8003f9c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	f003 021f 	and.w	r2, r3, #31
 8003f7c:	490a      	ldr	r1, [pc, #40]	@ (8003fa8 <__NVIC_DisableIRQ+0x44>)
 8003f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	2001      	movs	r0, #1
 8003f86:	fa00 f202 	lsl.w	r2, r0, r2
 8003f8a:	3320      	adds	r3, #32
 8003f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f90:	f3bf 8f4f 	dsb	sy
}
 8003f94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f96:	f3bf 8f6f 	isb	sy
}
 8003f9a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	e000e100 	.word	0xe000e100

08003fac <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	db0c      	blt.n	8003fd8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	f003 021f 	and.w	r2, r3, #31
 8003fc4:	4907      	ldr	r1, [pc, #28]	@ (8003fe4 <__NVIC_ClearPendingIRQ+0x38>)
 8003fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	2001      	movs	r0, #1
 8003fce:	fa00 f202 	lsl.w	r2, r0, r2
 8003fd2:	3360      	adds	r3, #96	@ 0x60
 8003fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	e000e100 	.word	0xe000e100

08003fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	6039      	str	r1, [r7, #0]
 8003ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	db0a      	blt.n	8004012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	490c      	ldr	r1, [pc, #48]	@ (8004034 <__NVIC_SetPriority+0x4c>)
 8004002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004006:	0112      	lsls	r2, r2, #4
 8004008:	b2d2      	uxtb	r2, r2
 800400a:	440b      	add	r3, r1
 800400c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004010:	e00a      	b.n	8004028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	b2da      	uxtb	r2, r3
 8004016:	4908      	ldr	r1, [pc, #32]	@ (8004038 <__NVIC_SetPriority+0x50>)
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	3b04      	subs	r3, #4
 8004020:	0112      	lsls	r2, r2, #4
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	440b      	add	r3, r1
 8004026:	761a      	strb	r2, [r3, #24]
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	e000e100 	.word	0xe000e100
 8004038:	e000ed00 	.word	0xe000ed00

0800403c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800403c:	b480      	push	{r7}
 800403e:	b089      	sub	sp, #36	@ 0x24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f1c3 0307 	rsb	r3, r3, #7
 8004056:	2b04      	cmp	r3, #4
 8004058:	bf28      	it	cs
 800405a:	2304      	movcs	r3, #4
 800405c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	3304      	adds	r3, #4
 8004062:	2b06      	cmp	r3, #6
 8004064:	d902      	bls.n	800406c <NVIC_EncodePriority+0x30>
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	3b03      	subs	r3, #3
 800406a:	e000      	b.n	800406e <NVIC_EncodePriority+0x32>
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004070:	f04f 32ff 	mov.w	r2, #4294967295
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43da      	mvns	r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	401a      	ands	r2, r3
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004084:	f04f 31ff 	mov.w	r1, #4294967295
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	fa01 f303 	lsl.w	r3, r1, r3
 800408e:	43d9      	mvns	r1, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004094:	4313      	orrs	r3, r2
         );
}
 8004096:	4618      	mov	r0, r3
 8004098:	3724      	adds	r7, #36	@ 0x24
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
	...

080040a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040b4:	d301      	bcc.n	80040ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040b6:	2301      	movs	r3, #1
 80040b8:	e00f      	b.n	80040da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040ba:	4a0a      	ldr	r2, [pc, #40]	@ (80040e4 <SysTick_Config+0x40>)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3b01      	subs	r3, #1
 80040c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040c2:	210f      	movs	r1, #15
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	f7ff ff8e 	bl	8003fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040cc:	4b05      	ldr	r3, [pc, #20]	@ (80040e4 <SysTick_Config+0x40>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040d2:	4b04      	ldr	r3, [pc, #16]	@ (80040e4 <SysTick_Config+0x40>)
 80040d4:	2207      	movs	r2, #7
 80040d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	e000e010 	.word	0xe000e010

080040e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff fee7 	bl	8003ec4 <__NVIC_SetPriorityGrouping>
}
 80040f6:	bf00      	nop
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040fe:	b580      	push	{r7, lr}
 8004100:	b086      	sub	sp, #24
 8004102:	af00      	add	r7, sp, #0
 8004104:	4603      	mov	r3, r0
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	607a      	str	r2, [r7, #4]
 800410a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004110:	f7ff fefc 	bl	8003f0c <__NVIC_GetPriorityGrouping>
 8004114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	6978      	ldr	r0, [r7, #20]
 800411c:	f7ff ff8e 	bl	800403c <NVIC_EncodePriority>
 8004120:	4602      	mov	r2, r0
 8004122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004126:	4611      	mov	r1, r2
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff ff5d 	bl	8003fe8 <__NVIC_SetPriority>
}
 800412e:	bf00      	nop
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	4603      	mov	r3, r0
 800413e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff feef 	bl	8003f28 <__NVIC_EnableIRQ>
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b082      	sub	sp, #8
 8004156:	af00      	add	r7, sp, #0
 8004158:	4603      	mov	r3, r0
 800415a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800415c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff feff 	bl	8003f64 <__NVIC_DisableIRQ>
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff ff94 	bl	80040a4 <SysTick_Config>
 800417c:	4603      	mov	r3, r0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b082      	sub	sp, #8
 800418a:	af00      	add	r7, sp, #0
 800418c:	4603      	mov	r3, r0
 800418e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff ff09 	bl	8003fac <__NVIC_ClearPendingIRQ>
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b089      	sub	sp, #36	@ 0x24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	e177      	b.n	80044b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041c0:	2201      	movs	r2, #1
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	4013      	ands	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	429a      	cmp	r2, r3
 80041da:	f040 8166 	bne.w	80044aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d005      	beq.n	80041f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d130      	bne.n	8004258 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	2203      	movs	r2, #3
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	43db      	mvns	r3, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4013      	ands	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800422c:	2201      	movs	r2, #1
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	43db      	mvns	r3, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4013      	ands	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	f003 0201 	and.w	r2, r3, #1
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4313      	orrs	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	2b03      	cmp	r3, #3
 8004262:	d017      	beq.n	8004294 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	2203      	movs	r2, #3
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d123      	bne.n	80042e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	08da      	lsrs	r2, r3, #3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3208      	adds	r2, #8
 80042a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	220f      	movs	r2, #15
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	08da      	lsrs	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3208      	adds	r2, #8
 80042e2:	69b9      	ldr	r1, [r7, #24]
 80042e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	2203      	movs	r2, #3
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 0203 	and.w	r2, r3, #3
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80c0 	beq.w	80044aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	4b66      	ldr	r3, [pc, #408]	@ (80044c8 <HAL_GPIO_Init+0x324>)
 8004330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004332:	4a65      	ldr	r2, [pc, #404]	@ (80044c8 <HAL_GPIO_Init+0x324>)
 8004334:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004338:	6453      	str	r3, [r2, #68]	@ 0x44
 800433a:	4b63      	ldr	r3, [pc, #396]	@ (80044c8 <HAL_GPIO_Init+0x324>)
 800433c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004346:	4a61      	ldr	r2, [pc, #388]	@ (80044cc <HAL_GPIO_Init+0x328>)
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	089b      	lsrs	r3, r3, #2
 800434c:	3302      	adds	r3, #2
 800434e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	220f      	movs	r2, #15
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43db      	mvns	r3, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4013      	ands	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a58      	ldr	r2, [pc, #352]	@ (80044d0 <HAL_GPIO_Init+0x32c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d037      	beq.n	80043e2 <HAL_GPIO_Init+0x23e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a57      	ldr	r2, [pc, #348]	@ (80044d4 <HAL_GPIO_Init+0x330>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d031      	beq.n	80043de <HAL_GPIO_Init+0x23a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a56      	ldr	r2, [pc, #344]	@ (80044d8 <HAL_GPIO_Init+0x334>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d02b      	beq.n	80043da <HAL_GPIO_Init+0x236>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a55      	ldr	r2, [pc, #340]	@ (80044dc <HAL_GPIO_Init+0x338>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d025      	beq.n	80043d6 <HAL_GPIO_Init+0x232>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a54      	ldr	r2, [pc, #336]	@ (80044e0 <HAL_GPIO_Init+0x33c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d01f      	beq.n	80043d2 <HAL_GPIO_Init+0x22e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a53      	ldr	r2, [pc, #332]	@ (80044e4 <HAL_GPIO_Init+0x340>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d019      	beq.n	80043ce <HAL_GPIO_Init+0x22a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a52      	ldr	r2, [pc, #328]	@ (80044e8 <HAL_GPIO_Init+0x344>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d013      	beq.n	80043ca <HAL_GPIO_Init+0x226>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a51      	ldr	r2, [pc, #324]	@ (80044ec <HAL_GPIO_Init+0x348>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00d      	beq.n	80043c6 <HAL_GPIO_Init+0x222>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a50      	ldr	r2, [pc, #320]	@ (80044f0 <HAL_GPIO_Init+0x34c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d007      	beq.n	80043c2 <HAL_GPIO_Init+0x21e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a4f      	ldr	r2, [pc, #316]	@ (80044f4 <HAL_GPIO_Init+0x350>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d101      	bne.n	80043be <HAL_GPIO_Init+0x21a>
 80043ba:	2309      	movs	r3, #9
 80043bc:	e012      	b.n	80043e4 <HAL_GPIO_Init+0x240>
 80043be:	230a      	movs	r3, #10
 80043c0:	e010      	b.n	80043e4 <HAL_GPIO_Init+0x240>
 80043c2:	2308      	movs	r3, #8
 80043c4:	e00e      	b.n	80043e4 <HAL_GPIO_Init+0x240>
 80043c6:	2307      	movs	r3, #7
 80043c8:	e00c      	b.n	80043e4 <HAL_GPIO_Init+0x240>
 80043ca:	2306      	movs	r3, #6
 80043cc:	e00a      	b.n	80043e4 <HAL_GPIO_Init+0x240>
 80043ce:	2305      	movs	r3, #5
 80043d0:	e008      	b.n	80043e4 <HAL_GPIO_Init+0x240>
 80043d2:	2304      	movs	r3, #4
 80043d4:	e006      	b.n	80043e4 <HAL_GPIO_Init+0x240>
 80043d6:	2303      	movs	r3, #3
 80043d8:	e004      	b.n	80043e4 <HAL_GPIO_Init+0x240>
 80043da:	2302      	movs	r3, #2
 80043dc:	e002      	b.n	80043e4 <HAL_GPIO_Init+0x240>
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <HAL_GPIO_Init+0x240>
 80043e2:	2300      	movs	r3, #0
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	f002 0203 	and.w	r2, r2, #3
 80043ea:	0092      	lsls	r2, r2, #2
 80043ec:	4093      	lsls	r3, r2
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043f4:	4935      	ldr	r1, [pc, #212]	@ (80044cc <HAL_GPIO_Init+0x328>)
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	089b      	lsrs	r3, r3, #2
 80043fa:	3302      	adds	r3, #2
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004402:	4b3d      	ldr	r3, [pc, #244]	@ (80044f8 <HAL_GPIO_Init+0x354>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	43db      	mvns	r3, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4013      	ands	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004426:	4a34      	ldr	r2, [pc, #208]	@ (80044f8 <HAL_GPIO_Init+0x354>)
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800442c:	4b32      	ldr	r3, [pc, #200]	@ (80044f8 <HAL_GPIO_Init+0x354>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	43db      	mvns	r3, r3
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4013      	ands	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004450:	4a29      	ldr	r2, [pc, #164]	@ (80044f8 <HAL_GPIO_Init+0x354>)
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004456:	4b28      	ldr	r3, [pc, #160]	@ (80044f8 <HAL_GPIO_Init+0x354>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	43db      	mvns	r3, r3
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4013      	ands	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4313      	orrs	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800447a:	4a1f      	ldr	r2, [pc, #124]	@ (80044f8 <HAL_GPIO_Init+0x354>)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004480:	4b1d      	ldr	r3, [pc, #116]	@ (80044f8 <HAL_GPIO_Init+0x354>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	43db      	mvns	r3, r3
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4013      	ands	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044a4:	4a14      	ldr	r2, [pc, #80]	@ (80044f8 <HAL_GPIO_Init+0x354>)
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	3301      	adds	r3, #1
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	2b0f      	cmp	r3, #15
 80044b4:	f67f ae84 	bls.w	80041c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
 80044bc:	3724      	adds	r7, #36	@ 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40023800 	.word	0x40023800
 80044cc:	40013800 	.word	0x40013800
 80044d0:	40020000 	.word	0x40020000
 80044d4:	40020400 	.word	0x40020400
 80044d8:	40020800 	.word	0x40020800
 80044dc:	40020c00 	.word	0x40020c00
 80044e0:	40021000 	.word	0x40021000
 80044e4:	40021400 	.word	0x40021400
 80044e8:	40021800 	.word	0x40021800
 80044ec:	40021c00 	.word	0x40021c00
 80044f0:	40022000 	.word	0x40022000
 80044f4:	40022400 	.word	0x40022400
 80044f8:	40013c00 	.word	0x40013c00

080044fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800450e:	2300      	movs	r3, #0
 8004510:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	e0d9      	b.n	80046cc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004518:	2201      	movs	r2, #1
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4013      	ands	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	429a      	cmp	r2, r3
 8004530:	f040 80c9 	bne.w	80046c6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004534:	4a6b      	ldr	r2, [pc, #428]	@ (80046e4 <HAL_GPIO_DeInit+0x1e8>)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	089b      	lsrs	r3, r3, #2
 800453a:	3302      	adds	r3, #2
 800453c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004540:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	220f      	movs	r2, #15
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	4013      	ands	r3, r2
 8004554:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a63      	ldr	r2, [pc, #396]	@ (80046e8 <HAL_GPIO_DeInit+0x1ec>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d037      	beq.n	80045ce <HAL_GPIO_DeInit+0xd2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a62      	ldr	r2, [pc, #392]	@ (80046ec <HAL_GPIO_DeInit+0x1f0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d031      	beq.n	80045ca <HAL_GPIO_DeInit+0xce>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a61      	ldr	r2, [pc, #388]	@ (80046f0 <HAL_GPIO_DeInit+0x1f4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d02b      	beq.n	80045c6 <HAL_GPIO_DeInit+0xca>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a60      	ldr	r2, [pc, #384]	@ (80046f4 <HAL_GPIO_DeInit+0x1f8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d025      	beq.n	80045c2 <HAL_GPIO_DeInit+0xc6>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a5f      	ldr	r2, [pc, #380]	@ (80046f8 <HAL_GPIO_DeInit+0x1fc>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d01f      	beq.n	80045be <HAL_GPIO_DeInit+0xc2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a5e      	ldr	r2, [pc, #376]	@ (80046fc <HAL_GPIO_DeInit+0x200>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d019      	beq.n	80045ba <HAL_GPIO_DeInit+0xbe>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a5d      	ldr	r2, [pc, #372]	@ (8004700 <HAL_GPIO_DeInit+0x204>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d013      	beq.n	80045b6 <HAL_GPIO_DeInit+0xba>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a5c      	ldr	r2, [pc, #368]	@ (8004704 <HAL_GPIO_DeInit+0x208>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00d      	beq.n	80045b2 <HAL_GPIO_DeInit+0xb6>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a5b      	ldr	r2, [pc, #364]	@ (8004708 <HAL_GPIO_DeInit+0x20c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d007      	beq.n	80045ae <HAL_GPIO_DeInit+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a5a      	ldr	r2, [pc, #360]	@ (800470c <HAL_GPIO_DeInit+0x210>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d101      	bne.n	80045aa <HAL_GPIO_DeInit+0xae>
 80045a6:	2309      	movs	r3, #9
 80045a8:	e012      	b.n	80045d0 <HAL_GPIO_DeInit+0xd4>
 80045aa:	230a      	movs	r3, #10
 80045ac:	e010      	b.n	80045d0 <HAL_GPIO_DeInit+0xd4>
 80045ae:	2308      	movs	r3, #8
 80045b0:	e00e      	b.n	80045d0 <HAL_GPIO_DeInit+0xd4>
 80045b2:	2307      	movs	r3, #7
 80045b4:	e00c      	b.n	80045d0 <HAL_GPIO_DeInit+0xd4>
 80045b6:	2306      	movs	r3, #6
 80045b8:	e00a      	b.n	80045d0 <HAL_GPIO_DeInit+0xd4>
 80045ba:	2305      	movs	r3, #5
 80045bc:	e008      	b.n	80045d0 <HAL_GPIO_DeInit+0xd4>
 80045be:	2304      	movs	r3, #4
 80045c0:	e006      	b.n	80045d0 <HAL_GPIO_DeInit+0xd4>
 80045c2:	2303      	movs	r3, #3
 80045c4:	e004      	b.n	80045d0 <HAL_GPIO_DeInit+0xd4>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e002      	b.n	80045d0 <HAL_GPIO_DeInit+0xd4>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <HAL_GPIO_DeInit+0xd4>
 80045ce:	2300      	movs	r3, #0
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	f002 0203 	and.w	r2, r2, #3
 80045d6:	0092      	lsls	r2, r2, #2
 80045d8:	4093      	lsls	r3, r2
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d132      	bne.n	8004646 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80045e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004710 <HAL_GPIO_DeInit+0x214>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	43db      	mvns	r3, r3
 80045e8:	4949      	ldr	r1, [pc, #292]	@ (8004710 <HAL_GPIO_DeInit+0x214>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80045ee:	4b48      	ldr	r3, [pc, #288]	@ (8004710 <HAL_GPIO_DeInit+0x214>)
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	4946      	ldr	r1, [pc, #280]	@ (8004710 <HAL_GPIO_DeInit+0x214>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80045fc:	4b44      	ldr	r3, [pc, #272]	@ (8004710 <HAL_GPIO_DeInit+0x214>)
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	43db      	mvns	r3, r3
 8004604:	4942      	ldr	r1, [pc, #264]	@ (8004710 <HAL_GPIO_DeInit+0x214>)
 8004606:	4013      	ands	r3, r2
 8004608:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800460a:	4b41      	ldr	r3, [pc, #260]	@ (8004710 <HAL_GPIO_DeInit+0x214>)
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	43db      	mvns	r3, r3
 8004612:	493f      	ldr	r1, [pc, #252]	@ (8004710 <HAL_GPIO_DeInit+0x214>)
 8004614:	4013      	ands	r3, r2
 8004616:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	220f      	movs	r2, #15
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004628:	4a2e      	ldr	r2, [pc, #184]	@ (80046e4 <HAL_GPIO_DeInit+0x1e8>)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	089b      	lsrs	r3, r3, #2
 800462e:	3302      	adds	r3, #2
 8004630:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	43da      	mvns	r2, r3
 8004638:	482a      	ldr	r0, [pc, #168]	@ (80046e4 <HAL_GPIO_DeInit+0x1e8>)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	089b      	lsrs	r3, r3, #2
 800463e:	400a      	ands	r2, r1
 8004640:	3302      	adds	r3, #2
 8004642:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	2103      	movs	r1, #3
 8004650:	fa01 f303 	lsl.w	r3, r1, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	401a      	ands	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	08da      	lsrs	r2, r3, #3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3208      	adds	r2, #8
 8004664:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	220f      	movs	r2, #15
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43db      	mvns	r3, r3
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	08d2      	lsrs	r2, r2, #3
 800467c:	4019      	ands	r1, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3208      	adds	r2, #8
 8004682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	2103      	movs	r1, #3
 8004690:	fa01 f303 	lsl.w	r3, r1, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	401a      	ands	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	2101      	movs	r1, #1
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	fa01 f303 	lsl.w	r3, r1, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	401a      	ands	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	2103      	movs	r1, #3
 80046ba:	fa01 f303 	lsl.w	r3, r1, r3
 80046be:	43db      	mvns	r3, r3
 80046c0:	401a      	ands	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	3301      	adds	r3, #1
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2b0f      	cmp	r3, #15
 80046d0:	f67f af22 	bls.w	8004518 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40013800 	.word	0x40013800
 80046e8:	40020000 	.word	0x40020000
 80046ec:	40020400 	.word	0x40020400
 80046f0:	40020800 	.word	0x40020800
 80046f4:	40020c00 	.word	0x40020c00
 80046f8:	40021000 	.word	0x40021000
 80046fc:	40021400 	.word	0x40021400
 8004700:	40021800 	.word	0x40021800
 8004704:	40021c00 	.word	0x40021c00
 8004708:	40022000 	.word	0x40022000
 800470c:	40022400 	.word	0x40022400
 8004710:	40013c00 	.word	0x40013c00

08004714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	807b      	strh	r3, [r7, #2]
 8004720:	4613      	mov	r3, r2
 8004722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004724:	787b      	ldrb	r3, [r7, #1]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800472a:	887a      	ldrh	r2, [r7, #2]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004730:	e003      	b.n	800473a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004732:	887b      	ldrh	r3, [r7, #2]
 8004734:	041a      	lsls	r2, r3, #16
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	619a      	str	r2, [r3, #24]
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e12b      	b.n	80049b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fe fce6 	bl	8003140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2224      	movs	r2, #36	@ 0x24
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0201 	bic.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800479a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047ac:	f001 ff82 	bl	80066b4 <HAL_RCC_GetPCLK1Freq>
 80047b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	4a81      	ldr	r2, [pc, #516]	@ (80049bc <HAL_I2C_Init+0x274>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d807      	bhi.n	80047cc <HAL_I2C_Init+0x84>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4a80      	ldr	r2, [pc, #512]	@ (80049c0 <HAL_I2C_Init+0x278>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	bf94      	ite	ls
 80047c4:	2301      	movls	r3, #1
 80047c6:	2300      	movhi	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	e006      	b.n	80047da <HAL_I2C_Init+0x92>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4a7d      	ldr	r2, [pc, #500]	@ (80049c4 <HAL_I2C_Init+0x27c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	bf94      	ite	ls
 80047d4:	2301      	movls	r3, #1
 80047d6:	2300      	movhi	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e0e7      	b.n	80049b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4a78      	ldr	r2, [pc, #480]	@ (80049c8 <HAL_I2C_Init+0x280>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	0c9b      	lsrs	r3, r3, #18
 80047ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	430a      	orrs	r2, r1
 8004800:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	4a6a      	ldr	r2, [pc, #424]	@ (80049bc <HAL_I2C_Init+0x274>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d802      	bhi.n	800481c <HAL_I2C_Init+0xd4>
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	3301      	adds	r3, #1
 800481a:	e009      	b.n	8004830 <HAL_I2C_Init+0xe8>
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	4a69      	ldr	r2, [pc, #420]	@ (80049cc <HAL_I2C_Init+0x284>)
 8004828:	fba2 2303 	umull	r2, r3, r2, r3
 800482c:	099b      	lsrs	r3, r3, #6
 800482e:	3301      	adds	r3, #1
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6812      	ldr	r2, [r2, #0]
 8004834:	430b      	orrs	r3, r1
 8004836:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004842:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	495c      	ldr	r1, [pc, #368]	@ (80049bc <HAL_I2C_Init+0x274>)
 800484c:	428b      	cmp	r3, r1
 800484e:	d819      	bhi.n	8004884 <HAL_I2C_Init+0x13c>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	1e59      	subs	r1, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	fbb1 f3f3 	udiv	r3, r1, r3
 800485e:	1c59      	adds	r1, r3, #1
 8004860:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004864:	400b      	ands	r3, r1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <HAL_I2C_Init+0x138>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1e59      	subs	r1, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	fbb1 f3f3 	udiv	r3, r1, r3
 8004878:	3301      	adds	r3, #1
 800487a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487e:	e051      	b.n	8004924 <HAL_I2C_Init+0x1dc>
 8004880:	2304      	movs	r3, #4
 8004882:	e04f      	b.n	8004924 <HAL_I2C_Init+0x1dc>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d111      	bne.n	80048b0 <HAL_I2C_Init+0x168>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	1e58      	subs	r0, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6859      	ldr	r1, [r3, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	440b      	add	r3, r1
 800489a:	fbb0 f3f3 	udiv	r3, r0, r3
 800489e:	3301      	adds	r3, #1
 80048a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bf0c      	ite	eq
 80048a8:	2301      	moveq	r3, #1
 80048aa:	2300      	movne	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	e012      	b.n	80048d6 <HAL_I2C_Init+0x18e>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	1e58      	subs	r0, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6859      	ldr	r1, [r3, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	0099      	lsls	r1, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048c6:	3301      	adds	r3, #1
 80048c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	bf0c      	ite	eq
 80048d0:	2301      	moveq	r3, #1
 80048d2:	2300      	movne	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_I2C_Init+0x196>
 80048da:	2301      	movs	r3, #1
 80048dc:	e022      	b.n	8004924 <HAL_I2C_Init+0x1dc>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10e      	bne.n	8004904 <HAL_I2C_Init+0x1bc>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	1e58      	subs	r0, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6859      	ldr	r1, [r3, #4]
 80048ee:	460b      	mov	r3, r1
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	440b      	add	r3, r1
 80048f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80048f8:	3301      	adds	r3, #1
 80048fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004902:	e00f      	b.n	8004924 <HAL_I2C_Init+0x1dc>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1e58      	subs	r0, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6859      	ldr	r1, [r3, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	0099      	lsls	r1, r3, #2
 8004914:	440b      	add	r3, r1
 8004916:	fbb0 f3f3 	udiv	r3, r0, r3
 800491a:	3301      	adds	r3, #1
 800491c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004920:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	6809      	ldr	r1, [r1, #0]
 8004928:	4313      	orrs	r3, r2
 800492a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69da      	ldr	r2, [r3, #28]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004952:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6911      	ldr	r1, [r2, #16]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68d2      	ldr	r2, [r2, #12]
 800495e:	4311      	orrs	r1, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	430b      	orrs	r3, r1
 8004966:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695a      	ldr	r2, [r3, #20]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2220      	movs	r2, #32
 800499e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	000186a0 	.word	0x000186a0
 80049c0:	001e847f 	.word	0x001e847f
 80049c4:	003d08ff 	.word	0x003d08ff
 80049c8:	431bde83 	.word	0x431bde83
 80049cc:	10624dd3 	.word	0x10624dd3

080049d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	4608      	mov	r0, r1
 80049da:	4611      	mov	r1, r2
 80049dc:	461a      	mov	r2, r3
 80049de:	4603      	mov	r3, r0
 80049e0:	817b      	strh	r3, [r7, #10]
 80049e2:	460b      	mov	r3, r1
 80049e4:	813b      	strh	r3, [r7, #8]
 80049e6:	4613      	mov	r3, r2
 80049e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049ea:	f7ff fa3b 	bl	8003e64 <HAL_GetTick>
 80049ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	f040 80d9 	bne.w	8004bb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	2319      	movs	r3, #25
 8004a04:	2201      	movs	r2, #1
 8004a06:	496d      	ldr	r1, [pc, #436]	@ (8004bbc <HAL_I2C_Mem_Write+0x1ec>)
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fc8b 	bl	8005324 <I2C_WaitOnFlagUntilTimeout>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a14:	2302      	movs	r3, #2
 8004a16:	e0cc      	b.n	8004bb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_I2C_Mem_Write+0x56>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e0c5      	b.n	8004bb2 <HAL_I2C_Mem_Write+0x1e2>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d007      	beq.n	8004a4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2221      	movs	r2, #33	@ 0x21
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2240      	movs	r2, #64	@ 0x40
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a3a      	ldr	r2, [r7, #32]
 8004a76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4a4d      	ldr	r2, [pc, #308]	@ (8004bc0 <HAL_I2C_Mem_Write+0x1f0>)
 8004a8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a8e:	88f8      	ldrh	r0, [r7, #6]
 8004a90:	893a      	ldrh	r2, [r7, #8]
 8004a92:	8979      	ldrh	r1, [r7, #10]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	9301      	str	r3, [sp, #4]
 8004a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 fac2 	bl	8005028 <I2C_RequestMemoryWrite>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d052      	beq.n	8004b50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e081      	b.n	8004bb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 fd50 	bl	8005558 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00d      	beq.n	8004ada <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d107      	bne.n	8004ad6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ad4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e06b      	b.n	8004bb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ade:	781a      	ldrb	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d11b      	bne.n	8004b50 <HAL_I2C_Mem_Write+0x180>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d017      	beq.n	8004b50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	781a      	ldrb	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1aa      	bne.n	8004aae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 fd43 	bl	80055e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00d      	beq.n	8004b84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d107      	bne.n	8004b80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e016      	b.n	8004bb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e000      	b.n	8004bb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004bb0:	2302      	movs	r3, #2
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	00100002 	.word	0x00100002
 8004bc0:	ffff0000 	.word	0xffff0000

08004bc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08c      	sub	sp, #48	@ 0x30
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	4608      	mov	r0, r1
 8004bce:	4611      	mov	r1, r2
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	817b      	strh	r3, [r7, #10]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	813b      	strh	r3, [r7, #8]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bde:	f7ff f941 	bl	8003e64 <HAL_GetTick>
 8004be2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	f040 8214 	bne.w	800501a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	2319      	movs	r3, #25
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	497b      	ldr	r1, [pc, #492]	@ (8004de8 <HAL_I2C_Mem_Read+0x224>)
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 fb91 	bl	8005324 <I2C_WaitOnFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e207      	b.n	800501c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_I2C_Mem_Read+0x56>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e200      	b.n	800501c <HAL_I2C_Mem_Read+0x458>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d007      	beq.n	8004c40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2222      	movs	r2, #34	@ 0x22
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2240      	movs	r2, #64	@ 0x40
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004c70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4a5b      	ldr	r2, [pc, #364]	@ (8004dec <HAL_I2C_Mem_Read+0x228>)
 8004c80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c82:	88f8      	ldrh	r0, [r7, #6]
 8004c84:	893a      	ldrh	r2, [r7, #8]
 8004c86:	8979      	ldrh	r1, [r7, #10]
 8004c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8a:	9301      	str	r3, [sp, #4]
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	4603      	mov	r3, r0
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 fa5e 	bl	8005154 <I2C_RequestMemoryRead>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e1bc      	b.n	800501c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d113      	bne.n	8004cd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004caa:	2300      	movs	r3, #0
 8004cac:	623b      	str	r3, [r7, #32]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	623b      	str	r3, [r7, #32]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	623b      	str	r3, [r7, #32]
 8004cbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	e190      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d11b      	bne.n	8004d12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ce8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cea:	2300      	movs	r3, #0
 8004cec:	61fb      	str	r3, [r7, #28]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	e170      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d11b      	bne.n	8004d52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	e150      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d68:	e144      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	f200 80f1 	bhi.w	8004f56 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d123      	bne.n	8004dc4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 fc79 	bl	8005678 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e145      	b.n	800501c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004dc2:	e117      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d14e      	bne.n	8004e6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	4906      	ldr	r1, [pc, #24]	@ (8004df0 <HAL_I2C_Mem_Read+0x22c>)
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 faa4 	bl	8005324 <I2C_WaitOnFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d008      	beq.n	8004df4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e11a      	b.n	800501c <HAL_I2C_Mem_Read+0x458>
 8004de6:	bf00      	nop
 8004de8:	00100002 	.word	0x00100002
 8004dec:	ffff0000 	.word	0xffff0000
 8004df0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e68:	e0c4      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e70:	2200      	movs	r2, #0
 8004e72:	496c      	ldr	r1, [pc, #432]	@ (8005024 <HAL_I2C_Mem_Read+0x460>)
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 fa55 	bl	8005324 <I2C_WaitOnFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e0cb      	b.n	800501c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ecc:	2200      	movs	r2, #0
 8004ece:	4955      	ldr	r1, [pc, #340]	@ (8005024 <HAL_I2C_Mem_Read+0x460>)
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 fa27 	bl	8005324 <I2C_WaitOnFlagUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e09d      	b.n	800501c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f54:	e04e      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f58:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fb8c 	bl	8005678 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e058      	b.n	800501c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d124      	bne.n	8004ff4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d107      	bne.n	8004fc2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fc0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f47f aeb6 	bne.w	8004d6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2220      	movs	r2, #32
 8005002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	e000      	b.n	800501c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800501a:	2302      	movs	r3, #2
  }
}
 800501c:	4618      	mov	r0, r3
 800501e:	3728      	adds	r7, #40	@ 0x28
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	00010004 	.word	0x00010004

08005028 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af02      	add	r7, sp, #8
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	4608      	mov	r0, r1
 8005032:	4611      	mov	r1, r2
 8005034:	461a      	mov	r2, r3
 8005036:	4603      	mov	r3, r0
 8005038:	817b      	strh	r3, [r7, #10]
 800503a:	460b      	mov	r3, r1
 800503c:	813b      	strh	r3, [r7, #8]
 800503e:	4613      	mov	r3, r2
 8005040:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005050:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	2200      	movs	r2, #0
 800505a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f960 	bl	8005324 <I2C_WaitOnFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00d      	beq.n	8005086 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005078:	d103      	bne.n	8005082 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005080:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e05f      	b.n	8005146 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005086:	897b      	ldrh	r3, [r7, #10]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	461a      	mov	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005094:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005098:	6a3a      	ldr	r2, [r7, #32]
 800509a:	492d      	ldr	r1, [pc, #180]	@ (8005150 <I2C_RequestMemoryWrite+0x128>)
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 f9bb 	bl	8005418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e04c      	b.n	8005146 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c4:	6a39      	ldr	r1, [r7, #32]
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 fa46 	bl	8005558 <I2C_WaitOnTXEFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00d      	beq.n	80050ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d107      	bne.n	80050ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e02b      	b.n	8005146 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050ee:	88fb      	ldrh	r3, [r7, #6]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d105      	bne.n	8005100 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050f4:	893b      	ldrh	r3, [r7, #8]
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	611a      	str	r2, [r3, #16]
 80050fe:	e021      	b.n	8005144 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005100:	893b      	ldrh	r3, [r7, #8]
 8005102:	0a1b      	lsrs	r3, r3, #8
 8005104:	b29b      	uxth	r3, r3
 8005106:	b2da      	uxtb	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800510e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005110:	6a39      	ldr	r1, [r7, #32]
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 fa20 	bl	8005558 <I2C_WaitOnTXEFlagUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00d      	beq.n	800513a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005122:	2b04      	cmp	r3, #4
 8005124:	d107      	bne.n	8005136 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005134:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e005      	b.n	8005146 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800513a:	893b      	ldrh	r3, [r7, #8]
 800513c:	b2da      	uxtb	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	00010002 	.word	0x00010002

08005154 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af02      	add	r7, sp, #8
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	4608      	mov	r0, r1
 800515e:	4611      	mov	r1, r2
 8005160:	461a      	mov	r2, r3
 8005162:	4603      	mov	r3, r0
 8005164:	817b      	strh	r3, [r7, #10]
 8005166:	460b      	mov	r3, r1
 8005168:	813b      	strh	r3, [r7, #8]
 800516a:	4613      	mov	r3, r2
 800516c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800517c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800518c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	2200      	movs	r2, #0
 8005196:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 f8c2 	bl	8005324 <I2C_WaitOnFlagUntilTimeout>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00d      	beq.n	80051c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051b4:	d103      	bne.n	80051be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e0aa      	b.n	8005318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051c2:	897b      	ldrh	r3, [r7, #10]
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	461a      	mov	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d4:	6a3a      	ldr	r2, [r7, #32]
 80051d6:	4952      	ldr	r1, [pc, #328]	@ (8005320 <I2C_RequestMemoryRead+0x1cc>)
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f91d 	bl	8005418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e097      	b.n	8005318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e8:	2300      	movs	r3, #0
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005200:	6a39      	ldr	r1, [r7, #32]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 f9a8 	bl	8005558 <I2C_WaitOnTXEFlagUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00d      	beq.n	800522a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	2b04      	cmp	r3, #4
 8005214:	d107      	bne.n	8005226 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005224:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e076      	b.n	8005318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800522a:	88fb      	ldrh	r3, [r7, #6]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d105      	bne.n	800523c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005230:	893b      	ldrh	r3, [r7, #8]
 8005232:	b2da      	uxtb	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	611a      	str	r2, [r3, #16]
 800523a:	e021      	b.n	8005280 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800523c:	893b      	ldrh	r3, [r7, #8]
 800523e:	0a1b      	lsrs	r3, r3, #8
 8005240:	b29b      	uxth	r3, r3
 8005242:	b2da      	uxtb	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800524a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800524c:	6a39      	ldr	r1, [r7, #32]
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f982 	bl	8005558 <I2C_WaitOnTXEFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00d      	beq.n	8005276 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525e:	2b04      	cmp	r3, #4
 8005260:	d107      	bne.n	8005272 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005270:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e050      	b.n	8005318 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005276:	893b      	ldrh	r3, [r7, #8]
 8005278:	b2da      	uxtb	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005282:	6a39      	ldr	r1, [r7, #32]
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f967 	bl	8005558 <I2C_WaitOnTXEFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00d      	beq.n	80052ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005294:	2b04      	cmp	r3, #4
 8005296:	d107      	bne.n	80052a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e035      	b.n	8005318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f82b 	bl	8005324 <I2C_WaitOnFlagUntilTimeout>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00d      	beq.n	80052f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052e2:	d103      	bne.n	80052ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e013      	b.n	8005318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052f0:	897b      	ldrh	r3, [r7, #10]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	f043 0301 	orr.w	r3, r3, #1
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005302:	6a3a      	ldr	r2, [r7, #32]
 8005304:	4906      	ldr	r1, [pc, #24]	@ (8005320 <I2C_RequestMemoryRead+0x1cc>)
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 f886 	bl	8005418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3718      	adds	r7, #24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	00010002 	.word	0x00010002

08005324 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	4613      	mov	r3, r2
 8005332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005334:	e048      	b.n	80053c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533c:	d044      	beq.n	80053c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533e:	f7fe fd91 	bl	8003e64 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d302      	bcc.n	8005354 <I2C_WaitOnFlagUntilTimeout+0x30>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d139      	bne.n	80053c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	0c1b      	lsrs	r3, r3, #16
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b01      	cmp	r3, #1
 800535c:	d10d      	bne.n	800537a <I2C_WaitOnFlagUntilTimeout+0x56>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	43da      	mvns	r2, r3
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	4013      	ands	r3, r2
 800536a:	b29b      	uxth	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	bf0c      	ite	eq
 8005370:	2301      	moveq	r3, #1
 8005372:	2300      	movne	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	461a      	mov	r2, r3
 8005378:	e00c      	b.n	8005394 <I2C_WaitOnFlagUntilTimeout+0x70>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	43da      	mvns	r2, r3
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4013      	ands	r3, r2
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	bf0c      	ite	eq
 800538c:	2301      	moveq	r3, #1
 800538e:	2300      	movne	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	461a      	mov	r2, r3
 8005394:	79fb      	ldrb	r3, [r7, #7]
 8005396:	429a      	cmp	r2, r3
 8005398:	d116      	bne.n	80053c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b4:	f043 0220 	orr.w	r2, r3, #32
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e023      	b.n	8005410 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	0c1b      	lsrs	r3, r3, #16
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d10d      	bne.n	80053ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	43da      	mvns	r2, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4013      	ands	r3, r2
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	bf0c      	ite	eq
 80053e4:	2301      	moveq	r3, #1
 80053e6:	2300      	movne	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	461a      	mov	r2, r3
 80053ec:	e00c      	b.n	8005408 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	43da      	mvns	r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	4013      	ands	r3, r2
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	bf0c      	ite	eq
 8005400:	2301      	moveq	r3, #1
 8005402:	2300      	movne	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	461a      	mov	r2, r3
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	429a      	cmp	r2, r3
 800540c:	d093      	beq.n	8005336 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005426:	e071      	b.n	800550c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005436:	d123      	bne.n	8005480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005446:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005450:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546c:	f043 0204 	orr.w	r2, r3, #4
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e067      	b.n	8005550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005486:	d041      	beq.n	800550c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005488:	f7fe fcec 	bl	8003e64 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	429a      	cmp	r2, r3
 8005496:	d302      	bcc.n	800549e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d136      	bne.n	800550c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	0c1b      	lsrs	r3, r3, #16
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d10c      	bne.n	80054c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	43da      	mvns	r2, r3
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4013      	ands	r3, r2
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bf14      	ite	ne
 80054ba:	2301      	movne	r3, #1
 80054bc:	2300      	moveq	r3, #0
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	e00b      	b.n	80054da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	43da      	mvns	r2, r3
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	4013      	ands	r3, r2
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	bf14      	ite	ne
 80054d4:	2301      	movne	r3, #1
 80054d6:	2300      	moveq	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d016      	beq.n	800550c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f8:	f043 0220 	orr.w	r2, r3, #32
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e021      	b.n	8005550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	0c1b      	lsrs	r3, r3, #16
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b01      	cmp	r3, #1
 8005514:	d10c      	bne.n	8005530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	43da      	mvns	r2, r3
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4013      	ands	r3, r2
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	e00b      	b.n	8005548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	43da      	mvns	r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4013      	ands	r3, r2
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	bf14      	ite	ne
 8005542:	2301      	movne	r3, #1
 8005544:	2300      	moveq	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	f47f af6d 	bne.w	8005428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005564:	e034      	b.n	80055d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 f8e3 	bl	8005732 <I2C_IsAcknowledgeFailed>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e034      	b.n	80055e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d028      	beq.n	80055d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800557e:	f7fe fc71 	bl	8003e64 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	429a      	cmp	r2, r3
 800558c:	d302      	bcc.n	8005594 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d11d      	bne.n	80055d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800559e:	2b80      	cmp	r3, #128	@ 0x80
 80055a0:	d016      	beq.n	80055d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055bc:	f043 0220 	orr.w	r2, r3, #32
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e007      	b.n	80055e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055da:	2b80      	cmp	r3, #128	@ 0x80
 80055dc:	d1c3      	bne.n	8005566 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055f4:	e034      	b.n	8005660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 f89b 	bl	8005732 <I2C_IsAcknowledgeFailed>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e034      	b.n	8005670 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560c:	d028      	beq.n	8005660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560e:	f7fe fc29 	bl	8003e64 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	429a      	cmp	r2, r3
 800561c:	d302      	bcc.n	8005624 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d11d      	bne.n	8005660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	2b04      	cmp	r3, #4
 8005630:	d016      	beq.n	8005660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564c:	f043 0220 	orr.w	r2, r3, #32
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e007      	b.n	8005670 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b04      	cmp	r3, #4
 800566c:	d1c3      	bne.n	80055f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005684:	e049      	b.n	800571a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b10      	cmp	r3, #16
 8005692:	d119      	bne.n	80056c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0210 	mvn.w	r2, #16
 800569c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e030      	b.n	800572a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c8:	f7fe fbcc 	bl	8003e64 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d302      	bcc.n	80056de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d11d      	bne.n	800571a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e8:	2b40      	cmp	r3, #64	@ 0x40
 80056ea:	d016      	beq.n	800571a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005706:	f043 0220 	orr.w	r2, r3, #32
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e007      	b.n	800572a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005724:	2b40      	cmp	r3, #64	@ 0x40
 8005726:	d1ae      	bne.n	8005686 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005744:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005748:	d11b      	bne.n	8005782 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005752:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576e:	f043 0204 	orr.w	r2, r3, #4
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d129      	bne.n	80057fa <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2224      	movs	r2, #36	@ 0x24
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0201 	bic.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0210 	bic.w	r2, r2, #16
 80057cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0201 	orr.w	r2, r2, #1
 80057ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	e000      	b.n	80057fc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80057fa:	2302      	movs	r3, #2
  }
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b20      	cmp	r3, #32
 8005820:	d12a      	bne.n	8005878 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2224      	movs	r2, #36	@ 0x24
 8005826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0201 	bic.w	r2, r2, #1
 8005838:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005840:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005842:	89fb      	ldrh	r3, [r7, #14]
 8005844:	f023 030f 	bic.w	r3, r3, #15
 8005848:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	b29a      	uxth	r2, r3
 800584e:	89fb      	ldrh	r3, [r7, #14]
 8005850:	4313      	orrs	r3, r2
 8005852:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	89fa      	ldrh	r2, [r7, #14]
 800585a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	e000      	b.n	800587a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005878:	2302      	movs	r3, #2
  }
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
	...

08005888 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e0bf      	b.n	8005a1a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fd fcb0 	bl	8003214 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80058ca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6999      	ldr	r1, [r3, #24]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80058e0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6899      	ldr	r1, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	4b4a      	ldr	r3, [pc, #296]	@ (8005a24 <HAL_LTDC_Init+0x19c>)
 80058fc:	400b      	ands	r3, r1
 80058fe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	041b      	lsls	r3, r3, #16
 8005906:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6899      	ldr	r1, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	431a      	orrs	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68d9      	ldr	r1, [r3, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	4b3e      	ldr	r3, [pc, #248]	@ (8005a24 <HAL_LTDC_Init+0x19c>)
 800592a:	400b      	ands	r3, r1
 800592c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	041b      	lsls	r3, r3, #16
 8005934:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68d9      	ldr	r1, [r3, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1a      	ldr	r2, [r3, #32]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6919      	ldr	r1, [r3, #16]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	4b33      	ldr	r3, [pc, #204]	@ (8005a24 <HAL_LTDC_Init+0x19c>)
 8005958:	400b      	ands	r3, r1
 800595a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	041b      	lsls	r3, r3, #16
 8005962:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6919      	ldr	r1, [r3, #16]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6959      	ldr	r1, [r3, #20]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	4b27      	ldr	r3, [pc, #156]	@ (8005a24 <HAL_LTDC_Init+0x19c>)
 8005986:	400b      	ands	r3, r1
 8005988:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598e:	041b      	lsls	r3, r3, #16
 8005990:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6959      	ldr	r1, [r3, #20]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80059b8:	041b      	lsls	r3, r3, #16
 80059ba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80059ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0206 	orr.w	r2, r2, #6
 80059f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0201 	orr.w	r2, r2, #1
 8005a06:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	f000f800 	.word	0xf000f800

08005a28 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005a28:	b5b0      	push	{r4, r5, r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <HAL_LTDC_ConfigLayer+0x1a>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e02c      	b.n	8005a9c <HAL_LTDC_ConfigLayer+0x74>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2134      	movs	r1, #52	@ 0x34
 8005a58:	fb01 f303 	mul.w	r3, r1, r3
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	4614      	mov	r4, r2
 8005a66:	461d      	mov	r5, r3
 8005a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 f811 	bl	8005aa4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2201      	movs	r2, #1
 8005a88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bdb0      	pop	{r4, r5, r7, pc}

08005aa4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b089      	sub	sp, #36	@ 0x24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	0c1b      	lsrs	r3, r3, #16
 8005abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ac0:	4413      	add	r3, r2
 8005ac2:	041b      	lsls	r3, r3, #16
 8005ac4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	01db      	lsls	r3, r3, #7
 8005ad0:	4413      	add	r3, r2
 8005ad2:	3384      	adds	r3, #132	@ 0x84
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	6812      	ldr	r2, [r2, #0]
 8005ada:	4611      	mov	r1, r2
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	01d2      	lsls	r2, r2, #7
 8005ae0:	440a      	add	r2, r1
 8005ae2:	3284      	adds	r2, #132	@ 0x84
 8005ae4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005ae8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	0c1b      	lsrs	r3, r3, #16
 8005af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005afa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005afc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4619      	mov	r1, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	01db      	lsls	r3, r3, #7
 8005b08:	440b      	add	r3, r1
 8005b0a:	3384      	adds	r3, #132	@ 0x84
 8005b0c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b12:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b22:	4413      	add	r3, r2
 8005b24:	041b      	lsls	r3, r3, #16
 8005b26:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	01db      	lsls	r3, r3, #7
 8005b32:	4413      	add	r3, r2
 8005b34:	3384      	adds	r3, #132	@ 0x84
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	6812      	ldr	r2, [r2, #0]
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	01d2      	lsls	r2, r2, #7
 8005b42:	440a      	add	r2, r1
 8005b44:	3284      	adds	r2, #132	@ 0x84
 8005b46:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005b4a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b5a:	4413      	add	r3, r2
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4619      	mov	r1, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	01db      	lsls	r3, r3, #7
 8005b68:	440b      	add	r3, r1
 8005b6a:	3384      	adds	r3, #132	@ 0x84
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	01db      	lsls	r3, r3, #7
 8005b7e:	4413      	add	r3, r2
 8005b80:	3384      	adds	r3, #132	@ 0x84
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	6812      	ldr	r2, [r2, #0]
 8005b88:	4611      	mov	r1, r2
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	01d2      	lsls	r2, r2, #7
 8005b8e:	440a      	add	r2, r1
 8005b90:	3284      	adds	r2, #132	@ 0x84
 8005b92:	f023 0307 	bic.w	r3, r3, #7
 8005b96:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	01db      	lsls	r3, r3, #7
 8005ba2:	4413      	add	r3, r2
 8005ba4:	3384      	adds	r3, #132	@ 0x84
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005bbe:	041b      	lsls	r3, r3, #16
 8005bc0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	061b      	lsls	r3, r3, #24
 8005bc8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	01db      	lsls	r3, r3, #7
 8005bd4:	4413      	add	r3, r2
 8005bd6:	3384      	adds	r3, #132	@ 0x84
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	01db      	lsls	r3, r3, #7
 8005be4:	4413      	add	r3, r2
 8005be6:	3384      	adds	r3, #132	@ 0x84
 8005be8:	461a      	mov	r2, r3
 8005bea:	2300      	movs	r3, #0
 8005bec:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4619      	mov	r1, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	01db      	lsls	r3, r3, #7
 8005c08:	440b      	add	r3, r1
 8005c0a:	3384      	adds	r3, #132	@ 0x84
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	01db      	lsls	r3, r3, #7
 8005c1e:	4413      	add	r3, r2
 8005c20:	3384      	adds	r3, #132	@ 0x84
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	6812      	ldr	r2, [r2, #0]
 8005c28:	4611      	mov	r1, r2
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	01d2      	lsls	r2, r2, #7
 8005c2e:	440a      	add	r2, r1
 8005c30:	3284      	adds	r2, #132	@ 0x84
 8005c32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005c36:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	01db      	lsls	r3, r3, #7
 8005c42:	4413      	add	r3, r2
 8005c44:	3384      	adds	r3, #132	@ 0x84
 8005c46:	461a      	mov	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	01db      	lsls	r3, r3, #7
 8005c58:	4413      	add	r3, r2
 8005c5a:	3384      	adds	r3, #132	@ 0x84
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	6812      	ldr	r2, [r2, #0]
 8005c62:	4611      	mov	r1, r2
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	01d2      	lsls	r2, r2, #7
 8005c68:	440a      	add	r2, r1
 8005c6a:	3284      	adds	r2, #132	@ 0x84
 8005c6c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005c70:	f023 0307 	bic.w	r3, r3, #7
 8005c74:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	69da      	ldr	r2, [r3, #28]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	68f9      	ldr	r1, [r7, #12]
 8005c80:	6809      	ldr	r1, [r1, #0]
 8005c82:	4608      	mov	r0, r1
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	01c9      	lsls	r1, r1, #7
 8005c88:	4401      	add	r1, r0
 8005c8a:	3184      	adds	r1, #132	@ 0x84
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	461a      	mov	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	01db      	lsls	r3, r3, #7
 8005c9a:	4413      	add	r3, r2
 8005c9c:	3384      	adds	r3, #132	@ 0x84
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	01db      	lsls	r3, r3, #7
 8005caa:	4413      	add	r3, r2
 8005cac:	3384      	adds	r3, #132	@ 0x84
 8005cae:	461a      	mov	r2, r3
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	01db      	lsls	r3, r3, #7
 8005cbe:	4413      	add	r3, r2
 8005cc0:	3384      	adds	r3, #132	@ 0x84
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d102      	bne.n	8005cd8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005cd2:	2304      	movs	r3, #4
 8005cd4:	61fb      	str	r3, [r7, #28]
 8005cd6:	e01b      	b.n	8005d10 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d102      	bne.n	8005ce6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	61fb      	str	r3, [r7, #28]
 8005ce4:	e014      	b.n	8005d10 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d00b      	beq.n	8005d06 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d007      	beq.n	8005d06 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d003      	beq.n	8005d06 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005d02:	2b07      	cmp	r3, #7
 8005d04:	d102      	bne.n	8005d0c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005d06:	2302      	movs	r3, #2
 8005d08:	61fb      	str	r3, [r7, #28]
 8005d0a:	e001      	b.n	8005d10 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	01db      	lsls	r3, r3, #7
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3384      	adds	r3, #132	@ 0x84
 8005d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	6812      	ldr	r2, [r2, #0]
 8005d24:	4611      	mov	r1, r2
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	01d2      	lsls	r2, r2, #7
 8005d2a:	440a      	add	r2, r1
 8005d2c:	3284      	adds	r2, #132	@ 0x84
 8005d2e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005d32:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	fb02 f303 	mul.w	r3, r2, r3
 8005d3e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	6859      	ldr	r1, [r3, #4]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	1acb      	subs	r3, r1, r3
 8005d4a:	69f9      	ldr	r1, [r7, #28]
 8005d4c:	fb01 f303 	mul.w	r3, r1, r3
 8005d50:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005d52:	68f9      	ldr	r1, [r7, #12]
 8005d54:	6809      	ldr	r1, [r1, #0]
 8005d56:	4608      	mov	r0, r1
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	01c9      	lsls	r1, r1, #7
 8005d5c:	4401      	add	r1, r0
 8005d5e:	3184      	adds	r1, #132	@ 0x84
 8005d60:	4313      	orrs	r3, r2
 8005d62:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	01db      	lsls	r3, r3, #7
 8005d6e:	4413      	add	r3, r2
 8005d70:	3384      	adds	r3, #132	@ 0x84
 8005d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	6812      	ldr	r2, [r2, #0]
 8005d78:	4611      	mov	r1, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	01d2      	lsls	r2, r2, #7
 8005d7e:	440a      	add	r2, r1
 8005d80:	3284      	adds	r2, #132	@ 0x84
 8005d82:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005d86:	f023 0307 	bic.w	r3, r3, #7
 8005d8a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	461a      	mov	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	01db      	lsls	r3, r3, #7
 8005d96:	4413      	add	r3, r2
 8005d98:	3384      	adds	r3, #132	@ 0x84
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	01db      	lsls	r3, r3, #7
 8005dac:	4413      	add	r3, r2
 8005dae:	3384      	adds	r3, #132	@ 0x84
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	6812      	ldr	r2, [r2, #0]
 8005db6:	4611      	mov	r1, r2
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	01d2      	lsls	r2, r2, #7
 8005dbc:	440a      	add	r2, r1
 8005dbe:	3284      	adds	r2, #132	@ 0x84
 8005dc0:	f043 0301 	orr.w	r3, r3, #1
 8005dc4:	6013      	str	r3, [r2, #0]
}
 8005dc6:	bf00      	nop
 8005dc8:	3724      	adds	r7, #36	@ 0x24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
	...

08005dd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e267      	b.n	80062b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d075      	beq.n	8005ede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005df2:	4b88      	ldr	r3, [pc, #544]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 030c 	and.w	r3, r3, #12
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d00c      	beq.n	8005e18 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dfe:	4b85      	ldr	r3, [pc, #532]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e06:	2b08      	cmp	r3, #8
 8005e08:	d112      	bne.n	8005e30 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e0a:	4b82      	ldr	r3, [pc, #520]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e16:	d10b      	bne.n	8005e30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e18:	4b7e      	ldr	r3, [pc, #504]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d05b      	beq.n	8005edc <HAL_RCC_OscConfig+0x108>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d157      	bne.n	8005edc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e242      	b.n	80062b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e38:	d106      	bne.n	8005e48 <HAL_RCC_OscConfig+0x74>
 8005e3a:	4b76      	ldr	r3, [pc, #472]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a75      	ldr	r2, [pc, #468]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	e01d      	b.n	8005e84 <HAL_RCC_OscConfig+0xb0>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e50:	d10c      	bne.n	8005e6c <HAL_RCC_OscConfig+0x98>
 8005e52:	4b70      	ldr	r3, [pc, #448]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a6f      	ldr	r2, [pc, #444]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005e58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	4b6d      	ldr	r3, [pc, #436]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a6c      	ldr	r2, [pc, #432]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	e00b      	b.n	8005e84 <HAL_RCC_OscConfig+0xb0>
 8005e6c:	4b69      	ldr	r3, [pc, #420]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a68      	ldr	r2, [pc, #416]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005e72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	4b66      	ldr	r3, [pc, #408]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a65      	ldr	r2, [pc, #404]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005e7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d013      	beq.n	8005eb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e8c:	f7fd ffea 	bl	8003e64 <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e94:	f7fd ffe6 	bl	8003e64 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b64      	cmp	r3, #100	@ 0x64
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e207      	b.n	80062b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea6:	4b5b      	ldr	r3, [pc, #364]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0f0      	beq.n	8005e94 <HAL_RCC_OscConfig+0xc0>
 8005eb2:	e014      	b.n	8005ede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb4:	f7fd ffd6 	bl	8003e64 <HAL_GetTick>
 8005eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eba:	e008      	b.n	8005ece <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ebc:	f7fd ffd2 	bl	8003e64 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b64      	cmp	r3, #100	@ 0x64
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e1f3      	b.n	80062b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ece:	4b51      	ldr	r3, [pc, #324]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1f0      	bne.n	8005ebc <HAL_RCC_OscConfig+0xe8>
 8005eda:	e000      	b.n	8005ede <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d063      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005eea:	4b4a      	ldr	r3, [pc, #296]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 030c 	and.w	r3, r3, #12
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00b      	beq.n	8005f0e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ef6:	4b47      	ldr	r3, [pc, #284]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005efe:	2b08      	cmp	r3, #8
 8005f00:	d11c      	bne.n	8005f3c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f02:	4b44      	ldr	r3, [pc, #272]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d116      	bne.n	8005f3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f0e:	4b41      	ldr	r3, [pc, #260]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d005      	beq.n	8005f26 <HAL_RCC_OscConfig+0x152>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d001      	beq.n	8005f26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e1c7      	b.n	80062b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f26:	4b3b      	ldr	r3, [pc, #236]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	4937      	ldr	r1, [pc, #220]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f3a:	e03a      	b.n	8005fb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d020      	beq.n	8005f86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f44:	4b34      	ldr	r3, [pc, #208]	@ (8006018 <HAL_RCC_OscConfig+0x244>)
 8005f46:	2201      	movs	r2, #1
 8005f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4a:	f7fd ff8b 	bl	8003e64 <HAL_GetTick>
 8005f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f50:	e008      	b.n	8005f64 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f52:	f7fd ff87 	bl	8003e64 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e1a8      	b.n	80062b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f64:	4b2b      	ldr	r3, [pc, #172]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0f0      	beq.n	8005f52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f70:	4b28      	ldr	r3, [pc, #160]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	4925      	ldr	r1, [pc, #148]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	600b      	str	r3, [r1, #0]
 8005f84:	e015      	b.n	8005fb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f86:	4b24      	ldr	r3, [pc, #144]	@ (8006018 <HAL_RCC_OscConfig+0x244>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8c:	f7fd ff6a 	bl	8003e64 <HAL_GetTick>
 8005f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f94:	f7fd ff66 	bl	8003e64 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e187      	b.n	80062b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f0      	bne.n	8005f94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0308 	and.w	r3, r3, #8
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d036      	beq.n	800602c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d016      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fc6:	4b15      	ldr	r3, [pc, #84]	@ (800601c <HAL_RCC_OscConfig+0x248>)
 8005fc8:	2201      	movs	r2, #1
 8005fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fcc:	f7fd ff4a 	bl	8003e64 <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fd4:	f7fd ff46 	bl	8003e64 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e167      	b.n	80062b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8006014 <HAL_RCC_OscConfig+0x240>)
 8005fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0f0      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x200>
 8005ff2:	e01b      	b.n	800602c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ff4:	4b09      	ldr	r3, [pc, #36]	@ (800601c <HAL_RCC_OscConfig+0x248>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ffa:	f7fd ff33 	bl	8003e64 <HAL_GetTick>
 8005ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006000:	e00e      	b.n	8006020 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006002:	f7fd ff2f 	bl	8003e64 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2b02      	cmp	r3, #2
 800600e:	d907      	bls.n	8006020 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e150      	b.n	80062b6 <HAL_RCC_OscConfig+0x4e2>
 8006014:	40023800 	.word	0x40023800
 8006018:	42470000 	.word	0x42470000
 800601c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006020:	4b88      	ldr	r3, [pc, #544]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 8006022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1ea      	bne.n	8006002 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8097 	beq.w	8006168 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800603a:	2300      	movs	r3, #0
 800603c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800603e:	4b81      	ldr	r3, [pc, #516]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 8006040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10f      	bne.n	800606a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800604a:	2300      	movs	r3, #0
 800604c:	60bb      	str	r3, [r7, #8]
 800604e:	4b7d      	ldr	r3, [pc, #500]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 8006050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006052:	4a7c      	ldr	r2, [pc, #496]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 8006054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006058:	6413      	str	r3, [r2, #64]	@ 0x40
 800605a:	4b7a      	ldr	r3, [pc, #488]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 800605c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006062:	60bb      	str	r3, [r7, #8]
 8006064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006066:	2301      	movs	r3, #1
 8006068:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800606a:	4b77      	ldr	r3, [pc, #476]	@ (8006248 <HAL_RCC_OscConfig+0x474>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006072:	2b00      	cmp	r3, #0
 8006074:	d118      	bne.n	80060a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006076:	4b74      	ldr	r3, [pc, #464]	@ (8006248 <HAL_RCC_OscConfig+0x474>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a73      	ldr	r2, [pc, #460]	@ (8006248 <HAL_RCC_OscConfig+0x474>)
 800607c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006082:	f7fd feef 	bl	8003e64 <HAL_GetTick>
 8006086:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006088:	e008      	b.n	800609c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800608a:	f7fd feeb 	bl	8003e64 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d901      	bls.n	800609c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e10c      	b.n	80062b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800609c:	4b6a      	ldr	r3, [pc, #424]	@ (8006248 <HAL_RCC_OscConfig+0x474>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d0f0      	beq.n	800608a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d106      	bne.n	80060be <HAL_RCC_OscConfig+0x2ea>
 80060b0:	4b64      	ldr	r3, [pc, #400]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 80060b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b4:	4a63      	ldr	r2, [pc, #396]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 80060b6:	f043 0301 	orr.w	r3, r3, #1
 80060ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80060bc:	e01c      	b.n	80060f8 <HAL_RCC_OscConfig+0x324>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	2b05      	cmp	r3, #5
 80060c4:	d10c      	bne.n	80060e0 <HAL_RCC_OscConfig+0x30c>
 80060c6:	4b5f      	ldr	r3, [pc, #380]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 80060c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ca:	4a5e      	ldr	r2, [pc, #376]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 80060cc:	f043 0304 	orr.w	r3, r3, #4
 80060d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80060d2:	4b5c      	ldr	r3, [pc, #368]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 80060d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d6:	4a5b      	ldr	r2, [pc, #364]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 80060d8:	f043 0301 	orr.w	r3, r3, #1
 80060dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80060de:	e00b      	b.n	80060f8 <HAL_RCC_OscConfig+0x324>
 80060e0:	4b58      	ldr	r3, [pc, #352]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 80060e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e4:	4a57      	ldr	r2, [pc, #348]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 80060e6:	f023 0301 	bic.w	r3, r3, #1
 80060ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ec:	4b55      	ldr	r3, [pc, #340]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 80060ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f0:	4a54      	ldr	r2, [pc, #336]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 80060f2:	f023 0304 	bic.w	r3, r3, #4
 80060f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d015      	beq.n	800612c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006100:	f7fd feb0 	bl	8003e64 <HAL_GetTick>
 8006104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006106:	e00a      	b.n	800611e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006108:	f7fd feac 	bl	8003e64 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006116:	4293      	cmp	r3, r2
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e0cb      	b.n	80062b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800611e:	4b49      	ldr	r3, [pc, #292]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 8006120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d0ee      	beq.n	8006108 <HAL_RCC_OscConfig+0x334>
 800612a:	e014      	b.n	8006156 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800612c:	f7fd fe9a 	bl	8003e64 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006132:	e00a      	b.n	800614a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006134:	f7fd fe96 	bl	8003e64 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006142:	4293      	cmp	r3, r2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e0b5      	b.n	80062b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800614a:	4b3e      	ldr	r3, [pc, #248]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 800614c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1ee      	bne.n	8006134 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006156:	7dfb      	ldrb	r3, [r7, #23]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d105      	bne.n	8006168 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800615c:	4b39      	ldr	r3, [pc, #228]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 800615e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006160:	4a38      	ldr	r2, [pc, #224]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 8006162:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006166:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 80a1 	beq.w	80062b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006172:	4b34      	ldr	r3, [pc, #208]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 030c 	and.w	r3, r3, #12
 800617a:	2b08      	cmp	r3, #8
 800617c:	d05c      	beq.n	8006238 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	2b02      	cmp	r3, #2
 8006184:	d141      	bne.n	800620a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006186:	4b31      	ldr	r3, [pc, #196]	@ (800624c <HAL_RCC_OscConfig+0x478>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800618c:	f7fd fe6a 	bl	8003e64 <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006194:	f7fd fe66 	bl	8003e64 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e087      	b.n	80062b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a6:	4b27      	ldr	r3, [pc, #156]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f0      	bne.n	8006194 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	69da      	ldr	r2, [r3, #28]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c0:	019b      	lsls	r3, r3, #6
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c8:	085b      	lsrs	r3, r3, #1
 80061ca:	3b01      	subs	r3, #1
 80061cc:	041b      	lsls	r3, r3, #16
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d4:	061b      	lsls	r3, r3, #24
 80061d6:	491b      	ldr	r1, [pc, #108]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061dc:	4b1b      	ldr	r3, [pc, #108]	@ (800624c <HAL_RCC_OscConfig+0x478>)
 80061de:	2201      	movs	r2, #1
 80061e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e2:	f7fd fe3f 	bl	8003e64 <HAL_GetTick>
 80061e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061e8:	e008      	b.n	80061fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ea:	f7fd fe3b 	bl	8003e64 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d901      	bls.n	80061fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e05c      	b.n	80062b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061fc:	4b11      	ldr	r3, [pc, #68]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0f0      	beq.n	80061ea <HAL_RCC_OscConfig+0x416>
 8006208:	e054      	b.n	80062b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800620a:	4b10      	ldr	r3, [pc, #64]	@ (800624c <HAL_RCC_OscConfig+0x478>)
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006210:	f7fd fe28 	bl	8003e64 <HAL_GetTick>
 8006214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006216:	e008      	b.n	800622a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006218:	f7fd fe24 	bl	8003e64 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e045      	b.n	80062b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800622a:	4b06      	ldr	r3, [pc, #24]	@ (8006244 <HAL_RCC_OscConfig+0x470>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1f0      	bne.n	8006218 <HAL_RCC_OscConfig+0x444>
 8006236:	e03d      	b.n	80062b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d107      	bne.n	8006250 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e038      	b.n	80062b6 <HAL_RCC_OscConfig+0x4e2>
 8006244:	40023800 	.word	0x40023800
 8006248:	40007000 	.word	0x40007000
 800624c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006250:	4b1b      	ldr	r3, [pc, #108]	@ (80062c0 <HAL_RCC_OscConfig+0x4ec>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d028      	beq.n	80062b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006268:	429a      	cmp	r2, r3
 800626a:	d121      	bne.n	80062b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006276:	429a      	cmp	r2, r3
 8006278:	d11a      	bne.n	80062b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006280:	4013      	ands	r3, r2
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006286:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006288:	4293      	cmp	r3, r2
 800628a:	d111      	bne.n	80062b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006296:	085b      	lsrs	r3, r3, #1
 8006298:	3b01      	subs	r3, #1
 800629a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800629c:	429a      	cmp	r2, r3
 800629e:	d107      	bne.n	80062b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d001      	beq.n	80062b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e000      	b.n	80062b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	40023800 	.word	0x40023800

080062c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e0cc      	b.n	8006472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062d8:	4b68      	ldr	r3, [pc, #416]	@ (800647c <HAL_RCC_ClockConfig+0x1b8>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d90c      	bls.n	8006300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062e6:	4b65      	ldr	r3, [pc, #404]	@ (800647c <HAL_RCC_ClockConfig+0x1b8>)
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ee:	4b63      	ldr	r3, [pc, #396]	@ (800647c <HAL_RCC_ClockConfig+0x1b8>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d001      	beq.n	8006300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e0b8      	b.n	8006472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0302 	and.w	r3, r3, #2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d020      	beq.n	800634e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b00      	cmp	r3, #0
 8006316:	d005      	beq.n	8006324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006318:	4b59      	ldr	r3, [pc, #356]	@ (8006480 <HAL_RCC_ClockConfig+0x1bc>)
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	4a58      	ldr	r2, [pc, #352]	@ (8006480 <HAL_RCC_ClockConfig+0x1bc>)
 800631e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006322:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0308 	and.w	r3, r3, #8
 800632c:	2b00      	cmp	r3, #0
 800632e:	d005      	beq.n	800633c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006330:	4b53      	ldr	r3, [pc, #332]	@ (8006480 <HAL_RCC_ClockConfig+0x1bc>)
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	4a52      	ldr	r2, [pc, #328]	@ (8006480 <HAL_RCC_ClockConfig+0x1bc>)
 8006336:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800633a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800633c:	4b50      	ldr	r3, [pc, #320]	@ (8006480 <HAL_RCC_ClockConfig+0x1bc>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	494d      	ldr	r1, [pc, #308]	@ (8006480 <HAL_RCC_ClockConfig+0x1bc>)
 800634a:	4313      	orrs	r3, r2
 800634c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	d044      	beq.n	80063e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d107      	bne.n	8006372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006362:	4b47      	ldr	r3, [pc, #284]	@ (8006480 <HAL_RCC_ClockConfig+0x1bc>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d119      	bne.n	80063a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e07f      	b.n	8006472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	2b02      	cmp	r3, #2
 8006378:	d003      	beq.n	8006382 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800637e:	2b03      	cmp	r3, #3
 8006380:	d107      	bne.n	8006392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006382:	4b3f      	ldr	r3, [pc, #252]	@ (8006480 <HAL_RCC_ClockConfig+0x1bc>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d109      	bne.n	80063a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e06f      	b.n	8006472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006392:	4b3b      	ldr	r3, [pc, #236]	@ (8006480 <HAL_RCC_ClockConfig+0x1bc>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e067      	b.n	8006472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063a2:	4b37      	ldr	r3, [pc, #220]	@ (8006480 <HAL_RCC_ClockConfig+0x1bc>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f023 0203 	bic.w	r2, r3, #3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	4934      	ldr	r1, [pc, #208]	@ (8006480 <HAL_RCC_ClockConfig+0x1bc>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063b4:	f7fd fd56 	bl	8003e64 <HAL_GetTick>
 80063b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ba:	e00a      	b.n	80063d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063bc:	f7fd fd52 	bl	8003e64 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e04f      	b.n	8006472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063d2:	4b2b      	ldr	r3, [pc, #172]	@ (8006480 <HAL_RCC_ClockConfig+0x1bc>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f003 020c 	and.w	r2, r3, #12
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d1eb      	bne.n	80063bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063e4:	4b25      	ldr	r3, [pc, #148]	@ (800647c <HAL_RCC_ClockConfig+0x1b8>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 030f 	and.w	r3, r3, #15
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d20c      	bcs.n	800640c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063f2:	4b22      	ldr	r3, [pc, #136]	@ (800647c <HAL_RCC_ClockConfig+0x1b8>)
 80063f4:	683a      	ldr	r2, [r7, #0]
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063fa:	4b20      	ldr	r3, [pc, #128]	@ (800647c <HAL_RCC_ClockConfig+0x1b8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	429a      	cmp	r2, r3
 8006406:	d001      	beq.n	800640c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e032      	b.n	8006472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d008      	beq.n	800642a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006418:	4b19      	ldr	r3, [pc, #100]	@ (8006480 <HAL_RCC_ClockConfig+0x1bc>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	4916      	ldr	r1, [pc, #88]	@ (8006480 <HAL_RCC_ClockConfig+0x1bc>)
 8006426:	4313      	orrs	r3, r2
 8006428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0308 	and.w	r3, r3, #8
 8006432:	2b00      	cmp	r3, #0
 8006434:	d009      	beq.n	800644a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006436:	4b12      	ldr	r3, [pc, #72]	@ (8006480 <HAL_RCC_ClockConfig+0x1bc>)
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	490e      	ldr	r1, [pc, #56]	@ (8006480 <HAL_RCC_ClockConfig+0x1bc>)
 8006446:	4313      	orrs	r3, r2
 8006448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800644a:	f000 f821 	bl	8006490 <HAL_RCC_GetSysClockFreq>
 800644e:	4602      	mov	r2, r0
 8006450:	4b0b      	ldr	r3, [pc, #44]	@ (8006480 <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	091b      	lsrs	r3, r3, #4
 8006456:	f003 030f 	and.w	r3, r3, #15
 800645a:	490a      	ldr	r1, [pc, #40]	@ (8006484 <HAL_RCC_ClockConfig+0x1c0>)
 800645c:	5ccb      	ldrb	r3, [r1, r3]
 800645e:	fa22 f303 	lsr.w	r3, r2, r3
 8006462:	4a09      	ldr	r2, [pc, #36]	@ (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 8006464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006466:	4b09      	ldr	r3, [pc, #36]	@ (800648c <HAL_RCC_ClockConfig+0x1c8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4618      	mov	r0, r3
 800646c:	f7fd fcb6 	bl	8003ddc <HAL_InitTick>

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40023c00 	.word	0x40023c00
 8006480:	40023800 	.word	0x40023800
 8006484:	08009a58 	.word	0x08009a58
 8006488:	20000018 	.word	0x20000018
 800648c:	2000001c 	.word	0x2000001c

08006490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006494:	b094      	sub	sp, #80	@ 0x50
 8006496:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064a8:	4b79      	ldr	r3, [pc, #484]	@ (8006690 <HAL_RCC_GetSysClockFreq+0x200>)
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f003 030c 	and.w	r3, r3, #12
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d00d      	beq.n	80064d0 <HAL_RCC_GetSysClockFreq+0x40>
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	f200 80e1 	bhi.w	800667c <HAL_RCC_GetSysClockFreq+0x1ec>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <HAL_RCC_GetSysClockFreq+0x34>
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d003      	beq.n	80064ca <HAL_RCC_GetSysClockFreq+0x3a>
 80064c2:	e0db      	b.n	800667c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064c4:	4b73      	ldr	r3, [pc, #460]	@ (8006694 <HAL_RCC_GetSysClockFreq+0x204>)
 80064c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064c8:	e0db      	b.n	8006682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064ca:	4b73      	ldr	r3, [pc, #460]	@ (8006698 <HAL_RCC_GetSysClockFreq+0x208>)
 80064cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064ce:	e0d8      	b.n	8006682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064d0:	4b6f      	ldr	r3, [pc, #444]	@ (8006690 <HAL_RCC_GetSysClockFreq+0x200>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064da:	4b6d      	ldr	r3, [pc, #436]	@ (8006690 <HAL_RCC_GetSysClockFreq+0x200>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d063      	beq.n	80065ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064e6:	4b6a      	ldr	r3, [pc, #424]	@ (8006690 <HAL_RCC_GetSysClockFreq+0x200>)
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	099b      	lsrs	r3, r3, #6
 80064ec:	2200      	movs	r2, #0
 80064ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80064f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80064fa:	2300      	movs	r3, #0
 80064fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80064fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006502:	4622      	mov	r2, r4
 8006504:	462b      	mov	r3, r5
 8006506:	f04f 0000 	mov.w	r0, #0
 800650a:	f04f 0100 	mov.w	r1, #0
 800650e:	0159      	lsls	r1, r3, #5
 8006510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006514:	0150      	lsls	r0, r2, #5
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	4621      	mov	r1, r4
 800651c:	1a51      	subs	r1, r2, r1
 800651e:	6139      	str	r1, [r7, #16]
 8006520:	4629      	mov	r1, r5
 8006522:	eb63 0301 	sbc.w	r3, r3, r1
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	f04f 0200 	mov.w	r2, #0
 800652c:	f04f 0300 	mov.w	r3, #0
 8006530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006534:	4659      	mov	r1, fp
 8006536:	018b      	lsls	r3, r1, #6
 8006538:	4651      	mov	r1, sl
 800653a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800653e:	4651      	mov	r1, sl
 8006540:	018a      	lsls	r2, r1, #6
 8006542:	4651      	mov	r1, sl
 8006544:	ebb2 0801 	subs.w	r8, r2, r1
 8006548:	4659      	mov	r1, fp
 800654a:	eb63 0901 	sbc.w	r9, r3, r1
 800654e:	f04f 0200 	mov.w	r2, #0
 8006552:	f04f 0300 	mov.w	r3, #0
 8006556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800655a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800655e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006562:	4690      	mov	r8, r2
 8006564:	4699      	mov	r9, r3
 8006566:	4623      	mov	r3, r4
 8006568:	eb18 0303 	adds.w	r3, r8, r3
 800656c:	60bb      	str	r3, [r7, #8]
 800656e:	462b      	mov	r3, r5
 8006570:	eb49 0303 	adc.w	r3, r9, r3
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	f04f 0300 	mov.w	r3, #0
 800657e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006582:	4629      	mov	r1, r5
 8006584:	024b      	lsls	r3, r1, #9
 8006586:	4621      	mov	r1, r4
 8006588:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800658c:	4621      	mov	r1, r4
 800658e:	024a      	lsls	r2, r1, #9
 8006590:	4610      	mov	r0, r2
 8006592:	4619      	mov	r1, r3
 8006594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006596:	2200      	movs	r2, #0
 8006598:	62bb      	str	r3, [r7, #40]	@ 0x28
 800659a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800659c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065a0:	f7fa fa64 	bl	8000a6c <__aeabi_uldivmod>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4613      	mov	r3, r2
 80065aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065ac:	e058      	b.n	8006660 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ae:	4b38      	ldr	r3, [pc, #224]	@ (8006690 <HAL_RCC_GetSysClockFreq+0x200>)
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	099b      	lsrs	r3, r3, #6
 80065b4:	2200      	movs	r2, #0
 80065b6:	4618      	mov	r0, r3
 80065b8:	4611      	mov	r1, r2
 80065ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065be:	623b      	str	r3, [r7, #32]
 80065c0:	2300      	movs	r3, #0
 80065c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80065c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80065c8:	4642      	mov	r2, r8
 80065ca:	464b      	mov	r3, r9
 80065cc:	f04f 0000 	mov.w	r0, #0
 80065d0:	f04f 0100 	mov.w	r1, #0
 80065d4:	0159      	lsls	r1, r3, #5
 80065d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065da:	0150      	lsls	r0, r2, #5
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4641      	mov	r1, r8
 80065e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80065e6:	4649      	mov	r1, r9
 80065e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	f04f 0300 	mov.w	r3, #0
 80065f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80065f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80065fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006600:	ebb2 040a 	subs.w	r4, r2, sl
 8006604:	eb63 050b 	sbc.w	r5, r3, fp
 8006608:	f04f 0200 	mov.w	r2, #0
 800660c:	f04f 0300 	mov.w	r3, #0
 8006610:	00eb      	lsls	r3, r5, #3
 8006612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006616:	00e2      	lsls	r2, r4, #3
 8006618:	4614      	mov	r4, r2
 800661a:	461d      	mov	r5, r3
 800661c:	4643      	mov	r3, r8
 800661e:	18e3      	adds	r3, r4, r3
 8006620:	603b      	str	r3, [r7, #0]
 8006622:	464b      	mov	r3, r9
 8006624:	eb45 0303 	adc.w	r3, r5, r3
 8006628:	607b      	str	r3, [r7, #4]
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	f04f 0300 	mov.w	r3, #0
 8006632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006636:	4629      	mov	r1, r5
 8006638:	028b      	lsls	r3, r1, #10
 800663a:	4621      	mov	r1, r4
 800663c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006640:	4621      	mov	r1, r4
 8006642:	028a      	lsls	r2, r1, #10
 8006644:	4610      	mov	r0, r2
 8006646:	4619      	mov	r1, r3
 8006648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800664a:	2200      	movs	r2, #0
 800664c:	61bb      	str	r3, [r7, #24]
 800664e:	61fa      	str	r2, [r7, #28]
 8006650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006654:	f7fa fa0a 	bl	8000a6c <__aeabi_uldivmod>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4613      	mov	r3, r2
 800665e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006660:	4b0b      	ldr	r3, [pc, #44]	@ (8006690 <HAL_RCC_GetSysClockFreq+0x200>)
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	0c1b      	lsrs	r3, r3, #16
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	3301      	adds	r3, #1
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006670:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006674:	fbb2 f3f3 	udiv	r3, r2, r3
 8006678:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800667a:	e002      	b.n	8006682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800667c:	4b05      	ldr	r3, [pc, #20]	@ (8006694 <HAL_RCC_GetSysClockFreq+0x204>)
 800667e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006684:	4618      	mov	r0, r3
 8006686:	3750      	adds	r7, #80	@ 0x50
 8006688:	46bd      	mov	sp, r7
 800668a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800668e:	bf00      	nop
 8006690:	40023800 	.word	0x40023800
 8006694:	00f42400 	.word	0x00f42400
 8006698:	007a1200 	.word	0x007a1200

0800669c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066a0:	4b03      	ldr	r3, [pc, #12]	@ (80066b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80066a2:	681b      	ldr	r3, [r3, #0]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	20000018 	.word	0x20000018

080066b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066b8:	f7ff fff0 	bl	800669c <HAL_RCC_GetHCLKFreq>
 80066bc:	4602      	mov	r2, r0
 80066be:	4b05      	ldr	r3, [pc, #20]	@ (80066d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	0a9b      	lsrs	r3, r3, #10
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	4903      	ldr	r1, [pc, #12]	@ (80066d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066ca:	5ccb      	ldrb	r3, [r1, r3]
 80066cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40023800 	.word	0x40023800
 80066d8:	08009a68 	.word	0x08009a68

080066dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10b      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006700:	2b00      	cmp	r3, #0
 8006702:	d105      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800670c:	2b00      	cmp	r3, #0
 800670e:	d075      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006710:	4b91      	ldr	r3, [pc, #580]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006716:	f7fd fba5 	bl	8003e64 <HAL_GetTick>
 800671a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800671c:	e008      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800671e:	f7fd fba1 	bl	8003e64 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d901      	bls.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e189      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006730:	4b8a      	ldr	r3, [pc, #552]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1f0      	bne.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d009      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	019a      	lsls	r2, r3, #6
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	071b      	lsls	r3, r3, #28
 8006754:	4981      	ldr	r1, [pc, #516]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006756:	4313      	orrs	r3, r2
 8006758:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d01f      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006768:	4b7c      	ldr	r3, [pc, #496]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800676a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800676e:	0f1b      	lsrs	r3, r3, #28
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	019a      	lsls	r2, r3, #6
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	061b      	lsls	r3, r3, #24
 8006782:	431a      	orrs	r2, r3
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	071b      	lsls	r3, r3, #28
 8006788:	4974      	ldr	r1, [pc, #464]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800678a:	4313      	orrs	r3, r2
 800678c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006790:	4b72      	ldr	r3, [pc, #456]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006792:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006796:	f023 021f 	bic.w	r2, r3, #31
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	3b01      	subs	r3, #1
 80067a0:	496e      	ldr	r1, [pc, #440]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00d      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	019a      	lsls	r2, r3, #6
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	061b      	lsls	r3, r3, #24
 80067c0:	431a      	orrs	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	071b      	lsls	r3, r3, #28
 80067c8:	4964      	ldr	r1, [pc, #400]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067d0:	4b61      	ldr	r3, [pc, #388]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80067d2:	2201      	movs	r2, #1
 80067d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067d6:	f7fd fb45 	bl	8003e64 <HAL_GetTick>
 80067da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067dc:	e008      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067de:	f7fd fb41 	bl	8003e64 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e129      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067f0:	4b5a      	ldr	r3, [pc, #360]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d0f0      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d105      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006810:	2b00      	cmp	r3, #0
 8006812:	d079      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006814:	4b52      	ldr	r3, [pc, #328]	@ (8006960 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006816:	2200      	movs	r2, #0
 8006818:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800681a:	f7fd fb23 	bl	8003e64 <HAL_GetTick>
 800681e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006820:	e008      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006822:	f7fd fb1f 	bl	8003e64 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e107      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006834:	4b49      	ldr	r3, [pc, #292]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800683c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006840:	d0ef      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0304 	and.w	r3, r3, #4
 800684a:	2b00      	cmp	r3, #0
 800684c:	d020      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800684e:	4b43      	ldr	r3, [pc, #268]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006854:	0f1b      	lsrs	r3, r3, #28
 8006856:	f003 0307 	and.w	r3, r3, #7
 800685a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	019a      	lsls	r2, r3, #6
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	061b      	lsls	r3, r3, #24
 8006868:	431a      	orrs	r2, r3
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	071b      	lsls	r3, r3, #28
 800686e:	493b      	ldr	r1, [pc, #236]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006870:	4313      	orrs	r3, r2
 8006872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006876:	4b39      	ldr	r3, [pc, #228]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800687c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	3b01      	subs	r3, #1
 8006886:	021b      	lsls	r3, r3, #8
 8006888:	4934      	ldr	r1, [pc, #208]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800688a:	4313      	orrs	r3, r2
 800688c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b00      	cmp	r3, #0
 800689a:	d01e      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800689c:	4b2f      	ldr	r3, [pc, #188]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800689e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a2:	0e1b      	lsrs	r3, r3, #24
 80068a4:	f003 030f 	and.w	r3, r3, #15
 80068a8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	019a      	lsls	r2, r3, #6
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	061b      	lsls	r3, r3, #24
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	071b      	lsls	r3, r3, #28
 80068bc:	4927      	ldr	r1, [pc, #156]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80068c4:	4b25      	ldr	r3, [pc, #148]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d2:	4922      	ldr	r1, [pc, #136]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80068da:	4b21      	ldr	r3, [pc, #132]	@ (8006960 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80068dc:	2201      	movs	r2, #1
 80068de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068e0:	f7fd fac0 	bl	8003e64 <HAL_GetTick>
 80068e4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068e6:	e008      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068e8:	f7fd fabc 	bl	8003e64 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d901      	bls.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e0a4      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068fa:	4b18      	ldr	r3, [pc, #96]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006902:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006906:	d1ef      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 808b 	beq.w	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	4b10      	ldr	r3, [pc, #64]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800691c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691e:	4a0f      	ldr	r2, [pc, #60]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006924:	6413      	str	r3, [r2, #64]	@ 0x40
 8006926:	4b0d      	ldr	r3, [pc, #52]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006932:	4b0c      	ldr	r3, [pc, #48]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a0b      	ldr	r2, [pc, #44]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800693c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800693e:	f7fd fa91 	bl	8003e64 <HAL_GetTick>
 8006942:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006944:	e010      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006946:	f7fd fa8d 	bl	8003e64 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	2b02      	cmp	r3, #2
 8006952:	d909      	bls.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e075      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006958:	42470068 	.word	0x42470068
 800695c:	40023800 	.word	0x40023800
 8006960:	42470070 	.word	0x42470070
 8006964:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006968:	4b38      	ldr	r3, [pc, #224]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0e8      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006974:	4b36      	ldr	r3, [pc, #216]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006978:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800697c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d02f      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006988:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	429a      	cmp	r2, r3
 8006990:	d028      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006992:	4b2f      	ldr	r3, [pc, #188]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006996:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800699a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800699c:	4b2d      	ldr	r3, [pc, #180]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800699e:	2201      	movs	r2, #1
 80069a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069a2:	4b2c      	ldr	r3, [pc, #176]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80069a8:	4a29      	ldr	r2, [pc, #164]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069ae:	4b28      	ldr	r3, [pc, #160]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d114      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80069ba:	f7fd fa53 	bl	8003e64 <HAL_GetTick>
 80069be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069c0:	e00a      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069c2:	f7fd fa4f 	bl	8003e64 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e035      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0ee      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069f0:	d10d      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x332>
 80069f2:	4b17      	ldr	r3, [pc, #92]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006a02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a06:	4912      	ldr	r1, [pc, #72]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	608b      	str	r3, [r1, #8]
 8006a0c:	e005      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006a0e:	4b10      	ldr	r3, [pc, #64]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	4a0f      	ldr	r2, [pc, #60]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a14:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006a18:	6093      	str	r3, [r2, #8]
 8006a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a1c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a26:	490a      	ldr	r1, [pc, #40]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0310 	and.w	r3, r3, #16
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d004      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006a3e:	4b06      	ldr	r3, [pc, #24]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006a40:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	40007000 	.word	0x40007000
 8006a50:	40023800 	.word	0x40023800
 8006a54:	42470e40 	.word	0x42470e40
 8006a58:	424711e0 	.word	0x424711e0

08006a5c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e01c      	b.n	8006aa8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	795b      	ldrb	r3, [r3, #5]
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d105      	bne.n	8006a84 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7fc fcf0 	bl	8003464 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f042 0204 	orr.w	r2, r2, #4
 8006a98:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e07b      	b.n	8006bba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d108      	bne.n	8006adc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ad2:	d009      	beq.n	8006ae8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	61da      	str	r2, [r3, #28]
 8006ada:	e005      	b.n	8006ae8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d106      	bne.n	8006b08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7fc fcd0 	bl	80034a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b30:	431a      	orrs	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b6c:	ea42 0103 	orr.w	r1, r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	0c1b      	lsrs	r3, r3, #16
 8006b86:	f003 0104 	and.w	r1, r3, #4
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8e:	f003 0210 	and.w	r2, r3, #16
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69da      	ldr	r2, [r3, #28]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ba8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b082      	sub	sp, #8
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e01a      	b.n	8006c0a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bea:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7fc fca3 	bl	8003538 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b088      	sub	sp, #32
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	60f8      	str	r0, [r7, #12]
 8006c1a:	60b9      	str	r1, [r7, #8]
 8006c1c:	603b      	str	r3, [r7, #0]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c22:	f7fd f91f 	bl	8003e64 <HAL_GetTick>
 8006c26:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006c28:	88fb      	ldrh	r3, [r7, #6]
 8006c2a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d001      	beq.n	8006c3c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e12a      	b.n	8006e92 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d002      	beq.n	8006c48 <HAL_SPI_Transmit+0x36>
 8006c42:	88fb      	ldrh	r3, [r7, #6]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e122      	b.n	8006e92 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_SPI_Transmit+0x48>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e11b      	b.n	8006e92 <HAL_SPI_Transmit+0x280>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2203      	movs	r2, #3
 8006c66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	88fa      	ldrh	r2, [r7, #6]
 8006c7a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	88fa      	ldrh	r2, [r7, #6]
 8006c80:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ca8:	d10f      	bne.n	8006cca <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd4:	2b40      	cmp	r3, #64	@ 0x40
 8006cd6:	d007      	beq.n	8006ce8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ce6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cf0:	d152      	bne.n	8006d98 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d002      	beq.n	8006d00 <HAL_SPI_Transmit+0xee>
 8006cfa:	8b7b      	ldrh	r3, [r7, #26]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d145      	bne.n	8006d8c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d04:	881a      	ldrh	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d10:	1c9a      	adds	r2, r3, #2
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d24:	e032      	b.n	8006d8c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d112      	bne.n	8006d5a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d38:	881a      	ldrh	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d44:	1c9a      	adds	r2, r3, #2
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	3b01      	subs	r3, #1
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006d58:	e018      	b.n	8006d8c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d5a:	f7fd f883 	bl	8003e64 <HAL_GetTick>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d803      	bhi.n	8006d72 <HAL_SPI_Transmit+0x160>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d70:	d102      	bne.n	8006d78 <HAL_SPI_Transmit+0x166>
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d109      	bne.n	8006d8c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e082      	b.n	8006e92 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1c7      	bne.n	8006d26 <HAL_SPI_Transmit+0x114>
 8006d96:	e053      	b.n	8006e40 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <HAL_SPI_Transmit+0x194>
 8006da0:	8b7b      	ldrh	r3, [r7, #26]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d147      	bne.n	8006e36 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	330c      	adds	r3, #12
 8006db0:	7812      	ldrb	r2, [r2, #0]
 8006db2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006dcc:	e033      	b.n	8006e36 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d113      	bne.n	8006e04 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	330c      	adds	r3, #12
 8006de6:	7812      	ldrb	r2, [r2, #0]
 8006de8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006e02:	e018      	b.n	8006e36 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e04:	f7fd f82e 	bl	8003e64 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d803      	bhi.n	8006e1c <HAL_SPI_Transmit+0x20a>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1a:	d102      	bne.n	8006e22 <HAL_SPI_Transmit+0x210>
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d109      	bne.n	8006e36 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e02d      	b.n	8006e92 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1c6      	bne.n	8006dce <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e40:	69fa      	ldr	r2, [r7, #28]
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 f8bf 	bl	8006fc8 <SPI_EndRxTxTransaction>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2220      	movs	r2, #32
 8006e54:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10a      	bne.n	8006e74 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e5e:	2300      	movs	r3, #0
 8006e60:	617b      	str	r3, [r7, #20]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	617b      	str	r3, [r7, #20]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	617b      	str	r3, [r7, #20]
 8006e72:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e000      	b.n	8006e92 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006e90:	2300      	movs	r3, #0
  }
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3720      	adds	r7, #32
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ea8:	b2db      	uxtb	r3, r3
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
	...

08006eb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	603b      	str	r3, [r7, #0]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ec8:	f7fc ffcc 	bl	8003e64 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed0:	1a9b      	subs	r3, r3, r2
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ed8:	f7fc ffc4 	bl	8003e64 <HAL_GetTick>
 8006edc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ede:	4b39      	ldr	r3, [pc, #228]	@ (8006fc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	015b      	lsls	r3, r3, #5
 8006ee4:	0d1b      	lsrs	r3, r3, #20
 8006ee6:	69fa      	ldr	r2, [r7, #28]
 8006ee8:	fb02 f303 	mul.w	r3, r2, r3
 8006eec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eee:	e054      	b.n	8006f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef6:	d050      	beq.n	8006f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ef8:	f7fc ffb4 	bl	8003e64 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d902      	bls.n	8006f0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d13d      	bne.n	8006f8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f26:	d111      	bne.n	8006f4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f30:	d004      	beq.n	8006f3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f3a:	d107      	bne.n	8006f4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f54:	d10f      	bne.n	8006f76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e017      	b.n	8006fba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	bf0c      	ite	eq
 8006faa:	2301      	moveq	r3, #1
 8006fac:	2300      	movne	r3, #0
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	79fb      	ldrb	r3, [r7, #7]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d19b      	bne.n	8006ef0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3720      	adds	r7, #32
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000018 	.word	0x20000018

08006fc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b088      	sub	sp, #32
 8006fcc:	af02      	add	r7, sp, #8
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	2102      	movs	r1, #2
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f7ff ff6a 	bl	8006eb8 <SPI_WaitFlagStateUntilTimeout>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d007      	beq.n	8006ffa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fee:	f043 0220 	orr.w	r2, r3, #32
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e032      	b.n	8007060 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8007068 <SPI_EndRxTxTransaction+0xa0>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800706c <SPI_EndRxTxTransaction+0xa4>)
 8007000:	fba2 2303 	umull	r2, r3, r2, r3
 8007004:	0d5b      	lsrs	r3, r3, #21
 8007006:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800700a:	fb02 f303 	mul.w	r3, r2, r3
 800700e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007018:	d112      	bne.n	8007040 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2200      	movs	r2, #0
 8007022:	2180      	movs	r1, #128	@ 0x80
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff ff47 	bl	8006eb8 <SPI_WaitFlagStateUntilTimeout>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d016      	beq.n	800705e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007034:	f043 0220 	orr.w	r2, r3, #32
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e00f      	b.n	8007060 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00a      	beq.n	800705c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	3b01      	subs	r3, #1
 800704a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007056:	2b80      	cmp	r3, #128	@ 0x80
 8007058:	d0f2      	beq.n	8007040 <SPI_EndRxTxTransaction+0x78>
 800705a:	e000      	b.n	800705e <SPI_EndRxTxTransaction+0x96>
        break;
 800705c:	bf00      	nop
  }

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3718      	adds	r7, #24
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20000018 	.word	0x20000018
 800706c:	165e9f81 	.word	0x165e9f81

08007070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e041      	b.n	8007106 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d106      	bne.n	800709c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7fc fa6c 	bl	8003574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	3304      	adds	r3, #4
 80070ac:	4619      	mov	r1, r3
 80070ae:	4610      	mov	r0, r2
 80070b0:	f000 f8f4 	bl	800729c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007122:	2b01      	cmp	r3, #1
 8007124:	d101      	bne.n	800712a <HAL_TIM_ConfigClockSource+0x1c>
 8007126:	2302      	movs	r3, #2
 8007128:	e0b4      	b.n	8007294 <HAL_TIM_ConfigClockSource+0x186>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2202      	movs	r2, #2
 8007136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007148:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007150:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007162:	d03e      	beq.n	80071e2 <HAL_TIM_ConfigClockSource+0xd4>
 8007164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007168:	f200 8087 	bhi.w	800727a <HAL_TIM_ConfigClockSource+0x16c>
 800716c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007170:	f000 8086 	beq.w	8007280 <HAL_TIM_ConfigClockSource+0x172>
 8007174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007178:	d87f      	bhi.n	800727a <HAL_TIM_ConfigClockSource+0x16c>
 800717a:	2b70      	cmp	r3, #112	@ 0x70
 800717c:	d01a      	beq.n	80071b4 <HAL_TIM_ConfigClockSource+0xa6>
 800717e:	2b70      	cmp	r3, #112	@ 0x70
 8007180:	d87b      	bhi.n	800727a <HAL_TIM_ConfigClockSource+0x16c>
 8007182:	2b60      	cmp	r3, #96	@ 0x60
 8007184:	d050      	beq.n	8007228 <HAL_TIM_ConfigClockSource+0x11a>
 8007186:	2b60      	cmp	r3, #96	@ 0x60
 8007188:	d877      	bhi.n	800727a <HAL_TIM_ConfigClockSource+0x16c>
 800718a:	2b50      	cmp	r3, #80	@ 0x50
 800718c:	d03c      	beq.n	8007208 <HAL_TIM_ConfigClockSource+0xfa>
 800718e:	2b50      	cmp	r3, #80	@ 0x50
 8007190:	d873      	bhi.n	800727a <HAL_TIM_ConfigClockSource+0x16c>
 8007192:	2b40      	cmp	r3, #64	@ 0x40
 8007194:	d058      	beq.n	8007248 <HAL_TIM_ConfigClockSource+0x13a>
 8007196:	2b40      	cmp	r3, #64	@ 0x40
 8007198:	d86f      	bhi.n	800727a <HAL_TIM_ConfigClockSource+0x16c>
 800719a:	2b30      	cmp	r3, #48	@ 0x30
 800719c:	d064      	beq.n	8007268 <HAL_TIM_ConfigClockSource+0x15a>
 800719e:	2b30      	cmp	r3, #48	@ 0x30
 80071a0:	d86b      	bhi.n	800727a <HAL_TIM_ConfigClockSource+0x16c>
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	d060      	beq.n	8007268 <HAL_TIM_ConfigClockSource+0x15a>
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	d867      	bhi.n	800727a <HAL_TIM_ConfigClockSource+0x16c>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d05c      	beq.n	8007268 <HAL_TIM_ConfigClockSource+0x15a>
 80071ae:	2b10      	cmp	r3, #16
 80071b0:	d05a      	beq.n	8007268 <HAL_TIM_ConfigClockSource+0x15a>
 80071b2:	e062      	b.n	800727a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071c4:	f000 f990 	bl	80074e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80071d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	609a      	str	r2, [r3, #8]
      break;
 80071e0:	e04f      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071f2:	f000 f979 	bl	80074e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	689a      	ldr	r2, [r3, #8]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007204:	609a      	str	r2, [r3, #8]
      break;
 8007206:	e03c      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007214:	461a      	mov	r2, r3
 8007216:	f000 f8ed 	bl	80073f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2150      	movs	r1, #80	@ 0x50
 8007220:	4618      	mov	r0, r3
 8007222:	f000 f946 	bl	80074b2 <TIM_ITRx_SetConfig>
      break;
 8007226:	e02c      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007234:	461a      	mov	r2, r3
 8007236:	f000 f90c 	bl	8007452 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2160      	movs	r1, #96	@ 0x60
 8007240:	4618      	mov	r0, r3
 8007242:	f000 f936 	bl	80074b2 <TIM_ITRx_SetConfig>
      break;
 8007246:	e01c      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007254:	461a      	mov	r2, r3
 8007256:	f000 f8cd 	bl	80073f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2140      	movs	r1, #64	@ 0x40
 8007260:	4618      	mov	r0, r3
 8007262:	f000 f926 	bl	80074b2 <TIM_ITRx_SetConfig>
      break;
 8007266:	e00c      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4619      	mov	r1, r3
 8007272:	4610      	mov	r0, r2
 8007274:	f000 f91d 	bl	80074b2 <TIM_ITRx_SetConfig>
      break;
 8007278:	e003      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	73fb      	strb	r3, [r7, #15]
      break;
 800727e:	e000      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007280:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007292:	7bfb      	ldrb	r3, [r7, #15]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a46      	ldr	r2, [pc, #280]	@ (80073c8 <TIM_Base_SetConfig+0x12c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d013      	beq.n	80072dc <TIM_Base_SetConfig+0x40>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ba:	d00f      	beq.n	80072dc <TIM_Base_SetConfig+0x40>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a43      	ldr	r2, [pc, #268]	@ (80073cc <TIM_Base_SetConfig+0x130>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d00b      	beq.n	80072dc <TIM_Base_SetConfig+0x40>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a42      	ldr	r2, [pc, #264]	@ (80073d0 <TIM_Base_SetConfig+0x134>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d007      	beq.n	80072dc <TIM_Base_SetConfig+0x40>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a41      	ldr	r2, [pc, #260]	@ (80073d4 <TIM_Base_SetConfig+0x138>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d003      	beq.n	80072dc <TIM_Base_SetConfig+0x40>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a40      	ldr	r2, [pc, #256]	@ (80073d8 <TIM_Base_SetConfig+0x13c>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d108      	bne.n	80072ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a35      	ldr	r2, [pc, #212]	@ (80073c8 <TIM_Base_SetConfig+0x12c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d02b      	beq.n	800734e <TIM_Base_SetConfig+0xb2>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072fc:	d027      	beq.n	800734e <TIM_Base_SetConfig+0xb2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a32      	ldr	r2, [pc, #200]	@ (80073cc <TIM_Base_SetConfig+0x130>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d023      	beq.n	800734e <TIM_Base_SetConfig+0xb2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a31      	ldr	r2, [pc, #196]	@ (80073d0 <TIM_Base_SetConfig+0x134>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d01f      	beq.n	800734e <TIM_Base_SetConfig+0xb2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a30      	ldr	r2, [pc, #192]	@ (80073d4 <TIM_Base_SetConfig+0x138>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d01b      	beq.n	800734e <TIM_Base_SetConfig+0xb2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a2f      	ldr	r2, [pc, #188]	@ (80073d8 <TIM_Base_SetConfig+0x13c>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d017      	beq.n	800734e <TIM_Base_SetConfig+0xb2>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a2e      	ldr	r2, [pc, #184]	@ (80073dc <TIM_Base_SetConfig+0x140>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d013      	beq.n	800734e <TIM_Base_SetConfig+0xb2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a2d      	ldr	r2, [pc, #180]	@ (80073e0 <TIM_Base_SetConfig+0x144>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d00f      	beq.n	800734e <TIM_Base_SetConfig+0xb2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a2c      	ldr	r2, [pc, #176]	@ (80073e4 <TIM_Base_SetConfig+0x148>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d00b      	beq.n	800734e <TIM_Base_SetConfig+0xb2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a2b      	ldr	r2, [pc, #172]	@ (80073e8 <TIM_Base_SetConfig+0x14c>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d007      	beq.n	800734e <TIM_Base_SetConfig+0xb2>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a2a      	ldr	r2, [pc, #168]	@ (80073ec <TIM_Base_SetConfig+0x150>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d003      	beq.n	800734e <TIM_Base_SetConfig+0xb2>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a29      	ldr	r2, [pc, #164]	@ (80073f0 <TIM_Base_SetConfig+0x154>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d108      	bne.n	8007360 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	4313      	orrs	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	4313      	orrs	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	689a      	ldr	r2, [r3, #8]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a10      	ldr	r2, [pc, #64]	@ (80073c8 <TIM_Base_SetConfig+0x12c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d003      	beq.n	8007394 <TIM_Base_SetConfig+0xf8>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a12      	ldr	r2, [pc, #72]	@ (80073d8 <TIM_Base_SetConfig+0x13c>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d103      	bne.n	800739c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	691a      	ldr	r2, [r3, #16]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d105      	bne.n	80073ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	f023 0201 	bic.w	r2, r3, #1
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	611a      	str	r2, [r3, #16]
  }
}
 80073ba:	bf00      	nop
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40010000 	.word	0x40010000
 80073cc:	40000400 	.word	0x40000400
 80073d0:	40000800 	.word	0x40000800
 80073d4:	40000c00 	.word	0x40000c00
 80073d8:	40010400 	.word	0x40010400
 80073dc:	40014000 	.word	0x40014000
 80073e0:	40014400 	.word	0x40014400
 80073e4:	40014800 	.word	0x40014800
 80073e8:	40001800 	.word	0x40001800
 80073ec:	40001c00 	.word	0x40001c00
 80073f0:	40002000 	.word	0x40002000

080073f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	f023 0201 	bic.w	r2, r3, #1
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800741e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	011b      	lsls	r3, r3, #4
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	4313      	orrs	r3, r2
 8007428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f023 030a 	bic.w	r3, r3, #10
 8007430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	4313      	orrs	r3, r2
 8007438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	621a      	str	r2, [r3, #32]
}
 8007446:	bf00      	nop
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007452:	b480      	push	{r7}
 8007454:	b087      	sub	sp, #28
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	f023 0210 	bic.w	r2, r3, #16
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800747c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	031b      	lsls	r3, r3, #12
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	4313      	orrs	r3, r2
 8007486:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800748e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	4313      	orrs	r3, r2
 8007498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	621a      	str	r2, [r3, #32]
}
 80074a6:	bf00      	nop
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	f043 0307 	orr.w	r3, r3, #7
 80074d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	609a      	str	r2, [r3, #8]
}
 80074dc:	bf00      	nop
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007502:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	021a      	lsls	r2, r3, #8
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	431a      	orrs	r2, r3
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	4313      	orrs	r3, r2
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	4313      	orrs	r3, r2
 8007514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	609a      	str	r2, [r3, #8]
}
 800751c:	bf00      	nop
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007538:	2b01      	cmp	r3, #1
 800753a:	d101      	bne.n	8007540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800753c:	2302      	movs	r3, #2
 800753e:	e05a      	b.n	80075f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	4313      	orrs	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a21      	ldr	r2, [pc, #132]	@ (8007604 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d022      	beq.n	80075ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800758c:	d01d      	beq.n	80075ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a1d      	ldr	r2, [pc, #116]	@ (8007608 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d018      	beq.n	80075ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1b      	ldr	r2, [pc, #108]	@ (800760c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d013      	beq.n	80075ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a1a      	ldr	r2, [pc, #104]	@ (8007610 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d00e      	beq.n	80075ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a18      	ldr	r2, [pc, #96]	@ (8007614 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d009      	beq.n	80075ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a17      	ldr	r2, [pc, #92]	@ (8007618 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d004      	beq.n	80075ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a15      	ldr	r2, [pc, #84]	@ (800761c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d10c      	bne.n	80075e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	4313      	orrs	r3, r2
 80075da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	40010000 	.word	0x40010000
 8007608:	40000400 	.word	0x40000400
 800760c:	40000800 	.word	0x40000800
 8007610:	40000c00 	.word	0x40000c00
 8007614:	40010400 	.word	0x40010400
 8007618:	40014000 	.word	0x40014000
 800761c:	40001800 	.word	0x40001800

08007620 <siprintf>:
 8007620:	b40e      	push	{r1, r2, r3}
 8007622:	b500      	push	{lr}
 8007624:	b09c      	sub	sp, #112	@ 0x70
 8007626:	ab1d      	add	r3, sp, #116	@ 0x74
 8007628:	9002      	str	r0, [sp, #8]
 800762a:	9006      	str	r0, [sp, #24]
 800762c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007630:	4809      	ldr	r0, [pc, #36]	@ (8007658 <siprintf+0x38>)
 8007632:	9107      	str	r1, [sp, #28]
 8007634:	9104      	str	r1, [sp, #16]
 8007636:	4909      	ldr	r1, [pc, #36]	@ (800765c <siprintf+0x3c>)
 8007638:	f853 2b04 	ldr.w	r2, [r3], #4
 800763c:	9105      	str	r1, [sp, #20]
 800763e:	6800      	ldr	r0, [r0, #0]
 8007640:	9301      	str	r3, [sp, #4]
 8007642:	a902      	add	r1, sp, #8
 8007644:	f000 f994 	bl	8007970 <_svfiprintf_r>
 8007648:	9b02      	ldr	r3, [sp, #8]
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
 800764e:	b01c      	add	sp, #112	@ 0x70
 8007650:	f85d eb04 	ldr.w	lr, [sp], #4
 8007654:	b003      	add	sp, #12
 8007656:	4770      	bx	lr
 8007658:	20000024 	.word	0x20000024
 800765c:	ffff0208 	.word	0xffff0208

08007660 <memset>:
 8007660:	4402      	add	r2, r0
 8007662:	4603      	mov	r3, r0
 8007664:	4293      	cmp	r3, r2
 8007666:	d100      	bne.n	800766a <memset+0xa>
 8007668:	4770      	bx	lr
 800766a:	f803 1b01 	strb.w	r1, [r3], #1
 800766e:	e7f9      	b.n	8007664 <memset+0x4>

08007670 <__errno>:
 8007670:	4b01      	ldr	r3, [pc, #4]	@ (8007678 <__errno+0x8>)
 8007672:	6818      	ldr	r0, [r3, #0]
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	20000024 	.word	0x20000024

0800767c <__libc_init_array>:
 800767c:	b570      	push	{r4, r5, r6, lr}
 800767e:	4d0d      	ldr	r5, [pc, #52]	@ (80076b4 <__libc_init_array+0x38>)
 8007680:	4c0d      	ldr	r4, [pc, #52]	@ (80076b8 <__libc_init_array+0x3c>)
 8007682:	1b64      	subs	r4, r4, r5
 8007684:	10a4      	asrs	r4, r4, #2
 8007686:	2600      	movs	r6, #0
 8007688:	42a6      	cmp	r6, r4
 800768a:	d109      	bne.n	80076a0 <__libc_init_array+0x24>
 800768c:	4d0b      	ldr	r5, [pc, #44]	@ (80076bc <__libc_init_array+0x40>)
 800768e:	4c0c      	ldr	r4, [pc, #48]	@ (80076c0 <__libc_init_array+0x44>)
 8007690:	f000 fc66 	bl	8007f60 <_init>
 8007694:	1b64      	subs	r4, r4, r5
 8007696:	10a4      	asrs	r4, r4, #2
 8007698:	2600      	movs	r6, #0
 800769a:	42a6      	cmp	r6, r4
 800769c:	d105      	bne.n	80076aa <__libc_init_array+0x2e>
 800769e:	bd70      	pop	{r4, r5, r6, pc}
 80076a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a4:	4798      	blx	r3
 80076a6:	3601      	adds	r6, #1
 80076a8:	e7ee      	b.n	8007688 <__libc_init_array+0xc>
 80076aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ae:	4798      	blx	r3
 80076b0:	3601      	adds	r6, #1
 80076b2:	e7f2      	b.n	800769a <__libc_init_array+0x1e>
 80076b4:	08009aac 	.word	0x08009aac
 80076b8:	08009aac 	.word	0x08009aac
 80076bc:	08009aac 	.word	0x08009aac
 80076c0:	08009ab0 	.word	0x08009ab0

080076c4 <__retarget_lock_acquire_recursive>:
 80076c4:	4770      	bx	lr

080076c6 <__retarget_lock_release_recursive>:
 80076c6:	4770      	bx	lr

080076c8 <_free_r>:
 80076c8:	b538      	push	{r3, r4, r5, lr}
 80076ca:	4605      	mov	r5, r0
 80076cc:	2900      	cmp	r1, #0
 80076ce:	d041      	beq.n	8007754 <_free_r+0x8c>
 80076d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076d4:	1f0c      	subs	r4, r1, #4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	bfb8      	it	lt
 80076da:	18e4      	addlt	r4, r4, r3
 80076dc:	f000 f8e0 	bl	80078a0 <__malloc_lock>
 80076e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007758 <_free_r+0x90>)
 80076e2:	6813      	ldr	r3, [r2, #0]
 80076e4:	b933      	cbnz	r3, 80076f4 <_free_r+0x2c>
 80076e6:	6063      	str	r3, [r4, #4]
 80076e8:	6014      	str	r4, [r2, #0]
 80076ea:	4628      	mov	r0, r5
 80076ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076f0:	f000 b8dc 	b.w	80078ac <__malloc_unlock>
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	d908      	bls.n	800770a <_free_r+0x42>
 80076f8:	6820      	ldr	r0, [r4, #0]
 80076fa:	1821      	adds	r1, r4, r0
 80076fc:	428b      	cmp	r3, r1
 80076fe:	bf01      	itttt	eq
 8007700:	6819      	ldreq	r1, [r3, #0]
 8007702:	685b      	ldreq	r3, [r3, #4]
 8007704:	1809      	addeq	r1, r1, r0
 8007706:	6021      	streq	r1, [r4, #0]
 8007708:	e7ed      	b.n	80076e6 <_free_r+0x1e>
 800770a:	461a      	mov	r2, r3
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	b10b      	cbz	r3, 8007714 <_free_r+0x4c>
 8007710:	42a3      	cmp	r3, r4
 8007712:	d9fa      	bls.n	800770a <_free_r+0x42>
 8007714:	6811      	ldr	r1, [r2, #0]
 8007716:	1850      	adds	r0, r2, r1
 8007718:	42a0      	cmp	r0, r4
 800771a:	d10b      	bne.n	8007734 <_free_r+0x6c>
 800771c:	6820      	ldr	r0, [r4, #0]
 800771e:	4401      	add	r1, r0
 8007720:	1850      	adds	r0, r2, r1
 8007722:	4283      	cmp	r3, r0
 8007724:	6011      	str	r1, [r2, #0]
 8007726:	d1e0      	bne.n	80076ea <_free_r+0x22>
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	6053      	str	r3, [r2, #4]
 800772e:	4408      	add	r0, r1
 8007730:	6010      	str	r0, [r2, #0]
 8007732:	e7da      	b.n	80076ea <_free_r+0x22>
 8007734:	d902      	bls.n	800773c <_free_r+0x74>
 8007736:	230c      	movs	r3, #12
 8007738:	602b      	str	r3, [r5, #0]
 800773a:	e7d6      	b.n	80076ea <_free_r+0x22>
 800773c:	6820      	ldr	r0, [r4, #0]
 800773e:	1821      	adds	r1, r4, r0
 8007740:	428b      	cmp	r3, r1
 8007742:	bf04      	itt	eq
 8007744:	6819      	ldreq	r1, [r3, #0]
 8007746:	685b      	ldreq	r3, [r3, #4]
 8007748:	6063      	str	r3, [r4, #4]
 800774a:	bf04      	itt	eq
 800774c:	1809      	addeq	r1, r1, r0
 800774e:	6021      	streq	r1, [r4, #0]
 8007750:	6054      	str	r4, [r2, #4]
 8007752:	e7ca      	b.n	80076ea <_free_r+0x22>
 8007754:	bd38      	pop	{r3, r4, r5, pc}
 8007756:	bf00      	nop
 8007758:	20025dbc 	.word	0x20025dbc

0800775c <sbrk_aligned>:
 800775c:	b570      	push	{r4, r5, r6, lr}
 800775e:	4e0f      	ldr	r6, [pc, #60]	@ (800779c <sbrk_aligned+0x40>)
 8007760:	460c      	mov	r4, r1
 8007762:	6831      	ldr	r1, [r6, #0]
 8007764:	4605      	mov	r5, r0
 8007766:	b911      	cbnz	r1, 800776e <sbrk_aligned+0x12>
 8007768:	f000 fba6 	bl	8007eb8 <_sbrk_r>
 800776c:	6030      	str	r0, [r6, #0]
 800776e:	4621      	mov	r1, r4
 8007770:	4628      	mov	r0, r5
 8007772:	f000 fba1 	bl	8007eb8 <_sbrk_r>
 8007776:	1c43      	adds	r3, r0, #1
 8007778:	d103      	bne.n	8007782 <sbrk_aligned+0x26>
 800777a:	f04f 34ff 	mov.w	r4, #4294967295
 800777e:	4620      	mov	r0, r4
 8007780:	bd70      	pop	{r4, r5, r6, pc}
 8007782:	1cc4      	adds	r4, r0, #3
 8007784:	f024 0403 	bic.w	r4, r4, #3
 8007788:	42a0      	cmp	r0, r4
 800778a:	d0f8      	beq.n	800777e <sbrk_aligned+0x22>
 800778c:	1a21      	subs	r1, r4, r0
 800778e:	4628      	mov	r0, r5
 8007790:	f000 fb92 	bl	8007eb8 <_sbrk_r>
 8007794:	3001      	adds	r0, #1
 8007796:	d1f2      	bne.n	800777e <sbrk_aligned+0x22>
 8007798:	e7ef      	b.n	800777a <sbrk_aligned+0x1e>
 800779a:	bf00      	nop
 800779c:	20025db8 	.word	0x20025db8

080077a0 <_malloc_r>:
 80077a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077a4:	1ccd      	adds	r5, r1, #3
 80077a6:	f025 0503 	bic.w	r5, r5, #3
 80077aa:	3508      	adds	r5, #8
 80077ac:	2d0c      	cmp	r5, #12
 80077ae:	bf38      	it	cc
 80077b0:	250c      	movcc	r5, #12
 80077b2:	2d00      	cmp	r5, #0
 80077b4:	4606      	mov	r6, r0
 80077b6:	db01      	blt.n	80077bc <_malloc_r+0x1c>
 80077b8:	42a9      	cmp	r1, r5
 80077ba:	d904      	bls.n	80077c6 <_malloc_r+0x26>
 80077bc:	230c      	movs	r3, #12
 80077be:	6033      	str	r3, [r6, #0]
 80077c0:	2000      	movs	r0, #0
 80077c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800789c <_malloc_r+0xfc>
 80077ca:	f000 f869 	bl	80078a0 <__malloc_lock>
 80077ce:	f8d8 3000 	ldr.w	r3, [r8]
 80077d2:	461c      	mov	r4, r3
 80077d4:	bb44      	cbnz	r4, 8007828 <_malloc_r+0x88>
 80077d6:	4629      	mov	r1, r5
 80077d8:	4630      	mov	r0, r6
 80077da:	f7ff ffbf 	bl	800775c <sbrk_aligned>
 80077de:	1c43      	adds	r3, r0, #1
 80077e0:	4604      	mov	r4, r0
 80077e2:	d158      	bne.n	8007896 <_malloc_r+0xf6>
 80077e4:	f8d8 4000 	ldr.w	r4, [r8]
 80077e8:	4627      	mov	r7, r4
 80077ea:	2f00      	cmp	r7, #0
 80077ec:	d143      	bne.n	8007876 <_malloc_r+0xd6>
 80077ee:	2c00      	cmp	r4, #0
 80077f0:	d04b      	beq.n	800788a <_malloc_r+0xea>
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	4639      	mov	r1, r7
 80077f6:	4630      	mov	r0, r6
 80077f8:	eb04 0903 	add.w	r9, r4, r3
 80077fc:	f000 fb5c 	bl	8007eb8 <_sbrk_r>
 8007800:	4581      	cmp	r9, r0
 8007802:	d142      	bne.n	800788a <_malloc_r+0xea>
 8007804:	6821      	ldr	r1, [r4, #0]
 8007806:	1a6d      	subs	r5, r5, r1
 8007808:	4629      	mov	r1, r5
 800780a:	4630      	mov	r0, r6
 800780c:	f7ff ffa6 	bl	800775c <sbrk_aligned>
 8007810:	3001      	adds	r0, #1
 8007812:	d03a      	beq.n	800788a <_malloc_r+0xea>
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	442b      	add	r3, r5
 8007818:	6023      	str	r3, [r4, #0]
 800781a:	f8d8 3000 	ldr.w	r3, [r8]
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	bb62      	cbnz	r2, 800787c <_malloc_r+0xdc>
 8007822:	f8c8 7000 	str.w	r7, [r8]
 8007826:	e00f      	b.n	8007848 <_malloc_r+0xa8>
 8007828:	6822      	ldr	r2, [r4, #0]
 800782a:	1b52      	subs	r2, r2, r5
 800782c:	d420      	bmi.n	8007870 <_malloc_r+0xd0>
 800782e:	2a0b      	cmp	r2, #11
 8007830:	d917      	bls.n	8007862 <_malloc_r+0xc2>
 8007832:	1961      	adds	r1, r4, r5
 8007834:	42a3      	cmp	r3, r4
 8007836:	6025      	str	r5, [r4, #0]
 8007838:	bf18      	it	ne
 800783a:	6059      	strne	r1, [r3, #4]
 800783c:	6863      	ldr	r3, [r4, #4]
 800783e:	bf08      	it	eq
 8007840:	f8c8 1000 	streq.w	r1, [r8]
 8007844:	5162      	str	r2, [r4, r5]
 8007846:	604b      	str	r3, [r1, #4]
 8007848:	4630      	mov	r0, r6
 800784a:	f000 f82f 	bl	80078ac <__malloc_unlock>
 800784e:	f104 000b 	add.w	r0, r4, #11
 8007852:	1d23      	adds	r3, r4, #4
 8007854:	f020 0007 	bic.w	r0, r0, #7
 8007858:	1ac2      	subs	r2, r0, r3
 800785a:	bf1c      	itt	ne
 800785c:	1a1b      	subne	r3, r3, r0
 800785e:	50a3      	strne	r3, [r4, r2]
 8007860:	e7af      	b.n	80077c2 <_malloc_r+0x22>
 8007862:	6862      	ldr	r2, [r4, #4]
 8007864:	42a3      	cmp	r3, r4
 8007866:	bf0c      	ite	eq
 8007868:	f8c8 2000 	streq.w	r2, [r8]
 800786c:	605a      	strne	r2, [r3, #4]
 800786e:	e7eb      	b.n	8007848 <_malloc_r+0xa8>
 8007870:	4623      	mov	r3, r4
 8007872:	6864      	ldr	r4, [r4, #4]
 8007874:	e7ae      	b.n	80077d4 <_malloc_r+0x34>
 8007876:	463c      	mov	r4, r7
 8007878:	687f      	ldr	r7, [r7, #4]
 800787a:	e7b6      	b.n	80077ea <_malloc_r+0x4a>
 800787c:	461a      	mov	r2, r3
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	42a3      	cmp	r3, r4
 8007882:	d1fb      	bne.n	800787c <_malloc_r+0xdc>
 8007884:	2300      	movs	r3, #0
 8007886:	6053      	str	r3, [r2, #4]
 8007888:	e7de      	b.n	8007848 <_malloc_r+0xa8>
 800788a:	230c      	movs	r3, #12
 800788c:	6033      	str	r3, [r6, #0]
 800788e:	4630      	mov	r0, r6
 8007890:	f000 f80c 	bl	80078ac <__malloc_unlock>
 8007894:	e794      	b.n	80077c0 <_malloc_r+0x20>
 8007896:	6005      	str	r5, [r0, #0]
 8007898:	e7d6      	b.n	8007848 <_malloc_r+0xa8>
 800789a:	bf00      	nop
 800789c:	20025dbc 	.word	0x20025dbc

080078a0 <__malloc_lock>:
 80078a0:	4801      	ldr	r0, [pc, #4]	@ (80078a8 <__malloc_lock+0x8>)
 80078a2:	f7ff bf0f 	b.w	80076c4 <__retarget_lock_acquire_recursive>
 80078a6:	bf00      	nop
 80078a8:	20025db4 	.word	0x20025db4

080078ac <__malloc_unlock>:
 80078ac:	4801      	ldr	r0, [pc, #4]	@ (80078b4 <__malloc_unlock+0x8>)
 80078ae:	f7ff bf0a 	b.w	80076c6 <__retarget_lock_release_recursive>
 80078b2:	bf00      	nop
 80078b4:	20025db4 	.word	0x20025db4

080078b8 <__ssputs_r>:
 80078b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078bc:	688e      	ldr	r6, [r1, #8]
 80078be:	461f      	mov	r7, r3
 80078c0:	42be      	cmp	r6, r7
 80078c2:	680b      	ldr	r3, [r1, #0]
 80078c4:	4682      	mov	sl, r0
 80078c6:	460c      	mov	r4, r1
 80078c8:	4690      	mov	r8, r2
 80078ca:	d82d      	bhi.n	8007928 <__ssputs_r+0x70>
 80078cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80078d4:	d026      	beq.n	8007924 <__ssputs_r+0x6c>
 80078d6:	6965      	ldr	r5, [r4, #20]
 80078d8:	6909      	ldr	r1, [r1, #16]
 80078da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078de:	eba3 0901 	sub.w	r9, r3, r1
 80078e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078e6:	1c7b      	adds	r3, r7, #1
 80078e8:	444b      	add	r3, r9
 80078ea:	106d      	asrs	r5, r5, #1
 80078ec:	429d      	cmp	r5, r3
 80078ee:	bf38      	it	cc
 80078f0:	461d      	movcc	r5, r3
 80078f2:	0553      	lsls	r3, r2, #21
 80078f4:	d527      	bpl.n	8007946 <__ssputs_r+0x8e>
 80078f6:	4629      	mov	r1, r5
 80078f8:	f7ff ff52 	bl	80077a0 <_malloc_r>
 80078fc:	4606      	mov	r6, r0
 80078fe:	b360      	cbz	r0, 800795a <__ssputs_r+0xa2>
 8007900:	6921      	ldr	r1, [r4, #16]
 8007902:	464a      	mov	r2, r9
 8007904:	f000 fae8 	bl	8007ed8 <memcpy>
 8007908:	89a3      	ldrh	r3, [r4, #12]
 800790a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800790e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007912:	81a3      	strh	r3, [r4, #12]
 8007914:	6126      	str	r6, [r4, #16]
 8007916:	6165      	str	r5, [r4, #20]
 8007918:	444e      	add	r6, r9
 800791a:	eba5 0509 	sub.w	r5, r5, r9
 800791e:	6026      	str	r6, [r4, #0]
 8007920:	60a5      	str	r5, [r4, #8]
 8007922:	463e      	mov	r6, r7
 8007924:	42be      	cmp	r6, r7
 8007926:	d900      	bls.n	800792a <__ssputs_r+0x72>
 8007928:	463e      	mov	r6, r7
 800792a:	6820      	ldr	r0, [r4, #0]
 800792c:	4632      	mov	r2, r6
 800792e:	4641      	mov	r1, r8
 8007930:	f000 faa8 	bl	8007e84 <memmove>
 8007934:	68a3      	ldr	r3, [r4, #8]
 8007936:	1b9b      	subs	r3, r3, r6
 8007938:	60a3      	str	r3, [r4, #8]
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	4433      	add	r3, r6
 800793e:	6023      	str	r3, [r4, #0]
 8007940:	2000      	movs	r0, #0
 8007942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007946:	462a      	mov	r2, r5
 8007948:	f000 fad4 	bl	8007ef4 <_realloc_r>
 800794c:	4606      	mov	r6, r0
 800794e:	2800      	cmp	r0, #0
 8007950:	d1e0      	bne.n	8007914 <__ssputs_r+0x5c>
 8007952:	6921      	ldr	r1, [r4, #16]
 8007954:	4650      	mov	r0, sl
 8007956:	f7ff feb7 	bl	80076c8 <_free_r>
 800795a:	230c      	movs	r3, #12
 800795c:	f8ca 3000 	str.w	r3, [sl]
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007966:	81a3      	strh	r3, [r4, #12]
 8007968:	f04f 30ff 	mov.w	r0, #4294967295
 800796c:	e7e9      	b.n	8007942 <__ssputs_r+0x8a>
	...

08007970 <_svfiprintf_r>:
 8007970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007974:	4698      	mov	r8, r3
 8007976:	898b      	ldrh	r3, [r1, #12]
 8007978:	061b      	lsls	r3, r3, #24
 800797a:	b09d      	sub	sp, #116	@ 0x74
 800797c:	4607      	mov	r7, r0
 800797e:	460d      	mov	r5, r1
 8007980:	4614      	mov	r4, r2
 8007982:	d510      	bpl.n	80079a6 <_svfiprintf_r+0x36>
 8007984:	690b      	ldr	r3, [r1, #16]
 8007986:	b973      	cbnz	r3, 80079a6 <_svfiprintf_r+0x36>
 8007988:	2140      	movs	r1, #64	@ 0x40
 800798a:	f7ff ff09 	bl	80077a0 <_malloc_r>
 800798e:	6028      	str	r0, [r5, #0]
 8007990:	6128      	str	r0, [r5, #16]
 8007992:	b930      	cbnz	r0, 80079a2 <_svfiprintf_r+0x32>
 8007994:	230c      	movs	r3, #12
 8007996:	603b      	str	r3, [r7, #0]
 8007998:	f04f 30ff 	mov.w	r0, #4294967295
 800799c:	b01d      	add	sp, #116	@ 0x74
 800799e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a2:	2340      	movs	r3, #64	@ 0x40
 80079a4:	616b      	str	r3, [r5, #20]
 80079a6:	2300      	movs	r3, #0
 80079a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80079aa:	2320      	movs	r3, #32
 80079ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80079b4:	2330      	movs	r3, #48	@ 0x30
 80079b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007b54 <_svfiprintf_r+0x1e4>
 80079ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079be:	f04f 0901 	mov.w	r9, #1
 80079c2:	4623      	mov	r3, r4
 80079c4:	469a      	mov	sl, r3
 80079c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079ca:	b10a      	cbz	r2, 80079d0 <_svfiprintf_r+0x60>
 80079cc:	2a25      	cmp	r2, #37	@ 0x25
 80079ce:	d1f9      	bne.n	80079c4 <_svfiprintf_r+0x54>
 80079d0:	ebba 0b04 	subs.w	fp, sl, r4
 80079d4:	d00b      	beq.n	80079ee <_svfiprintf_r+0x7e>
 80079d6:	465b      	mov	r3, fp
 80079d8:	4622      	mov	r2, r4
 80079da:	4629      	mov	r1, r5
 80079dc:	4638      	mov	r0, r7
 80079de:	f7ff ff6b 	bl	80078b8 <__ssputs_r>
 80079e2:	3001      	adds	r0, #1
 80079e4:	f000 80a7 	beq.w	8007b36 <_svfiprintf_r+0x1c6>
 80079e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079ea:	445a      	add	r2, fp
 80079ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80079ee:	f89a 3000 	ldrb.w	r3, [sl]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f000 809f 	beq.w	8007b36 <_svfiprintf_r+0x1c6>
 80079f8:	2300      	movs	r3, #0
 80079fa:	f04f 32ff 	mov.w	r2, #4294967295
 80079fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a02:	f10a 0a01 	add.w	sl, sl, #1
 8007a06:	9304      	str	r3, [sp, #16]
 8007a08:	9307      	str	r3, [sp, #28]
 8007a0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a10:	4654      	mov	r4, sl
 8007a12:	2205      	movs	r2, #5
 8007a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a18:	484e      	ldr	r0, [pc, #312]	@ (8007b54 <_svfiprintf_r+0x1e4>)
 8007a1a:	f7f8 fbe9 	bl	80001f0 <memchr>
 8007a1e:	9a04      	ldr	r2, [sp, #16]
 8007a20:	b9d8      	cbnz	r0, 8007a5a <_svfiprintf_r+0xea>
 8007a22:	06d0      	lsls	r0, r2, #27
 8007a24:	bf44      	itt	mi
 8007a26:	2320      	movmi	r3, #32
 8007a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a2c:	0711      	lsls	r1, r2, #28
 8007a2e:	bf44      	itt	mi
 8007a30:	232b      	movmi	r3, #43	@ 0x2b
 8007a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a36:	f89a 3000 	ldrb.w	r3, [sl]
 8007a3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a3c:	d015      	beq.n	8007a6a <_svfiprintf_r+0xfa>
 8007a3e:	9a07      	ldr	r2, [sp, #28]
 8007a40:	4654      	mov	r4, sl
 8007a42:	2000      	movs	r0, #0
 8007a44:	f04f 0c0a 	mov.w	ip, #10
 8007a48:	4621      	mov	r1, r4
 8007a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a4e:	3b30      	subs	r3, #48	@ 0x30
 8007a50:	2b09      	cmp	r3, #9
 8007a52:	d94b      	bls.n	8007aec <_svfiprintf_r+0x17c>
 8007a54:	b1b0      	cbz	r0, 8007a84 <_svfiprintf_r+0x114>
 8007a56:	9207      	str	r2, [sp, #28]
 8007a58:	e014      	b.n	8007a84 <_svfiprintf_r+0x114>
 8007a5a:	eba0 0308 	sub.w	r3, r0, r8
 8007a5e:	fa09 f303 	lsl.w	r3, r9, r3
 8007a62:	4313      	orrs	r3, r2
 8007a64:	9304      	str	r3, [sp, #16]
 8007a66:	46a2      	mov	sl, r4
 8007a68:	e7d2      	b.n	8007a10 <_svfiprintf_r+0xa0>
 8007a6a:	9b03      	ldr	r3, [sp, #12]
 8007a6c:	1d19      	adds	r1, r3, #4
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	9103      	str	r1, [sp, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	bfbb      	ittet	lt
 8007a76:	425b      	neglt	r3, r3
 8007a78:	f042 0202 	orrlt.w	r2, r2, #2
 8007a7c:	9307      	strge	r3, [sp, #28]
 8007a7e:	9307      	strlt	r3, [sp, #28]
 8007a80:	bfb8      	it	lt
 8007a82:	9204      	strlt	r2, [sp, #16]
 8007a84:	7823      	ldrb	r3, [r4, #0]
 8007a86:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a88:	d10a      	bne.n	8007aa0 <_svfiprintf_r+0x130>
 8007a8a:	7863      	ldrb	r3, [r4, #1]
 8007a8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a8e:	d132      	bne.n	8007af6 <_svfiprintf_r+0x186>
 8007a90:	9b03      	ldr	r3, [sp, #12]
 8007a92:	1d1a      	adds	r2, r3, #4
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	9203      	str	r2, [sp, #12]
 8007a98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a9c:	3402      	adds	r4, #2
 8007a9e:	9305      	str	r3, [sp, #20]
 8007aa0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b64 <_svfiprintf_r+0x1f4>
 8007aa4:	7821      	ldrb	r1, [r4, #0]
 8007aa6:	2203      	movs	r2, #3
 8007aa8:	4650      	mov	r0, sl
 8007aaa:	f7f8 fba1 	bl	80001f0 <memchr>
 8007aae:	b138      	cbz	r0, 8007ac0 <_svfiprintf_r+0x150>
 8007ab0:	9b04      	ldr	r3, [sp, #16]
 8007ab2:	eba0 000a 	sub.w	r0, r0, sl
 8007ab6:	2240      	movs	r2, #64	@ 0x40
 8007ab8:	4082      	lsls	r2, r0
 8007aba:	4313      	orrs	r3, r2
 8007abc:	3401      	adds	r4, #1
 8007abe:	9304      	str	r3, [sp, #16]
 8007ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ac4:	4824      	ldr	r0, [pc, #144]	@ (8007b58 <_svfiprintf_r+0x1e8>)
 8007ac6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007aca:	2206      	movs	r2, #6
 8007acc:	f7f8 fb90 	bl	80001f0 <memchr>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d036      	beq.n	8007b42 <_svfiprintf_r+0x1d2>
 8007ad4:	4b21      	ldr	r3, [pc, #132]	@ (8007b5c <_svfiprintf_r+0x1ec>)
 8007ad6:	bb1b      	cbnz	r3, 8007b20 <_svfiprintf_r+0x1b0>
 8007ad8:	9b03      	ldr	r3, [sp, #12]
 8007ada:	3307      	adds	r3, #7
 8007adc:	f023 0307 	bic.w	r3, r3, #7
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	9303      	str	r3, [sp, #12]
 8007ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ae6:	4433      	add	r3, r6
 8007ae8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007aea:	e76a      	b.n	80079c2 <_svfiprintf_r+0x52>
 8007aec:	fb0c 3202 	mla	r2, ip, r2, r3
 8007af0:	460c      	mov	r4, r1
 8007af2:	2001      	movs	r0, #1
 8007af4:	e7a8      	b.n	8007a48 <_svfiprintf_r+0xd8>
 8007af6:	2300      	movs	r3, #0
 8007af8:	3401      	adds	r4, #1
 8007afa:	9305      	str	r3, [sp, #20]
 8007afc:	4619      	mov	r1, r3
 8007afe:	f04f 0c0a 	mov.w	ip, #10
 8007b02:	4620      	mov	r0, r4
 8007b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b08:	3a30      	subs	r2, #48	@ 0x30
 8007b0a:	2a09      	cmp	r2, #9
 8007b0c:	d903      	bls.n	8007b16 <_svfiprintf_r+0x1a6>
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d0c6      	beq.n	8007aa0 <_svfiprintf_r+0x130>
 8007b12:	9105      	str	r1, [sp, #20]
 8007b14:	e7c4      	b.n	8007aa0 <_svfiprintf_r+0x130>
 8007b16:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e7f0      	b.n	8007b02 <_svfiprintf_r+0x192>
 8007b20:	ab03      	add	r3, sp, #12
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	462a      	mov	r2, r5
 8007b26:	4b0e      	ldr	r3, [pc, #56]	@ (8007b60 <_svfiprintf_r+0x1f0>)
 8007b28:	a904      	add	r1, sp, #16
 8007b2a:	4638      	mov	r0, r7
 8007b2c:	f3af 8000 	nop.w
 8007b30:	1c42      	adds	r2, r0, #1
 8007b32:	4606      	mov	r6, r0
 8007b34:	d1d6      	bne.n	8007ae4 <_svfiprintf_r+0x174>
 8007b36:	89ab      	ldrh	r3, [r5, #12]
 8007b38:	065b      	lsls	r3, r3, #25
 8007b3a:	f53f af2d 	bmi.w	8007998 <_svfiprintf_r+0x28>
 8007b3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b40:	e72c      	b.n	800799c <_svfiprintf_r+0x2c>
 8007b42:	ab03      	add	r3, sp, #12
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	462a      	mov	r2, r5
 8007b48:	4b05      	ldr	r3, [pc, #20]	@ (8007b60 <_svfiprintf_r+0x1f0>)
 8007b4a:	a904      	add	r1, sp, #16
 8007b4c:	4638      	mov	r0, r7
 8007b4e:	f000 f879 	bl	8007c44 <_printf_i>
 8007b52:	e7ed      	b.n	8007b30 <_svfiprintf_r+0x1c0>
 8007b54:	08009a70 	.word	0x08009a70
 8007b58:	08009a7a 	.word	0x08009a7a
 8007b5c:	00000000 	.word	0x00000000
 8007b60:	080078b9 	.word	0x080078b9
 8007b64:	08009a76 	.word	0x08009a76

08007b68 <_printf_common>:
 8007b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6c:	4616      	mov	r6, r2
 8007b6e:	4698      	mov	r8, r3
 8007b70:	688a      	ldr	r2, [r1, #8]
 8007b72:	690b      	ldr	r3, [r1, #16]
 8007b74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	bfb8      	it	lt
 8007b7c:	4613      	movlt	r3, r2
 8007b7e:	6033      	str	r3, [r6, #0]
 8007b80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b84:	4607      	mov	r7, r0
 8007b86:	460c      	mov	r4, r1
 8007b88:	b10a      	cbz	r2, 8007b8e <_printf_common+0x26>
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	6033      	str	r3, [r6, #0]
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	0699      	lsls	r1, r3, #26
 8007b92:	bf42      	ittt	mi
 8007b94:	6833      	ldrmi	r3, [r6, #0]
 8007b96:	3302      	addmi	r3, #2
 8007b98:	6033      	strmi	r3, [r6, #0]
 8007b9a:	6825      	ldr	r5, [r4, #0]
 8007b9c:	f015 0506 	ands.w	r5, r5, #6
 8007ba0:	d106      	bne.n	8007bb0 <_printf_common+0x48>
 8007ba2:	f104 0a19 	add.w	sl, r4, #25
 8007ba6:	68e3      	ldr	r3, [r4, #12]
 8007ba8:	6832      	ldr	r2, [r6, #0]
 8007baa:	1a9b      	subs	r3, r3, r2
 8007bac:	42ab      	cmp	r3, r5
 8007bae:	dc26      	bgt.n	8007bfe <_printf_common+0x96>
 8007bb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007bb4:	6822      	ldr	r2, [r4, #0]
 8007bb6:	3b00      	subs	r3, #0
 8007bb8:	bf18      	it	ne
 8007bba:	2301      	movne	r3, #1
 8007bbc:	0692      	lsls	r2, r2, #26
 8007bbe:	d42b      	bmi.n	8007c18 <_printf_common+0xb0>
 8007bc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007bc4:	4641      	mov	r1, r8
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	47c8      	blx	r9
 8007bca:	3001      	adds	r0, #1
 8007bcc:	d01e      	beq.n	8007c0c <_printf_common+0xa4>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	6922      	ldr	r2, [r4, #16]
 8007bd2:	f003 0306 	and.w	r3, r3, #6
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	bf02      	ittt	eq
 8007bda:	68e5      	ldreq	r5, [r4, #12]
 8007bdc:	6833      	ldreq	r3, [r6, #0]
 8007bde:	1aed      	subeq	r5, r5, r3
 8007be0:	68a3      	ldr	r3, [r4, #8]
 8007be2:	bf0c      	ite	eq
 8007be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007be8:	2500      	movne	r5, #0
 8007bea:	4293      	cmp	r3, r2
 8007bec:	bfc4      	itt	gt
 8007bee:	1a9b      	subgt	r3, r3, r2
 8007bf0:	18ed      	addgt	r5, r5, r3
 8007bf2:	2600      	movs	r6, #0
 8007bf4:	341a      	adds	r4, #26
 8007bf6:	42b5      	cmp	r5, r6
 8007bf8:	d11a      	bne.n	8007c30 <_printf_common+0xc8>
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	e008      	b.n	8007c10 <_printf_common+0xa8>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	4652      	mov	r2, sl
 8007c02:	4641      	mov	r1, r8
 8007c04:	4638      	mov	r0, r7
 8007c06:	47c8      	blx	r9
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d103      	bne.n	8007c14 <_printf_common+0xac>
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c14:	3501      	adds	r5, #1
 8007c16:	e7c6      	b.n	8007ba6 <_printf_common+0x3e>
 8007c18:	18e1      	adds	r1, r4, r3
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	2030      	movs	r0, #48	@ 0x30
 8007c1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c22:	4422      	add	r2, r4
 8007c24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c2c:	3302      	adds	r3, #2
 8007c2e:	e7c7      	b.n	8007bc0 <_printf_common+0x58>
 8007c30:	2301      	movs	r3, #1
 8007c32:	4622      	mov	r2, r4
 8007c34:	4641      	mov	r1, r8
 8007c36:	4638      	mov	r0, r7
 8007c38:	47c8      	blx	r9
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	d0e6      	beq.n	8007c0c <_printf_common+0xa4>
 8007c3e:	3601      	adds	r6, #1
 8007c40:	e7d9      	b.n	8007bf6 <_printf_common+0x8e>
	...

08007c44 <_printf_i>:
 8007c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c48:	7e0f      	ldrb	r7, [r1, #24]
 8007c4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c4c:	2f78      	cmp	r7, #120	@ 0x78
 8007c4e:	4691      	mov	r9, r2
 8007c50:	4680      	mov	r8, r0
 8007c52:	460c      	mov	r4, r1
 8007c54:	469a      	mov	sl, r3
 8007c56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c5a:	d807      	bhi.n	8007c6c <_printf_i+0x28>
 8007c5c:	2f62      	cmp	r7, #98	@ 0x62
 8007c5e:	d80a      	bhi.n	8007c76 <_printf_i+0x32>
 8007c60:	2f00      	cmp	r7, #0
 8007c62:	f000 80d2 	beq.w	8007e0a <_printf_i+0x1c6>
 8007c66:	2f58      	cmp	r7, #88	@ 0x58
 8007c68:	f000 80b9 	beq.w	8007dde <_printf_i+0x19a>
 8007c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c74:	e03a      	b.n	8007cec <_printf_i+0xa8>
 8007c76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c7a:	2b15      	cmp	r3, #21
 8007c7c:	d8f6      	bhi.n	8007c6c <_printf_i+0x28>
 8007c7e:	a101      	add	r1, pc, #4	@ (adr r1, 8007c84 <_printf_i+0x40>)
 8007c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c84:	08007cdd 	.word	0x08007cdd
 8007c88:	08007cf1 	.word	0x08007cf1
 8007c8c:	08007c6d 	.word	0x08007c6d
 8007c90:	08007c6d 	.word	0x08007c6d
 8007c94:	08007c6d 	.word	0x08007c6d
 8007c98:	08007c6d 	.word	0x08007c6d
 8007c9c:	08007cf1 	.word	0x08007cf1
 8007ca0:	08007c6d 	.word	0x08007c6d
 8007ca4:	08007c6d 	.word	0x08007c6d
 8007ca8:	08007c6d 	.word	0x08007c6d
 8007cac:	08007c6d 	.word	0x08007c6d
 8007cb0:	08007df1 	.word	0x08007df1
 8007cb4:	08007d1b 	.word	0x08007d1b
 8007cb8:	08007dab 	.word	0x08007dab
 8007cbc:	08007c6d 	.word	0x08007c6d
 8007cc0:	08007c6d 	.word	0x08007c6d
 8007cc4:	08007e13 	.word	0x08007e13
 8007cc8:	08007c6d 	.word	0x08007c6d
 8007ccc:	08007d1b 	.word	0x08007d1b
 8007cd0:	08007c6d 	.word	0x08007c6d
 8007cd4:	08007c6d 	.word	0x08007c6d
 8007cd8:	08007db3 	.word	0x08007db3
 8007cdc:	6833      	ldr	r3, [r6, #0]
 8007cde:	1d1a      	adds	r2, r3, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6032      	str	r2, [r6, #0]
 8007ce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ce8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007cec:	2301      	movs	r3, #1
 8007cee:	e09d      	b.n	8007e2c <_printf_i+0x1e8>
 8007cf0:	6833      	ldr	r3, [r6, #0]
 8007cf2:	6820      	ldr	r0, [r4, #0]
 8007cf4:	1d19      	adds	r1, r3, #4
 8007cf6:	6031      	str	r1, [r6, #0]
 8007cf8:	0606      	lsls	r6, r0, #24
 8007cfa:	d501      	bpl.n	8007d00 <_printf_i+0xbc>
 8007cfc:	681d      	ldr	r5, [r3, #0]
 8007cfe:	e003      	b.n	8007d08 <_printf_i+0xc4>
 8007d00:	0645      	lsls	r5, r0, #25
 8007d02:	d5fb      	bpl.n	8007cfc <_printf_i+0xb8>
 8007d04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d08:	2d00      	cmp	r5, #0
 8007d0a:	da03      	bge.n	8007d14 <_printf_i+0xd0>
 8007d0c:	232d      	movs	r3, #45	@ 0x2d
 8007d0e:	426d      	negs	r5, r5
 8007d10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d14:	4859      	ldr	r0, [pc, #356]	@ (8007e7c <_printf_i+0x238>)
 8007d16:	230a      	movs	r3, #10
 8007d18:	e011      	b.n	8007d3e <_printf_i+0xfa>
 8007d1a:	6821      	ldr	r1, [r4, #0]
 8007d1c:	6833      	ldr	r3, [r6, #0]
 8007d1e:	0608      	lsls	r0, r1, #24
 8007d20:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d24:	d402      	bmi.n	8007d2c <_printf_i+0xe8>
 8007d26:	0649      	lsls	r1, r1, #25
 8007d28:	bf48      	it	mi
 8007d2a:	b2ad      	uxthmi	r5, r5
 8007d2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d2e:	4853      	ldr	r0, [pc, #332]	@ (8007e7c <_printf_i+0x238>)
 8007d30:	6033      	str	r3, [r6, #0]
 8007d32:	bf14      	ite	ne
 8007d34:	230a      	movne	r3, #10
 8007d36:	2308      	moveq	r3, #8
 8007d38:	2100      	movs	r1, #0
 8007d3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d3e:	6866      	ldr	r6, [r4, #4]
 8007d40:	60a6      	str	r6, [r4, #8]
 8007d42:	2e00      	cmp	r6, #0
 8007d44:	bfa2      	ittt	ge
 8007d46:	6821      	ldrge	r1, [r4, #0]
 8007d48:	f021 0104 	bicge.w	r1, r1, #4
 8007d4c:	6021      	strge	r1, [r4, #0]
 8007d4e:	b90d      	cbnz	r5, 8007d54 <_printf_i+0x110>
 8007d50:	2e00      	cmp	r6, #0
 8007d52:	d04b      	beq.n	8007dec <_printf_i+0x1a8>
 8007d54:	4616      	mov	r6, r2
 8007d56:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d5a:	fb03 5711 	mls	r7, r3, r1, r5
 8007d5e:	5dc7      	ldrb	r7, [r0, r7]
 8007d60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d64:	462f      	mov	r7, r5
 8007d66:	42bb      	cmp	r3, r7
 8007d68:	460d      	mov	r5, r1
 8007d6a:	d9f4      	bls.n	8007d56 <_printf_i+0x112>
 8007d6c:	2b08      	cmp	r3, #8
 8007d6e:	d10b      	bne.n	8007d88 <_printf_i+0x144>
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	07df      	lsls	r7, r3, #31
 8007d74:	d508      	bpl.n	8007d88 <_printf_i+0x144>
 8007d76:	6923      	ldr	r3, [r4, #16]
 8007d78:	6861      	ldr	r1, [r4, #4]
 8007d7a:	4299      	cmp	r1, r3
 8007d7c:	bfde      	ittt	le
 8007d7e:	2330      	movle	r3, #48	@ 0x30
 8007d80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d88:	1b92      	subs	r2, r2, r6
 8007d8a:	6122      	str	r2, [r4, #16]
 8007d8c:	f8cd a000 	str.w	sl, [sp]
 8007d90:	464b      	mov	r3, r9
 8007d92:	aa03      	add	r2, sp, #12
 8007d94:	4621      	mov	r1, r4
 8007d96:	4640      	mov	r0, r8
 8007d98:	f7ff fee6 	bl	8007b68 <_printf_common>
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d14a      	bne.n	8007e36 <_printf_i+0x1f2>
 8007da0:	f04f 30ff 	mov.w	r0, #4294967295
 8007da4:	b004      	add	sp, #16
 8007da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	f043 0320 	orr.w	r3, r3, #32
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	4833      	ldr	r0, [pc, #204]	@ (8007e80 <_printf_i+0x23c>)
 8007db4:	2778      	movs	r7, #120	@ 0x78
 8007db6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	6831      	ldr	r1, [r6, #0]
 8007dbe:	061f      	lsls	r7, r3, #24
 8007dc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007dc4:	d402      	bmi.n	8007dcc <_printf_i+0x188>
 8007dc6:	065f      	lsls	r7, r3, #25
 8007dc8:	bf48      	it	mi
 8007dca:	b2ad      	uxthmi	r5, r5
 8007dcc:	6031      	str	r1, [r6, #0]
 8007dce:	07d9      	lsls	r1, r3, #31
 8007dd0:	bf44      	itt	mi
 8007dd2:	f043 0320 	orrmi.w	r3, r3, #32
 8007dd6:	6023      	strmi	r3, [r4, #0]
 8007dd8:	b11d      	cbz	r5, 8007de2 <_printf_i+0x19e>
 8007dda:	2310      	movs	r3, #16
 8007ddc:	e7ac      	b.n	8007d38 <_printf_i+0xf4>
 8007dde:	4827      	ldr	r0, [pc, #156]	@ (8007e7c <_printf_i+0x238>)
 8007de0:	e7e9      	b.n	8007db6 <_printf_i+0x172>
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	f023 0320 	bic.w	r3, r3, #32
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	e7f6      	b.n	8007dda <_printf_i+0x196>
 8007dec:	4616      	mov	r6, r2
 8007dee:	e7bd      	b.n	8007d6c <_printf_i+0x128>
 8007df0:	6833      	ldr	r3, [r6, #0]
 8007df2:	6825      	ldr	r5, [r4, #0]
 8007df4:	6961      	ldr	r1, [r4, #20]
 8007df6:	1d18      	adds	r0, r3, #4
 8007df8:	6030      	str	r0, [r6, #0]
 8007dfa:	062e      	lsls	r6, r5, #24
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	d501      	bpl.n	8007e04 <_printf_i+0x1c0>
 8007e00:	6019      	str	r1, [r3, #0]
 8007e02:	e002      	b.n	8007e0a <_printf_i+0x1c6>
 8007e04:	0668      	lsls	r0, r5, #25
 8007e06:	d5fb      	bpl.n	8007e00 <_printf_i+0x1bc>
 8007e08:	8019      	strh	r1, [r3, #0]
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	6123      	str	r3, [r4, #16]
 8007e0e:	4616      	mov	r6, r2
 8007e10:	e7bc      	b.n	8007d8c <_printf_i+0x148>
 8007e12:	6833      	ldr	r3, [r6, #0]
 8007e14:	1d1a      	adds	r2, r3, #4
 8007e16:	6032      	str	r2, [r6, #0]
 8007e18:	681e      	ldr	r6, [r3, #0]
 8007e1a:	6862      	ldr	r2, [r4, #4]
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f7f8 f9e6 	bl	80001f0 <memchr>
 8007e24:	b108      	cbz	r0, 8007e2a <_printf_i+0x1e6>
 8007e26:	1b80      	subs	r0, r0, r6
 8007e28:	6060      	str	r0, [r4, #4]
 8007e2a:	6863      	ldr	r3, [r4, #4]
 8007e2c:	6123      	str	r3, [r4, #16]
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e34:	e7aa      	b.n	8007d8c <_printf_i+0x148>
 8007e36:	6923      	ldr	r3, [r4, #16]
 8007e38:	4632      	mov	r2, r6
 8007e3a:	4649      	mov	r1, r9
 8007e3c:	4640      	mov	r0, r8
 8007e3e:	47d0      	blx	sl
 8007e40:	3001      	adds	r0, #1
 8007e42:	d0ad      	beq.n	8007da0 <_printf_i+0x15c>
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	079b      	lsls	r3, r3, #30
 8007e48:	d413      	bmi.n	8007e72 <_printf_i+0x22e>
 8007e4a:	68e0      	ldr	r0, [r4, #12]
 8007e4c:	9b03      	ldr	r3, [sp, #12]
 8007e4e:	4298      	cmp	r0, r3
 8007e50:	bfb8      	it	lt
 8007e52:	4618      	movlt	r0, r3
 8007e54:	e7a6      	b.n	8007da4 <_printf_i+0x160>
 8007e56:	2301      	movs	r3, #1
 8007e58:	4632      	mov	r2, r6
 8007e5a:	4649      	mov	r1, r9
 8007e5c:	4640      	mov	r0, r8
 8007e5e:	47d0      	blx	sl
 8007e60:	3001      	adds	r0, #1
 8007e62:	d09d      	beq.n	8007da0 <_printf_i+0x15c>
 8007e64:	3501      	adds	r5, #1
 8007e66:	68e3      	ldr	r3, [r4, #12]
 8007e68:	9903      	ldr	r1, [sp, #12]
 8007e6a:	1a5b      	subs	r3, r3, r1
 8007e6c:	42ab      	cmp	r3, r5
 8007e6e:	dcf2      	bgt.n	8007e56 <_printf_i+0x212>
 8007e70:	e7eb      	b.n	8007e4a <_printf_i+0x206>
 8007e72:	2500      	movs	r5, #0
 8007e74:	f104 0619 	add.w	r6, r4, #25
 8007e78:	e7f5      	b.n	8007e66 <_printf_i+0x222>
 8007e7a:	bf00      	nop
 8007e7c:	08009a81 	.word	0x08009a81
 8007e80:	08009a92 	.word	0x08009a92

08007e84 <memmove>:
 8007e84:	4288      	cmp	r0, r1
 8007e86:	b510      	push	{r4, lr}
 8007e88:	eb01 0402 	add.w	r4, r1, r2
 8007e8c:	d902      	bls.n	8007e94 <memmove+0x10>
 8007e8e:	4284      	cmp	r4, r0
 8007e90:	4623      	mov	r3, r4
 8007e92:	d807      	bhi.n	8007ea4 <memmove+0x20>
 8007e94:	1e43      	subs	r3, r0, #1
 8007e96:	42a1      	cmp	r1, r4
 8007e98:	d008      	beq.n	8007eac <memmove+0x28>
 8007e9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ea2:	e7f8      	b.n	8007e96 <memmove+0x12>
 8007ea4:	4402      	add	r2, r0
 8007ea6:	4601      	mov	r1, r0
 8007ea8:	428a      	cmp	r2, r1
 8007eaa:	d100      	bne.n	8007eae <memmove+0x2a>
 8007eac:	bd10      	pop	{r4, pc}
 8007eae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007eb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007eb6:	e7f7      	b.n	8007ea8 <memmove+0x24>

08007eb8 <_sbrk_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4d06      	ldr	r5, [pc, #24]	@ (8007ed4 <_sbrk_r+0x1c>)
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	602b      	str	r3, [r5, #0]
 8007ec4:	f7fb fef6 	bl	8003cb4 <_sbrk>
 8007ec8:	1c43      	adds	r3, r0, #1
 8007eca:	d102      	bne.n	8007ed2 <_sbrk_r+0x1a>
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	b103      	cbz	r3, 8007ed2 <_sbrk_r+0x1a>
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	20025db0 	.word	0x20025db0

08007ed8 <memcpy>:
 8007ed8:	440a      	add	r2, r1
 8007eda:	4291      	cmp	r1, r2
 8007edc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ee0:	d100      	bne.n	8007ee4 <memcpy+0xc>
 8007ee2:	4770      	bx	lr
 8007ee4:	b510      	push	{r4, lr}
 8007ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eee:	4291      	cmp	r1, r2
 8007ef0:	d1f9      	bne.n	8007ee6 <memcpy+0xe>
 8007ef2:	bd10      	pop	{r4, pc}

08007ef4 <_realloc_r>:
 8007ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef8:	4680      	mov	r8, r0
 8007efa:	4615      	mov	r5, r2
 8007efc:	460c      	mov	r4, r1
 8007efe:	b921      	cbnz	r1, 8007f0a <_realloc_r+0x16>
 8007f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f04:	4611      	mov	r1, r2
 8007f06:	f7ff bc4b 	b.w	80077a0 <_malloc_r>
 8007f0a:	b92a      	cbnz	r2, 8007f18 <_realloc_r+0x24>
 8007f0c:	f7ff fbdc 	bl	80076c8 <_free_r>
 8007f10:	2400      	movs	r4, #0
 8007f12:	4620      	mov	r0, r4
 8007f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f18:	f000 f81a 	bl	8007f50 <_malloc_usable_size_r>
 8007f1c:	4285      	cmp	r5, r0
 8007f1e:	4606      	mov	r6, r0
 8007f20:	d802      	bhi.n	8007f28 <_realloc_r+0x34>
 8007f22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007f26:	d8f4      	bhi.n	8007f12 <_realloc_r+0x1e>
 8007f28:	4629      	mov	r1, r5
 8007f2a:	4640      	mov	r0, r8
 8007f2c:	f7ff fc38 	bl	80077a0 <_malloc_r>
 8007f30:	4607      	mov	r7, r0
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d0ec      	beq.n	8007f10 <_realloc_r+0x1c>
 8007f36:	42b5      	cmp	r5, r6
 8007f38:	462a      	mov	r2, r5
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	bf28      	it	cs
 8007f3e:	4632      	movcs	r2, r6
 8007f40:	f7ff ffca 	bl	8007ed8 <memcpy>
 8007f44:	4621      	mov	r1, r4
 8007f46:	4640      	mov	r0, r8
 8007f48:	f7ff fbbe 	bl	80076c8 <_free_r>
 8007f4c:	463c      	mov	r4, r7
 8007f4e:	e7e0      	b.n	8007f12 <_realloc_r+0x1e>

08007f50 <_malloc_usable_size_r>:
 8007f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f54:	1f18      	subs	r0, r3, #4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	bfbc      	itt	lt
 8007f5a:	580b      	ldrlt	r3, [r1, r0]
 8007f5c:	18c0      	addlt	r0, r0, r3
 8007f5e:	4770      	bx	lr

08007f60 <_init>:
 8007f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f62:	bf00      	nop
 8007f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f66:	bc08      	pop	{r3}
 8007f68:	469e      	mov	lr, r3
 8007f6a:	4770      	bx	lr

08007f6c <_fini>:
 8007f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6e:	bf00      	nop
 8007f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f72:	bc08      	pop	{r3}
 8007f74:	469e      	mov	lr, r3
 8007f76:	4770      	bx	lr
