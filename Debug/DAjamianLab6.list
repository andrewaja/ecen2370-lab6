
DAjamianLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000686c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae8  08006a18  08006a18  00007a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008500  08008500  0000a024  2**0
                  CONTENTS
  4 .ARM          00000008  08008500  08008500  00009500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008508  08008508  0000a024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008508  08008508  00009508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800850c  0800850c  0000950c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08008510  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a024  2**0
                  CONTENTS
 10 .bss          00025bb4  20000024  20000024  0000a024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025bd8  20025bd8  0000a024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013d51  00000000  00000000  0000a054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031b8  00000000  00000000  0001dda5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  00020f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f7d  00000000  00000000  00022378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d84  00000000  00000000  000232f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000188d3  00000000  00000000  0004a079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2c05  00000000  00000000  0006294c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145551  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053d4  00000000  00000000  00145594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0014a968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006a00 	.word	0x08006a00

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08006a00 	.word	0x08006a00

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
extern void initialise_monitor_handles(void); 

static STMPE811_TouchData StaticTouchData;

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f002 fe06 	bl	80030f0 <initialise_monitor_handles>
	ButtonInit();
 80004e4:	f000 fcce 	bl	8000e84 <ButtonInit>
	LTCD__Init();
 80004e8:	f000 fdfe 	bl	80010e8 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 fdbb 	bl	8001068 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004f2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 feec 	bl	80012d4 <LCD_Clear>

	InitializeLCDTouch();
 80004fc:	f001 f88f 	bl	800161e <InitializeLCDTouch>
	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000500:	4b02      	ldr	r3, [pc, #8]	@ (800050c <ApplicationInit+0x30>)
 8000502:	2201      	movs	r2, #1
 8000504:	719a      	strb	r2, [r3, #6]
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	2000008c 	.word	0x2000008c

08000510 <PlayGame>:

void PlayGame(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
	DisplayTitle();
 8000516:	f000 f82b 	bl	8000570 <DisplayTitle>
	HAL_Delay(2000);
 800051a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800051e:	f002 fe9d 	bl	800325c <HAL_Delay>
	while(1){
		DisplayMenu();
 8000522:	f000 f85d 	bl	80005e0 <DisplayMenu>
		uint8_t numPlayers = selectMode(&StaticTouchData);
 8000526:	4811      	ldr	r0, [pc, #68]	@ (800056c <PlayGame+0x5c>)
 8000528:	f001 f890 	bl	800164c <selectMode>
 800052c:	4603      	mov	r3, r0
 800052e:	71fb      	strb	r3, [r7, #7]
		DisplayGame();
 8000530:	f000 f924 	bl	800077c <DisplayGame>
		HAL_Delay(500);
 8000534:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000538:	f002 fe90 	bl	800325c <HAL_Delay>
		switch (numPlayers){
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d002      	beq.n	8000548 <PlayGame+0x38>
 8000542:	2b02      	cmp	r3, #2
 8000544:	d003      	beq.n	800054e <PlayGame+0x3e>
 8000546:	e005      	b.n	8000554 <PlayGame+0x44>
			case 1:
				PlaySinglePlayer();
 8000548:	f000 f970 	bl	800082c <PlaySinglePlayer>
			break;
 800054c:	e008      	b.n	8000560 <PlayGame+0x50>
			case 2:
				PlayTwoPlayer();
 800054e:	f000 fb9b 	bl	8000c88 <PlayTwoPlayer>
			break;
 8000552:	e005      	b.n	8000560 <PlayGame+0x50>
			default:
				LCD_Clear(0, LCD_COLOR_RED);
 8000554:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000558:	2000      	movs	r0, #0
 800055a:	f000 febb 	bl	80012d4 <LCD_Clear>
				return;
 800055e:	e002      	b.n	8000566 <PlayGame+0x56>
		}
		DisplayEnd();
 8000560:	f000 f916 	bl	8000790 <DisplayEnd>
	while(1){
 8000564:	e7dd      	b.n	8000522 <PlayGame+0x12>
	}
}
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000008c 	.word	0x2000008c

08000570 <DisplayTitle>:

void DisplayTitle(void){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLUE);
 8000574:	211f      	movs	r1, #31
 8000576:	2000      	movs	r0, #0
 8000578:	f000 feac 	bl	80012d4 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800057c:	2000      	movs	r0, #0
 800057e:	f000 fecb 	bl	8001318 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000582:	4816      	ldr	r0, [pc, #88]	@ (80005dc <DisplayTitle+0x6c>)
 8000584:	f000 fed8 	bl	8001338 <LCD_SetFont>

	LCD_DisplayChar(55,LCD_PIXEL_HEIGHT/2,'C');
 8000588:	2243      	movs	r2, #67	@ 0x43
 800058a:	21a0      	movs	r1, #160	@ 0xa0
 800058c:	2037      	movs	r0, #55	@ 0x37
 800058e:	f000 ff51 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(70,LCD_PIXEL_HEIGHT/2,'o');
 8000592:	226f      	movs	r2, #111	@ 0x6f
 8000594:	21a0      	movs	r1, #160	@ 0xa0
 8000596:	2046      	movs	r0, #70	@ 0x46
 8000598:	f000 ff4c 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(85,LCD_PIXEL_HEIGHT/2,'n');
 800059c:	226e      	movs	r2, #110	@ 0x6e
 800059e:	21a0      	movs	r1, #160	@ 0xa0
 80005a0:	2055      	movs	r0, #85	@ 0x55
 80005a2:	f000 ff47 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(100,LCD_PIXEL_HEIGHT/2,'n');
 80005a6:	226e      	movs	r2, #110	@ 0x6e
 80005a8:	21a0      	movs	r1, #160	@ 0xa0
 80005aa:	2064      	movs	r0, #100	@ 0x64
 80005ac:	f000 ff42 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(115,LCD_PIXEL_HEIGHT/2,'e');
 80005b0:	2265      	movs	r2, #101	@ 0x65
 80005b2:	21a0      	movs	r1, #160	@ 0xa0
 80005b4:	2073      	movs	r0, #115	@ 0x73
 80005b6:	f000 ff3d 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(130,LCD_PIXEL_HEIGHT/2,'c');
 80005ba:	2263      	movs	r2, #99	@ 0x63
 80005bc:	21a0      	movs	r1, #160	@ 0xa0
 80005be:	2082      	movs	r0, #130	@ 0x82
 80005c0:	f000 ff38 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(140,LCD_PIXEL_HEIGHT/2,'t');
 80005c4:	2274      	movs	r2, #116	@ 0x74
 80005c6:	21a0      	movs	r1, #160	@ 0xa0
 80005c8:	208c      	movs	r0, #140	@ 0x8c
 80005ca:	f000 ff33 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(165,LCD_PIXEL_HEIGHT/2,'4');
 80005ce:	2234      	movs	r2, #52	@ 0x34
 80005d0:	21a0      	movs	r1, #160	@ 0xa0
 80005d2:	20a5      	movs	r0, #165	@ 0xa5
 80005d4:	f000 ff2e 	bl	8001434 <LCD_DisplayChar>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000004 	.word	0x20000004

080005e0 <DisplayMenu>:

void DisplayMenu(void){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLUE);
 80005e6:	211f      	movs	r1, #31
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 fe73 	bl	80012d4 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 fe92 	bl	8001318 <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 80005f4:	4860      	ldr	r0, [pc, #384]	@ (8000778 <DisplayMenu+0x198>)
 80005f6:	f000 fe9f 	bl	8001338 <LCD_SetFont>

	uint16_t x, y;
	for(y=10; y<50; y++){
 80005fa:	230a      	movs	r3, #10
 80005fc:	80bb      	strh	r3, [r7, #4]
 80005fe:	e012      	b.n	8000626 <DisplayMenu+0x46>
		for(x=15; x < LCD_PIXEL_WIDTH-15; x++){
 8000600:	230f      	movs	r3, #15
 8000602:	80fb      	strh	r3, [r7, #6]
 8000604:	e009      	b.n	800061a <DisplayMenu+0x3a>
			LCD_Draw_Pixel(x, y, LCD_COLOR_WHITE);
 8000606:	88b9      	ldrh	r1, [r7, #4]
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fdc8 	bl	80011a4 <LCD_Draw_Pixel>
		for(x=15; x < LCD_PIXEL_WIDTH-15; x++){
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	3301      	adds	r3, #1
 8000618:	80fb      	strh	r3, [r7, #6]
 800061a:	88fb      	ldrh	r3, [r7, #6]
 800061c:	2be0      	cmp	r3, #224	@ 0xe0
 800061e:	d9f2      	bls.n	8000606 <DisplayMenu+0x26>
	for(y=10; y<50; y++){
 8000620:	88bb      	ldrh	r3, [r7, #4]
 8000622:	3301      	adds	r3, #1
 8000624:	80bb      	strh	r3, [r7, #4]
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	2b31      	cmp	r3, #49	@ 0x31
 800062a:	d9e9      	bls.n	8000600 <DisplayMenu+0x20>
		}
	}
	LCD_DisplayChar(78,25,'O');
 800062c:	224f      	movs	r2, #79	@ 0x4f
 800062e:	2119      	movs	r1, #25
 8000630:	204e      	movs	r0, #78	@ 0x4e
 8000632:	f000 feff 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(87,25,'n');
 8000636:	226e      	movs	r2, #110	@ 0x6e
 8000638:	2119      	movs	r1, #25
 800063a:	2057      	movs	r0, #87	@ 0x57
 800063c:	f000 fefa 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(94,25,'e');
 8000640:	2265      	movs	r2, #101	@ 0x65
 8000642:	2119      	movs	r1, #25
 8000644:	205e      	movs	r0, #94	@ 0x5e
 8000646:	f000 fef5 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(103,25,'P');
 800064a:	2250      	movs	r2, #80	@ 0x50
 800064c:	2119      	movs	r1, #25
 800064e:	2067      	movs	r0, #103	@ 0x67
 8000650:	f000 fef0 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(110,25,'l');
 8000654:	226c      	movs	r2, #108	@ 0x6c
 8000656:	2119      	movs	r1, #25
 8000658:	206e      	movs	r0, #110	@ 0x6e
 800065a:	f000 feeb 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(113,25,'a');
 800065e:	2261      	movs	r2, #97	@ 0x61
 8000660:	2119      	movs	r1, #25
 8000662:	2071      	movs	r0, #113	@ 0x71
 8000664:	f000 fee6 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(120,25,'y');
 8000668:	2279      	movs	r2, #121	@ 0x79
 800066a:	2119      	movs	r1, #25
 800066c:	2078      	movs	r0, #120	@ 0x78
 800066e:	f000 fee1 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(127,25,'e');
 8000672:	2265      	movs	r2, #101	@ 0x65
 8000674:	2119      	movs	r1, #25
 8000676:	207f      	movs	r0, #127	@ 0x7f
 8000678:	f000 fedc 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(134,25,'r');
 800067c:	2272      	movs	r2, #114	@ 0x72
 800067e:	2119      	movs	r1, #25
 8000680:	2086      	movs	r0, #134	@ 0x86
 8000682:	f000 fed7 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(141,25,'M');
 8000686:	224d      	movs	r2, #77	@ 0x4d
 8000688:	2119      	movs	r1, #25
 800068a:	208d      	movs	r0, #141	@ 0x8d
 800068c:	f000 fed2 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(150,25,'o');
 8000690:	226f      	movs	r2, #111	@ 0x6f
 8000692:	2119      	movs	r1, #25
 8000694:	2096      	movs	r0, #150	@ 0x96
 8000696:	f000 fecd 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(157,25,'d');
 800069a:	2264      	movs	r2, #100	@ 0x64
 800069c:	2119      	movs	r1, #25
 800069e:	209d      	movs	r0, #157	@ 0x9d
 80006a0:	f000 fec8 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(164,25,'e');
 80006a4:	2265      	movs	r2, #101	@ 0x65
 80006a6:	2119      	movs	r1, #25
 80006a8:	20a4      	movs	r0, #164	@ 0xa4
 80006aa:	f000 fec3 	bl	8001434 <LCD_DisplayChar>

	x = 0; y = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	80fb      	strh	r3, [r7, #6]
 80006b2:	2300      	movs	r3, #0
 80006b4:	80bb      	strh	r3, [r7, #4]
	for(y=60; y<100; y++){
 80006b6:	233c      	movs	r3, #60	@ 0x3c
 80006b8:	80bb      	strh	r3, [r7, #4]
 80006ba:	e012      	b.n	80006e2 <DisplayMenu+0x102>
		for(x=15; x < LCD_PIXEL_WIDTH-15; x++){
 80006bc:	230f      	movs	r3, #15
 80006be:	80fb      	strh	r3, [r7, #6]
 80006c0:	e009      	b.n	80006d6 <DisplayMenu+0xf6>
			LCD_Draw_Pixel(x, y, LCD_COLOR_WHITE);
 80006c2:	88b9      	ldrh	r1, [r7, #4]
 80006c4:	88fb      	ldrh	r3, [r7, #6]
 80006c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fd6a 	bl	80011a4 <LCD_Draw_Pixel>
		for(x=15; x < LCD_PIXEL_WIDTH-15; x++){
 80006d0:	88fb      	ldrh	r3, [r7, #6]
 80006d2:	3301      	adds	r3, #1
 80006d4:	80fb      	strh	r3, [r7, #6]
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	2be0      	cmp	r3, #224	@ 0xe0
 80006da:	d9f2      	bls.n	80006c2 <DisplayMenu+0xe2>
	for(y=60; y<100; y++){
 80006dc:	88bb      	ldrh	r3, [r7, #4]
 80006de:	3301      	adds	r3, #1
 80006e0:	80bb      	strh	r3, [r7, #4]
 80006e2:	88bb      	ldrh	r3, [r7, #4]
 80006e4:	2b63      	cmp	r3, #99	@ 0x63
 80006e6:	d9e9      	bls.n	80006bc <DisplayMenu+0xdc>
		}
	}
	LCD_DisplayChar(78,75,'T');
 80006e8:	2254      	movs	r2, #84	@ 0x54
 80006ea:	214b      	movs	r1, #75	@ 0x4b
 80006ec:	204e      	movs	r0, #78	@ 0x4e
 80006ee:	f000 fea1 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(85,75,'w');
 80006f2:	2277      	movs	r2, #119	@ 0x77
 80006f4:	214b      	movs	r1, #75	@ 0x4b
 80006f6:	2055      	movs	r0, #85	@ 0x55
 80006f8:	f000 fe9c 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(94,75,'o');
 80006fc:	226f      	movs	r2, #111	@ 0x6f
 80006fe:	214b      	movs	r1, #75	@ 0x4b
 8000700:	205e      	movs	r0, #94	@ 0x5e
 8000702:	f000 fe97 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(103,75,'P');
 8000706:	2250      	movs	r2, #80	@ 0x50
 8000708:	214b      	movs	r1, #75	@ 0x4b
 800070a:	2067      	movs	r0, #103	@ 0x67
 800070c:	f000 fe92 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(110,75,'l');
 8000710:	226c      	movs	r2, #108	@ 0x6c
 8000712:	214b      	movs	r1, #75	@ 0x4b
 8000714:	206e      	movs	r0, #110	@ 0x6e
 8000716:	f000 fe8d 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(113,75,'a');
 800071a:	2261      	movs	r2, #97	@ 0x61
 800071c:	214b      	movs	r1, #75	@ 0x4b
 800071e:	2071      	movs	r0, #113	@ 0x71
 8000720:	f000 fe88 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(120,75,'y');
 8000724:	2279      	movs	r2, #121	@ 0x79
 8000726:	214b      	movs	r1, #75	@ 0x4b
 8000728:	2078      	movs	r0, #120	@ 0x78
 800072a:	f000 fe83 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(127,75,'e');
 800072e:	2265      	movs	r2, #101	@ 0x65
 8000730:	214b      	movs	r1, #75	@ 0x4b
 8000732:	207f      	movs	r0, #127	@ 0x7f
 8000734:	f000 fe7e 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(134,75,'r');
 8000738:	2272      	movs	r2, #114	@ 0x72
 800073a:	214b      	movs	r1, #75	@ 0x4b
 800073c:	2086      	movs	r0, #134	@ 0x86
 800073e:	f000 fe79 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(141,75,'M');
 8000742:	224d      	movs	r2, #77	@ 0x4d
 8000744:	214b      	movs	r1, #75	@ 0x4b
 8000746:	208d      	movs	r0, #141	@ 0x8d
 8000748:	f000 fe74 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(150,75,'o');
 800074c:	226f      	movs	r2, #111	@ 0x6f
 800074e:	214b      	movs	r1, #75	@ 0x4b
 8000750:	2096      	movs	r0, #150	@ 0x96
 8000752:	f000 fe6f 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(157,75,'d');
 8000756:	2264      	movs	r2, #100	@ 0x64
 8000758:	214b      	movs	r1, #75	@ 0x4b
 800075a:	209d      	movs	r0, #157	@ 0x9d
 800075c:	f000 fe6a 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(164,75,'e');
 8000760:	2265      	movs	r2, #101	@ 0x65
 8000762:	214b      	movs	r1, #75	@ 0x4b
 8000764:	20a4      	movs	r0, #164	@ 0xa4
 8000766:	f000 fe65 	bl	8001434 <LCD_DisplayChar>

	displayFilledBoard();
 800076a:	f000 fec0 	bl	80014ee <displayFilledBoard>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2000000c 	.word	0x2000000c

0800077c <DisplayGame>:

void DisplayGame(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLUE);
 8000780:	211f      	movs	r1, #31
 8000782:	2000      	movs	r0, #0
 8000784:	f000 fda6 	bl	80012d4 <LCD_Clear>
	displayEmptyBoard();
 8000788:	f000 fe76 	bl	8001478 <displayEmptyBoard>
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <DisplayEnd>:

void DisplayEnd(void){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000796:	2000      	movs	r0, #0
 8000798:	f000 fdbe 	bl	8001318 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 800079c:	4822      	ldr	r0, [pc, #136]	@ (8000828 <DisplayEnd+0x98>)
 800079e:	f000 fdcb 	bl	8001338 <LCD_SetFont>

	uint16_t x, y;
	for(y = 0; y<50; y++){
 80007a2:	2300      	movs	r3, #0
 80007a4:	80bb      	strh	r3, [r7, #4]
 80007a6:	e011      	b.n	80007cc <DisplayEnd+0x3c>
		for(x=0; x < LCD_PIXEL_WIDTH; x++){
 80007a8:	2300      	movs	r3, #0
 80007aa:	80fb      	strh	r3, [r7, #6]
 80007ac:	e008      	b.n	80007c0 <DisplayEnd+0x30>
			LCD_Draw_Pixel(x, y, LCD_COLOR_BLUE);
 80007ae:	88b9      	ldrh	r1, [r7, #4]
 80007b0:	88fb      	ldrh	r3, [r7, #6]
 80007b2:	221f      	movs	r2, #31
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fcf5 	bl	80011a4 <LCD_Draw_Pixel>
		for(x=0; x < LCD_PIXEL_WIDTH; x++){
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	3301      	adds	r3, #1
 80007be:	80fb      	strh	r3, [r7, #6]
 80007c0:	88fb      	ldrh	r3, [r7, #6]
 80007c2:	2bef      	cmp	r3, #239	@ 0xef
 80007c4:	d9f3      	bls.n	80007ae <DisplayEnd+0x1e>
	for(y = 0; y<50; y++){
 80007c6:	88bb      	ldrh	r3, [r7, #4]
 80007c8:	3301      	adds	r3, #1
 80007ca:	80bb      	strh	r3, [r7, #4]
 80007cc:	88bb      	ldrh	r3, [r7, #4]
 80007ce:	2b31      	cmp	r3, #49	@ 0x31
 80007d0:	d9ea      	bls.n	80007a8 <DisplayEnd+0x18>
		}
	}
	LCD_DisplayChar(85,30,'W');
 80007d2:	2257      	movs	r2, #87	@ 0x57
 80007d4:	211e      	movs	r1, #30
 80007d6:	2055      	movs	r0, #85	@ 0x55
 80007d8:	f000 fe2c 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(95,30,'i');
 80007dc:	2269      	movs	r2, #105	@ 0x69
 80007de:	211e      	movs	r1, #30
 80007e0:	205f      	movs	r0, #95	@ 0x5f
 80007e2:	f000 fe27 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(105,30,'n');
 80007e6:	226e      	movs	r2, #110	@ 0x6e
 80007e8:	211e      	movs	r1, #30
 80007ea:	2069      	movs	r0, #105	@ 0x69
 80007ec:	f000 fe22 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(120,30,'n');
 80007f0:	226e      	movs	r2, #110	@ 0x6e
 80007f2:	211e      	movs	r1, #30
 80007f4:	2078      	movs	r0, #120	@ 0x78
 80007f6:	f000 fe1d 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(135,30,'e');
 80007fa:	2265      	movs	r2, #101	@ 0x65
 80007fc:	211e      	movs	r1, #30
 80007fe:	2087      	movs	r0, #135	@ 0x87
 8000800:	f000 fe18 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(150,30,'r');
 8000804:	2272      	movs	r2, #114	@ 0x72
 8000806:	211e      	movs	r1, #30
 8000808:	2096      	movs	r0, #150	@ 0x96
 800080a:	f000 fe13 	bl	8001434 <LCD_DisplayChar>
	LCD_DisplayChar(155,30,':');
 800080e:	223a      	movs	r2, #58	@ 0x3a
 8000810:	211e      	movs	r1, #30
 8000812:	209b      	movs	r0, #155	@ 0x9b
 8000814:	f000 fe0e 	bl	8001434 <LCD_DisplayChar>

	// TODO
	HAL_Delay(3000);
 8000818:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800081c:	f002 fd1e 	bl	800325c <HAL_Delay>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000004 	.word	0x20000004

0800082c <PlaySinglePlayer>:

void PlaySinglePlayer(){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	// TODO
	HAL_Delay(2000);
 8000830:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000834:	f002 fd12 	bl	800325c <HAL_Delay>
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <CheckForWinnerHelper>:
 * 	   1 2 3
 * 	   8 x 4
 *     7 6 5
 */

bool CheckForWinnerHelper(uint8_t x, uint8_t y, ChipColor color, uint8_t numSame, Direction dir){
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b087      	sub	sp, #28
 8000840:	af02      	add	r7, sp, #8
 8000842:	4604      	mov	r4, r0
 8000844:	4608      	mov	r0, r1
 8000846:	4611      	mov	r1, r2
 8000848:	461a      	mov	r2, r3
 800084a:	4623      	mov	r3, r4
 800084c:	71fb      	strb	r3, [r7, #7]
 800084e:	4603      	mov	r3, r0
 8000850:	71bb      	strb	r3, [r7, #6]
 8000852:	460b      	mov	r3, r1
 8000854:	717b      	strb	r3, [r7, #5]
 8000856:	4613      	mov	r3, r2
 8000858:	713b      	strb	r3, [r7, #4]
	if (numSame == 3)
 800085a:	793b      	ldrb	r3, [r7, #4]
 800085c:	2b03      	cmp	r3, #3
 800085e:	d101      	bne.n	8000864 <CheckForWinnerHelper+0x28>
		return true; // base case
 8000860:	2301      	movs	r3, #1
 8000862:	e159      	b.n	8000b18 <CheckForWinnerHelper+0x2dc>

	switch (dir){
 8000864:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000868:	2b07      	cmp	r3, #7
 800086a:	f200 814b 	bhi.w	8000b04 <CheckForWinnerHelper+0x2c8>
 800086e:	a201      	add	r2, pc, #4	@ (adr r2, 8000874 <CheckForWinnerHelper+0x38>)
 8000870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000874:	08000895 	.word	0x08000895
 8000878:	080008e9 	.word	0x080008e9
 800087c:	08000931 	.word	0x08000931
 8000880:	08000985 	.word	0x08000985
 8000884:	080009cd 	.word	0x080009cd
 8000888:	08000a21 	.word	0x08000a21
 800088c:	08000a69 	.word	0x08000a69
 8000890:	08000abd 	.word	0x08000abd
		case UP_LEFT:
			if (x > 0 && y < NUM_ROWS-1){
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d024      	beq.n	80008e4 <CheckForWinnerHelper+0xa8>
 800089a:	79bb      	ldrb	r3, [r7, #6]
 800089c:	2b04      	cmp	r3, #4
 800089e:	d821      	bhi.n	80008e4 <CheckForWinnerHelper+0xa8>
				ChipColor upLeft = gameboard.column[x-1].contents[y+1];
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	1e5a      	subs	r2, r3, #1
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	1c59      	adds	r1, r3, #1
 80008a8:	489d      	ldr	r0, [pc, #628]	@ (8000b20 <CheckForWinnerHelper+0x2e4>)
 80008aa:	4613      	mov	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	4403      	add	r3, r0
 80008b4:	440b      	add	r3, r1
 80008b6:	3302      	adds	r3, #2
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	723b      	strb	r3, [r7, #8]
				if (upLeft == color)
 80008bc:	7a3a      	ldrb	r2, [r7, #8]
 80008be:	797b      	ldrb	r3, [r7, #5]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d10f      	bne.n	80008e4 <CheckForWinnerHelper+0xa8>
					return CheckForWinnerHelper(x-1, y+1, color, numSame+1, UP_LEFT);
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	b2d8      	uxtb	r0, r3
 80008ca:	79bb      	ldrb	r3, [r7, #6]
 80008cc:	3301      	adds	r3, #1
 80008ce:	b2d9      	uxtb	r1, r3
 80008d0:	793b      	ldrb	r3, [r7, #4]
 80008d2:	3301      	adds	r3, #1
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	797a      	ldrb	r2, [r7, #5]
 80008d8:	2400      	movs	r4, #0
 80008da:	9400      	str	r4, [sp, #0]
 80008dc:	f7ff ffae 	bl	800083c <CheckForWinnerHelper>
 80008e0:	4603      	mov	r3, r0
 80008e2:	e119      	b.n	8000b18 <CheckForWinnerHelper+0x2dc>
			}
			return false;
 80008e4:	2300      	movs	r3, #0
 80008e6:	e117      	b.n	8000b18 <CheckForWinnerHelper+0x2dc>
		break;
		case UP:
			if (y < NUM_ROWS-1){
 80008e8:	79bb      	ldrb	r3, [r7, #6]
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	d81e      	bhi.n	800092c <CheckForWinnerHelper+0xf0>
				ChipColor up = gameboard.column[x].contents[y+1];
 80008ee:	79fa      	ldrb	r2, [r7, #7]
 80008f0:	79bb      	ldrb	r3, [r7, #6]
 80008f2:	1c59      	adds	r1, r3, #1
 80008f4:	488a      	ldr	r0, [pc, #552]	@ (8000b20 <CheckForWinnerHelper+0x2e4>)
 80008f6:	4613      	mov	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4403      	add	r3, r0
 8000900:	440b      	add	r3, r1
 8000902:	3302      	adds	r3, #2
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	727b      	strb	r3, [r7, #9]
				if (up == color)
 8000908:	7a7a      	ldrb	r2, [r7, #9]
 800090a:	797b      	ldrb	r3, [r7, #5]
 800090c:	429a      	cmp	r2, r3
 800090e:	d10d      	bne.n	800092c <CheckForWinnerHelper+0xf0>
					return CheckForWinnerHelper(x, y+1, color, numSame+1, UP);
 8000910:	79bb      	ldrb	r3, [r7, #6]
 8000912:	3301      	adds	r3, #1
 8000914:	b2d9      	uxtb	r1, r3
 8000916:	793b      	ldrb	r3, [r7, #4]
 8000918:	3301      	adds	r3, #1
 800091a:	b2db      	uxtb	r3, r3
 800091c:	797a      	ldrb	r2, [r7, #5]
 800091e:	79f8      	ldrb	r0, [r7, #7]
 8000920:	2401      	movs	r4, #1
 8000922:	9400      	str	r4, [sp, #0]
 8000924:	f7ff ff8a 	bl	800083c <CheckForWinnerHelper>
 8000928:	4603      	mov	r3, r0
 800092a:	e0f5      	b.n	8000b18 <CheckForWinnerHelper+0x2dc>
			}
			return false;
 800092c:	2300      	movs	r3, #0
 800092e:	e0f3      	b.n	8000b18 <CheckForWinnerHelper+0x2dc>
		break;
		case UP_RIGHT:
			if (x < NUM_COLUMNS-1 && y < NUM_ROWS-1){
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	2b05      	cmp	r3, #5
 8000934:	d824      	bhi.n	8000980 <CheckForWinnerHelper+0x144>
 8000936:	79bb      	ldrb	r3, [r7, #6]
 8000938:	2b04      	cmp	r3, #4
 800093a:	d821      	bhi.n	8000980 <CheckForWinnerHelper+0x144>
				ChipColor upRight = gameboard.column[x+1].contents[y+1];
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	1c5a      	adds	r2, r3, #1
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	1c59      	adds	r1, r3, #1
 8000944:	4876      	ldr	r0, [pc, #472]	@ (8000b20 <CheckForWinnerHelper+0x2e4>)
 8000946:	4613      	mov	r3, r2
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	4413      	add	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4403      	add	r3, r0
 8000950:	440b      	add	r3, r1
 8000952:	3302      	adds	r3, #2
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	72bb      	strb	r3, [r7, #10]
				if (upRight == color)
 8000958:	7aba      	ldrb	r2, [r7, #10]
 800095a:	797b      	ldrb	r3, [r7, #5]
 800095c:	429a      	cmp	r2, r3
 800095e:	d10f      	bne.n	8000980 <CheckForWinnerHelper+0x144>
					return CheckForWinnerHelper(x+1, y+1, color, numSame+1, UP_RIGHT);
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	3301      	adds	r3, #1
 8000964:	b2d8      	uxtb	r0, r3
 8000966:	79bb      	ldrb	r3, [r7, #6]
 8000968:	3301      	adds	r3, #1
 800096a:	b2d9      	uxtb	r1, r3
 800096c:	793b      	ldrb	r3, [r7, #4]
 800096e:	3301      	adds	r3, #1
 8000970:	b2db      	uxtb	r3, r3
 8000972:	797a      	ldrb	r2, [r7, #5]
 8000974:	2402      	movs	r4, #2
 8000976:	9400      	str	r4, [sp, #0]
 8000978:	f7ff ff60 	bl	800083c <CheckForWinnerHelper>
 800097c:	4603      	mov	r3, r0
 800097e:	e0cb      	b.n	8000b18 <CheckForWinnerHelper+0x2dc>
			}
			return false;
 8000980:	2300      	movs	r3, #0
 8000982:	e0c9      	b.n	8000b18 <CheckForWinnerHelper+0x2dc>
		break;
		case RIGHT:
			if (x < NUM_COLUMNS-1){
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	2b05      	cmp	r3, #5
 8000988:	d81e      	bhi.n	80009c8 <CheckForWinnerHelper+0x18c>
				ChipColor right = gameboard.column[x+1].contents[y];
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	79b9      	ldrb	r1, [r7, #6]
 8000990:	4863      	ldr	r0, [pc, #396]	@ (8000b20 <CheckForWinnerHelper+0x2e4>)
 8000992:	4613      	mov	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4413      	add	r3, r2
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	4403      	add	r3, r0
 800099c:	440b      	add	r3, r1
 800099e:	3302      	adds	r3, #2
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	72fb      	strb	r3, [r7, #11]
				if (right == color)
 80009a4:	7afa      	ldrb	r2, [r7, #11]
 80009a6:	797b      	ldrb	r3, [r7, #5]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d10d      	bne.n	80009c8 <CheckForWinnerHelper+0x18c>
					return CheckForWinnerHelper(x+1, y, color, numSame+1, RIGHT);
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2d8      	uxtb	r0, r3
 80009b2:	793b      	ldrb	r3, [r7, #4]
 80009b4:	3301      	adds	r3, #1
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	797a      	ldrb	r2, [r7, #5]
 80009ba:	79b9      	ldrb	r1, [r7, #6]
 80009bc:	2403      	movs	r4, #3
 80009be:	9400      	str	r4, [sp, #0]
 80009c0:	f7ff ff3c 	bl	800083c <CheckForWinnerHelper>
 80009c4:	4603      	mov	r3, r0
 80009c6:	e0a7      	b.n	8000b18 <CheckForWinnerHelper+0x2dc>
			}
			return false;
 80009c8:	2300      	movs	r3, #0
 80009ca:	e0a5      	b.n	8000b18 <CheckForWinnerHelper+0x2dc>
		break;
		case DOWN_RIGHT:
			if (x < NUM_COLUMNS-1 && y > 0){
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2b05      	cmp	r3, #5
 80009d0:	d824      	bhi.n	8000a1c <CheckForWinnerHelper+0x1e0>
 80009d2:	79bb      	ldrb	r3, [r7, #6]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d021      	beq.n	8000a1c <CheckForWinnerHelper+0x1e0>
				ChipColor downRight = gameboard.column[x+1].contents[y-1];
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	1e59      	subs	r1, r3, #1
 80009e0:	484f      	ldr	r0, [pc, #316]	@ (8000b20 <CheckForWinnerHelper+0x2e4>)
 80009e2:	4613      	mov	r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	4413      	add	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4403      	add	r3, r0
 80009ec:	440b      	add	r3, r1
 80009ee:	3302      	adds	r3, #2
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	733b      	strb	r3, [r7, #12]
				if (downRight == color)
 80009f4:	7b3a      	ldrb	r2, [r7, #12]
 80009f6:	797b      	ldrb	r3, [r7, #5]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d10f      	bne.n	8000a1c <CheckForWinnerHelper+0x1e0>
					return CheckForWinnerHelper(x+1, y-1, color, numSame+1, DOWN_RIGHT);
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	3301      	adds	r3, #1
 8000a00:	b2d8      	uxtb	r0, r3
 8000a02:	79bb      	ldrb	r3, [r7, #6]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	b2d9      	uxtb	r1, r3
 8000a08:	793b      	ldrb	r3, [r7, #4]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	797a      	ldrb	r2, [r7, #5]
 8000a10:	2404      	movs	r4, #4
 8000a12:	9400      	str	r4, [sp, #0]
 8000a14:	f7ff ff12 	bl	800083c <CheckForWinnerHelper>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	e07d      	b.n	8000b18 <CheckForWinnerHelper+0x2dc>
			}
			return false;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	e07b      	b.n	8000b18 <CheckForWinnerHelper+0x2dc>
		break;
		case DOWN:
			if (y > 0){
 8000a20:	79bb      	ldrb	r3, [r7, #6]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d01e      	beq.n	8000a64 <CheckForWinnerHelper+0x228>
				ChipColor down = gameboard.column[x].contents[y-1];
 8000a26:	79fa      	ldrb	r2, [r7, #7]
 8000a28:	79bb      	ldrb	r3, [r7, #6]
 8000a2a:	1e59      	subs	r1, r3, #1
 8000a2c:	483c      	ldr	r0, [pc, #240]	@ (8000b20 <CheckForWinnerHelper+0x2e4>)
 8000a2e:	4613      	mov	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4413      	add	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4403      	add	r3, r0
 8000a38:	440b      	add	r3, r1
 8000a3a:	3302      	adds	r3, #2
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	737b      	strb	r3, [r7, #13]
				if (down == color)
 8000a40:	7b7a      	ldrb	r2, [r7, #13]
 8000a42:	797b      	ldrb	r3, [r7, #5]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d10d      	bne.n	8000a64 <CheckForWinnerHelper+0x228>
					return CheckForWinnerHelper(x, y-1, color, numSame+1, DOWN);
 8000a48:	79bb      	ldrb	r3, [r7, #6]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	b2d9      	uxtb	r1, r3
 8000a4e:	793b      	ldrb	r3, [r7, #4]
 8000a50:	3301      	adds	r3, #1
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	797a      	ldrb	r2, [r7, #5]
 8000a56:	79f8      	ldrb	r0, [r7, #7]
 8000a58:	2405      	movs	r4, #5
 8000a5a:	9400      	str	r4, [sp, #0]
 8000a5c:	f7ff feee 	bl	800083c <CheckForWinnerHelper>
 8000a60:	4603      	mov	r3, r0
 8000a62:	e059      	b.n	8000b18 <CheckForWinnerHelper+0x2dc>
			}
			return false;
 8000a64:	2300      	movs	r3, #0
 8000a66:	e057      	b.n	8000b18 <CheckForWinnerHelper+0x2dc>
		break;
		case DOWN_LEFT:
			if (x > 0 && y > 0){
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d024      	beq.n	8000ab8 <CheckForWinnerHelper+0x27c>
 8000a6e:	79bb      	ldrb	r3, [r7, #6]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d021      	beq.n	8000ab8 <CheckForWinnerHelper+0x27c>
				ChipColor downLeft = gameboard.column[x-1].contents[y-1];
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	1e5a      	subs	r2, r3, #1
 8000a78:	79bb      	ldrb	r3, [r7, #6]
 8000a7a:	1e59      	subs	r1, r3, #1
 8000a7c:	4828      	ldr	r0, [pc, #160]	@ (8000b20 <CheckForWinnerHelper+0x2e4>)
 8000a7e:	4613      	mov	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4403      	add	r3, r0
 8000a88:	440b      	add	r3, r1
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	73bb      	strb	r3, [r7, #14]
				if (downLeft == color)
 8000a90:	7bba      	ldrb	r2, [r7, #14]
 8000a92:	797b      	ldrb	r3, [r7, #5]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d10f      	bne.n	8000ab8 <CheckForWinnerHelper+0x27c>
					return CheckForWinnerHelper(x-1, y-1, color, numSame+1, DOWN_LEFT);
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	b2d8      	uxtb	r0, r3
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	b2d9      	uxtb	r1, r3
 8000aa4:	793b      	ldrb	r3, [r7, #4]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	797a      	ldrb	r2, [r7, #5]
 8000aac:	2406      	movs	r4, #6
 8000aae:	9400      	str	r4, [sp, #0]
 8000ab0:	f7ff fec4 	bl	800083c <CheckForWinnerHelper>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	e02f      	b.n	8000b18 <CheckForWinnerHelper+0x2dc>
			}
			return false;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e02d      	b.n	8000b18 <CheckForWinnerHelper+0x2dc>
		break;
		case LEFT:
			if (x > 0){
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d01e      	beq.n	8000b00 <CheckForWinnerHelper+0x2c4>
				ChipColor left = gameboard.column[x-1].contents[y];
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	79b9      	ldrb	r1, [r7, #6]
 8000ac8:	4815      	ldr	r0, [pc, #84]	@ (8000b20 <CheckForWinnerHelper+0x2e4>)
 8000aca:	4613      	mov	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4403      	add	r3, r0
 8000ad4:	440b      	add	r3, r1
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	73fb      	strb	r3, [r7, #15]
				if (left == color)
 8000adc:	7bfa      	ldrb	r2, [r7, #15]
 8000ade:	797b      	ldrb	r3, [r7, #5]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d10d      	bne.n	8000b00 <CheckForWinnerHelper+0x2c4>
					return CheckForWinnerHelper(x-1, y, color, numSame+1, LEFT);
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	b2d8      	uxtb	r0, r3
 8000aea:	793b      	ldrb	r3, [r7, #4]
 8000aec:	3301      	adds	r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	797a      	ldrb	r2, [r7, #5]
 8000af2:	79b9      	ldrb	r1, [r7, #6]
 8000af4:	2407      	movs	r4, #7
 8000af6:	9400      	str	r4, [sp, #0]
 8000af8:	f7ff fea0 	bl	800083c <CheckForWinnerHelper>
 8000afc:	4603      	mov	r3, r0
 8000afe:	e00b      	b.n	8000b18 <CheckForWinnerHelper+0x2dc>
			}
			return false;
 8000b00:	2300      	movs	r3, #0
 8000b02:	e009      	b.n	8000b18 <CheckForWinnerHelper+0x2dc>
		break;
		default:
			LCD_Clear(0, LCD_COLOR_RED);
 8000b04:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f000 fbe3 	bl	80012d4 <LCD_Clear>
			HAL_Delay(3000);
 8000b0e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000b12:	f002 fba3 	bl	800325c <HAL_Delay>
			return false;
 8000b16:	2300      	movs	r3, #0
	}
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd90      	pop	{r4, r7, pc}
 8000b20:	20000040 	.word	0x20000040

08000b24 <CheckForWinner>:

bool CheckForWinner(uint8_t x, uint8_t y, ChipColor color){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af02      	add	r7, sp, #8
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	71bb      	strb	r3, [r7, #6]
 8000b32:	4613      	mov	r3, r2
 8000b34:	717b      	strb	r3, [r7, #5]
	if (x > 0 && y < NUM_ROWS-1){
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d013      	beq.n	8000b64 <CheckForWinner+0x40>
 8000b3c:	79bb      	ldrb	r3, [r7, #6]
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d810      	bhi.n	8000b64 <CheckForWinner+0x40>
		if (CheckForWinnerHelper(x-1, y+1, color, 1, UP_LEFT)) return true;
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	3b01      	subs	r3, #1
 8000b46:	b2d8      	uxtb	r0, r3
 8000b48:	79bb      	ldrb	r3, [r7, #6]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	b2d9      	uxtb	r1, r3
 8000b4e:	797a      	ldrb	r2, [r7, #5]
 8000b50:	2300      	movs	r3, #0
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	2301      	movs	r3, #1
 8000b56:	f7ff fe71 	bl	800083c <CheckForWinnerHelper>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <CheckForWinner+0x40>
 8000b60:	2301      	movs	r3, #1
 8000b62:	e08d      	b.n	8000c80 <CheckForWinner+0x15c>
	}
	if (y < NUM_ROWS-1){
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d80e      	bhi.n	8000b88 <CheckForWinner+0x64>
		if (CheckForWinnerHelper(x, y+1, color, 1, UP)) return true;
 8000b6a:	79bb      	ldrb	r3, [r7, #6]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	b2d9      	uxtb	r1, r3
 8000b70:	797a      	ldrb	r2, [r7, #5]
 8000b72:	79f8      	ldrb	r0, [r7, #7]
 8000b74:	2301      	movs	r3, #1
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f7ff fe5f 	bl	800083c <CheckForWinnerHelper>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <CheckForWinner+0x64>
 8000b84:	2301      	movs	r3, #1
 8000b86:	e07b      	b.n	8000c80 <CheckForWinner+0x15c>
	}
	if (x < NUM_COLUMNS-1 && y < NUM_ROWS-1){
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b05      	cmp	r3, #5
 8000b8c:	d813      	bhi.n	8000bb6 <CheckForWinner+0x92>
 8000b8e:	79bb      	ldrb	r3, [r7, #6]
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d810      	bhi.n	8000bb6 <CheckForWinner+0x92>
		if (CheckForWinnerHelper(x+1, y+1, color, 1, UP_RIGHT)) return true;
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	3301      	adds	r3, #1
 8000b98:	b2d8      	uxtb	r0, r3
 8000b9a:	79bb      	ldrb	r3, [r7, #6]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	b2d9      	uxtb	r1, r3
 8000ba0:	797a      	ldrb	r2, [r7, #5]
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	f7ff fe48 	bl	800083c <CheckForWinnerHelper>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <CheckForWinner+0x92>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e064      	b.n	8000c80 <CheckForWinner+0x15c>
	}
	if (x < NUM_COLUMNS-1){
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b05      	cmp	r3, #5
 8000bba:	d80e      	bhi.n	8000bda <CheckForWinner+0xb6>
		if (CheckForWinnerHelper(x+1, y, color, 1, RIGHT)) return true;
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	b2d8      	uxtb	r0, r3
 8000bc2:	797a      	ldrb	r2, [r7, #5]
 8000bc4:	79b9      	ldrb	r1, [r7, #6]
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2301      	movs	r3, #1
 8000bcc:	f7ff fe36 	bl	800083c <CheckForWinnerHelper>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <CheckForWinner+0xb6>
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e052      	b.n	8000c80 <CheckForWinner+0x15c>
	}
	if (x < NUM_COLUMNS-1 && y > 0){
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b05      	cmp	r3, #5
 8000bde:	d813      	bhi.n	8000c08 <CheckForWinner+0xe4>
 8000be0:	79bb      	ldrb	r3, [r7, #6]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d010      	beq.n	8000c08 <CheckForWinner+0xe4>
		if (CheckForWinnerHelper(x+1, y-1, color, 1, DOWN_RIGHT)) return true;
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	3301      	adds	r3, #1
 8000bea:	b2d8      	uxtb	r0, r3
 8000bec:	79bb      	ldrb	r3, [r7, #6]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	b2d9      	uxtb	r1, r3
 8000bf2:	797a      	ldrb	r2, [r7, #5]
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	f7ff fe1f 	bl	800083c <CheckForWinnerHelper>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <CheckForWinner+0xe4>
 8000c04:	2301      	movs	r3, #1
 8000c06:	e03b      	b.n	8000c80 <CheckForWinner+0x15c>
	}
	if (y > 0){
 8000c08:	79bb      	ldrb	r3, [r7, #6]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00e      	beq.n	8000c2c <CheckForWinner+0x108>
		if (CheckForWinnerHelper(x, y-1, color, 1, DOWN)) return true;
 8000c0e:	79bb      	ldrb	r3, [r7, #6]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	b2d9      	uxtb	r1, r3
 8000c14:	797a      	ldrb	r2, [r7, #5]
 8000c16:	79f8      	ldrb	r0, [r7, #7]
 8000c18:	2305      	movs	r3, #5
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	f7ff fe0d 	bl	800083c <CheckForWinnerHelper>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <CheckForWinner+0x108>
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e029      	b.n	8000c80 <CheckForWinner+0x15c>
	}
	if (x > 0 && y > 0){
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d013      	beq.n	8000c5a <CheckForWinner+0x136>
 8000c32:	79bb      	ldrb	r3, [r7, #6]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d010      	beq.n	8000c5a <CheckForWinner+0x136>
		if (CheckForWinnerHelper(x-1, y-1, color, 1, DOWN_LEFT)) return true;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	b2d8      	uxtb	r0, r3
 8000c3e:	79bb      	ldrb	r3, [r7, #6]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	b2d9      	uxtb	r1, r3
 8000c44:	797a      	ldrb	r2, [r7, #5]
 8000c46:	2306      	movs	r3, #6
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	f7ff fdf6 	bl	800083c <CheckForWinnerHelper>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <CheckForWinner+0x136>
 8000c56:	2301      	movs	r3, #1
 8000c58:	e012      	b.n	8000c80 <CheckForWinner+0x15c>
	}
	if (x > 0){
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d00e      	beq.n	8000c7e <CheckForWinner+0x15a>
		if (CheckForWinnerHelper(x-1, y, color, 1, LEFT)) return true;
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	b2d8      	uxtb	r0, r3
 8000c66:	797a      	ldrb	r2, [r7, #5]
 8000c68:	79b9      	ldrb	r1, [r7, #6]
 8000c6a:	2307      	movs	r3, #7
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	f7ff fde4 	bl	800083c <CheckForWinnerHelper>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <CheckForWinner+0x15a>
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e000      	b.n	8000c80 <CheckForWinner+0x15c>
	}
	return false;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <PlayTwoPlayer>:

void PlayTwoPlayer(){
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b087      	sub	sp, #28
 8000c8c:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_COLUMNS; i++){
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	e020      	b.n	8000cd6 <PlayTwoPlayer+0x4e>
		gameboard.column[i].currentHeight = 0;
 8000c94:	4966      	ldr	r1, [pc, #408]	@ (8000e30 <PlayTwoPlayer+0x1a8>)
 8000c96:	697a      	ldr	r2, [r7, #20]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4413      	add	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	440b      	add	r3, r1
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	801a      	strh	r2, [r3, #0]
		for (int j=0; j<6; j++){
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	e00e      	b.n	8000cca <PlayTwoPlayer+0x42>
			gameboard.column[i].contents[j] = EMPTY;
 8000cac:	4960      	ldr	r1, [pc, #384]	@ (8000e30 <PlayTwoPlayer+0x1a8>)
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	18ca      	adds	r2, r1, r3
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	701a      	strb	r2, [r3, #0]
		for (int j=0; j<6; j++){
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	2b05      	cmp	r3, #5
 8000cce:	dded      	ble.n	8000cac <PlayTwoPlayer+0x24>
	for (int i=0; i<NUM_COLUMNS; i++){
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	2b06      	cmp	r3, #6
 8000cda:	dddb      	ble.n	8000c94 <PlayTwoPlayer+0xc>
		}
	}
	gameboard.whosTurn = YELLOW;
 8000cdc:	4b54      	ldr	r3, [pc, #336]	@ (8000e30 <PlayTwoPlayer+0x1a8>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

	bool gameOver = false;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
	uint8_t previousColumn = currentColumn;
 8000ce8:	4b52      	ldr	r3, [pc, #328]	@ (8000e34 <PlayTwoPlayer+0x1ac>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	73bb      	strb	r3, [r7, #14]

	LCD_Draw_Circle_Fill(CHIP_HSPACE*currentColumn, CHIP_VSPACE, CHIP_RADIUS, LCD_COLOR_YELLOW);
 8000cee:	4b51      	ldr	r3, [pc, #324]	@ (8000e34 <PlayTwoPlayer+0x1ac>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	b298      	uxth	r0, r3
 8000cfc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000d00:	220a      	movs	r2, #10
 8000d02:	211e      	movs	r1, #30
 8000d04:	f000 fa6c 	bl	80011e0 <LCD_Draw_Circle_Fill>

	while (!gameOver){
 8000d08:	e082      	b.n	8000e10 <PlayTwoPlayer+0x188>
		uint16_t playerColor = SWITCH_COLOR(gameboard.whosTurn);
 8000d0a:	4b49      	ldr	r3, [pc, #292]	@ (8000e30 <PlayTwoPlayer+0x1a8>)
 8000d0c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d102      	bne.n	8000d1a <PlayTwoPlayer+0x92>
 8000d14:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000d18:	e001      	b.n	8000d1e <PlayTwoPlayer+0x96>
 8000d1a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d1e:	81bb      	strh	r3, [r7, #12]
		if (switchColumn(&StaticTouchData, &currentColumn)){
 8000d20:	4944      	ldr	r1, [pc, #272]	@ (8000e34 <PlayTwoPlayer+0x1ac>)
 8000d22:	4845      	ldr	r0, [pc, #276]	@ (8000e38 <PlayTwoPlayer+0x1b0>)
 8000d24:	f000 fcbc 	bl	80016a0 <switchColumn>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d01a      	beq.n	8000d64 <PlayTwoPlayer+0xdc>
			LCD_Draw_Circle_Fill(CHIP_HSPACE*previousColumn, CHIP_VSPACE, CHIP_RADIUS, LCD_COLOR_BLUE);
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	461a      	mov	r2, r3
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	b298      	uxth	r0, r3
 8000d3c:	231f      	movs	r3, #31
 8000d3e:	220a      	movs	r2, #10
 8000d40:	211e      	movs	r1, #30
 8000d42:	f000 fa4d 	bl	80011e0 <LCD_Draw_Circle_Fill>
			LCD_Draw_Circle_Fill(CHIP_HSPACE*currentColumn, CHIP_VSPACE, CHIP_RADIUS, playerColor);
 8000d46:	4b3b      	ldr	r3, [pc, #236]	@ (8000e34 <PlayTwoPlayer+0x1ac>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	b298      	uxth	r0, r3
 8000d54:	89bb      	ldrh	r3, [r7, #12]
 8000d56:	220a      	movs	r2, #10
 8000d58:	211e      	movs	r1, #30
 8000d5a:	f000 fa41 	bl	80011e0 <LCD_Draw_Circle_Fill>
			previousColumn = currentColumn;
 8000d5e:	4b35      	ldr	r3, [pc, #212]	@ (8000e34 <PlayTwoPlayer+0x1ac>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	73bb      	strb	r3, [r7, #14]
		}
		uint32_t eventsToRun = getScheduledEvents();
 8000d64:	f000 fd2c 	bl	80017c0 <getScheduledEvents>
 8000d68:	60b8      	str	r0, [r7, #8]
		if (eventsToRun & DROP_CHIP){
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d04a      	beq.n	8000e0a <PlayTwoPlayer+0x182>
			removeSchedulerEvent(DROP_CHIP);
 8000d74:	2002      	movs	r0, #2
 8000d76:	f000 fd41 	bl	80017fc <removeSchedulerEvent>
			dropChip(&gameboard, currentColumn, playerColor);
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e34 <PlayTwoPlayer+0x1ac>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	89ba      	ldrh	r2, [r7, #12]
 8000d80:	4619      	mov	r1, r3
 8000d82:	482b      	ldr	r0, [pc, #172]	@ (8000e30 <PlayTwoPlayer+0x1a8>)
 8000d84:	f000 fcc1 	bl	800170a <dropChip>
			playerColor = SWITCH_COLOR(gameboard.whosTurn);
 8000d88:	4b29      	ldr	r3, [pc, #164]	@ (8000e30 <PlayTwoPlayer+0x1a8>)
 8000d8a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d102      	bne.n	8000d98 <PlayTwoPlayer+0x110>
 8000d92:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000d96:	e001      	b.n	8000d9c <PlayTwoPlayer+0x114>
 8000d98:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d9c:	81bb      	strh	r3, [r7, #12]
			LCD_Draw_Circle_Fill(CHIP_HSPACE*currentColumn, CHIP_VSPACE, CHIP_RADIUS, playerColor);
 8000d9e:	4b25      	ldr	r3, [pc, #148]	@ (8000e34 <PlayTwoPlayer+0x1ac>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	b298      	uxth	r0, r3
 8000dac:	89bb      	ldrh	r3, [r7, #12]
 8000dae:	220a      	movs	r2, #10
 8000db0:	211e      	movs	r1, #30
 8000db2:	f000 fa15 	bl	80011e0 <LCD_Draw_Circle_Fill>

			uint8_t x = currentColumn-1;
 8000db6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e34 <PlayTwoPlayer+0x1ac>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	71fb      	strb	r3, [r7, #7]
			uint8_t y = gameboard.column[currentColumn-1].currentHeight-1;
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e34 <PlayTwoPlayer+0x1ac>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	1e5a      	subs	r2, r3, #1
 8000dc4:	491a      	ldr	r1, [pc, #104]	@ (8000e30 <PlayTwoPlayer+0x1a8>)
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	440b      	add	r3, r1
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	71bb      	strb	r3, [r7, #6]
			gameboard.column[x].contents[y] = gameboard.whosTurn;
 8000dd8:	79fa      	ldrb	r2, [r7, #7]
 8000dda:	79b9      	ldrb	r1, [r7, #6]
 8000ddc:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <PlayTwoPlayer+0x1a8>)
 8000dde:	f893 4046 	ldrb.w	r4, [r3, #70]	@ 0x46
 8000de2:	4813      	ldr	r0, [pc, #76]	@ (8000e30 <PlayTwoPlayer+0x1a8>)
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	4403      	add	r3, r0
 8000dee:	440b      	add	r3, r1
 8000df0:	3302      	adds	r3, #2
 8000df2:	4622      	mov	r2, r4
 8000df4:	701a      	strb	r2, [r3, #0]
			gameOver = CheckForWinner(x, y, gameboard.whosTurn);
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <PlayTwoPlayer+0x1a8>)
 8000df8:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8000dfc:	79b9      	ldrb	r1, [r7, #6]
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fe8f 	bl	8000b24 <CheckForWinner>
 8000e06:	4603      	mov	r3, r0
 8000e08:	73fb      	strb	r3, [r7, #15]
		}
		HAL_Delay(100);
 8000e0a:	2064      	movs	r0, #100	@ 0x64
 8000e0c:	f002 fa26 	bl	800325c <HAL_Delay>
	while (!gameOver){
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	f083 0301 	eor.w	r3, r3, #1
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f47f af76 	bne.w	8000d0a <PlayTwoPlayer+0x82>
	}
	winner = gameboard.whosTurn;
 8000e1e:	4b04      	ldr	r3, [pc, #16]	@ (8000e30 <PlayTwoPlayer+0x1a8>)
 8000e20:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <PlayTwoPlayer+0x1b4>)
 8000e26:	701a      	strb	r2, [r3, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	371c      	adds	r7, #28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd90      	pop	{r4, r7, pc}
 8000e30:	20000040 	.word	0x20000040
 8000e34:	20000000 	.word	0x20000000
 8000e38:	2000008c 	.word	0x2000008c
 8000e3c:	20000088 	.word	0x20000088

08000e40 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000e44:	2006      	movs	r0, #6
 8000e46:	f002 fb56 	bl	80034f6 <HAL_NVIC_DisableIRQ>
	if (gameboard.column[currentColumn-1].currentHeight < NUM_ROWS)
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <EXTI0_IRQHandler+0x38>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	1e5a      	subs	r2, r3, #1
 8000e50:	490a      	ldr	r1, [pc, #40]	@ (8000e7c <EXTI0_IRQHandler+0x3c>)
 8000e52:	4613      	mov	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	440b      	add	r3, r1
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	2b05      	cmp	r3, #5
 8000e60:	d802      	bhi.n	8000e68 <EXTI0_IRQHandler+0x28>
		addSchedulerEvent(DROP_CHIP);
 8000e62:	2002      	movs	r0, #2
 8000e64:	f000 fcb8 	bl	80017d8 <addSchedulerEvent>
	__HAL_GPIO_EXTI_CLEAR_FLAG(BTN_PIN);
 8000e68:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <EXTI0_IRQHandler+0x40>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e6e:	2006      	movs	r0, #6
 8000e70:	f002 fb33 	bl	80034da <HAL_NVIC_EnableIRQ>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000040 	.word	0x20000040
 8000e80:	40013c00 	.word	0x40013c00

08000e84 <ButtonInit>:
 *      Author: mrflu
 */

#include "Button_Driver.h"

void ButtonInit(){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef PC;
	PC.Pin = BTN_PIN;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	607b      	str	r3, [r7, #4]
	PC.Mode = GPIO_MODE_IT_RISING;
 8000e8e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e92:	60bb      	str	r3, [r7, #8]
	PC.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
	PC.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	613b      	str	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <ButtonInit+0x4c>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <ButtonInit+0x4c>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <ButtonInit+0x4c>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &PC);
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <ButtonInit+0x50>)
 8000ebe:	f002 fb35 	bl	800352c <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ec2:	2006      	movs	r0, #6
 8000ec4:	f002 fb09 	bl	80034da <HAL_NVIC_EnableIRQ>
}
 8000ec8:	bf00      	nop
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020000 	.word	0x40020000

08000ed8 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	@ 0x30
 8000edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
 8000ee2:	4b5a      	ldr	r3, [pc, #360]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	4a59      	ldr	r2, [pc, #356]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000ee8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eee:	4b57      	ldr	r3, [pc, #348]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	4b53      	ldr	r3, [pc, #332]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a52      	ldr	r2, [pc, #328]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b50      	ldr	r3, [pc, #320]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b4c      	ldr	r3, [pc, #304]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a4b      	ldr	r2, [pc, #300]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b49      	ldr	r3, [pc, #292]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b45      	ldr	r3, [pc, #276]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a44      	ldr	r2, [pc, #272]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b42      	ldr	r3, [pc, #264]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b3e      	ldr	r3, [pc, #248]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a3d      	ldr	r2, [pc, #244]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b37      	ldr	r3, [pc, #220]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	4a36      	ldr	r2, [pc, #216]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000f74:	f043 0320 	orr.w	r3, r3, #32
 8000f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7a:	4b34      	ldr	r3, [pc, #208]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	f003 0320 	and.w	r3, r3, #32
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	4b30      	ldr	r3, [pc, #192]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a2f      	ldr	r2, [pc, #188]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000f90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b2d      	ldr	r3, [pc, #180]	@ (800104c <LCD_GPIO_Init+0x174>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000fa2:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000fa6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000fb4:	230e      	movs	r3, #14
 8000fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4824      	ldr	r0, [pc, #144]	@ (8001050 <LCD_GPIO_Init+0x178>)
 8000fc0:	f002 fab4 	bl	800352c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000fc4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000fc8:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4820      	ldr	r0, [pc, #128]	@ (8001054 <LCD_GPIO_Init+0x17c>)
 8000fd2:	f002 faab 	bl	800352c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000fd6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000fda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	481d      	ldr	r0, [pc, #116]	@ (8001058 <LCD_GPIO_Init+0x180>)
 8000fe4:	f002 faa2 	bl	800352c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000fe8:	2348      	movs	r3, #72	@ 0x48
 8000fea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	481a      	ldr	r0, [pc, #104]	@ (800105c <LCD_GPIO_Init+0x184>)
 8000ff4:	f002 fa9a 	bl	800352c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000ff8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4816      	ldr	r0, [pc, #88]	@ (8001060 <LCD_GPIO_Init+0x188>)
 8001006:	f002 fa91 	bl	800352c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800100a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800100e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	4813      	ldr	r0, [pc, #76]	@ (8001064 <LCD_GPIO_Init+0x18c>)
 8001018:	f002 fa88 	bl	800352c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800101c:	2303      	movs	r3, #3
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001020:	2309      	movs	r3, #9
 8001022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	480a      	ldr	r0, [pc, #40]	@ (8001054 <LCD_GPIO_Init+0x17c>)
 800102c:	f002 fa7e 	bl	800352c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001030:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	4809      	ldr	r0, [pc, #36]	@ (8001064 <LCD_GPIO_Init+0x18c>)
 800103e:	f002 fa75 	bl	800352c <HAL_GPIO_Init>
}
 8001042:	bf00      	nop
 8001044:	3730      	adds	r7, #48	@ 0x30
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020400 	.word	0x40020400
 8001058:	40020800 	.word	0x40020800
 800105c:	40020c00 	.word	0x40020c00
 8001060:	40021400 	.word	0x40021400
 8001064:	40021800 	.word	0x40021800

08001068 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b090      	sub	sp, #64	@ 0x40
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001076:	23f0      	movs	r3, #240	@ 0xf0
 8001078:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800107e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001082:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001084:	2302      	movs	r3, #2
 8001086:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001088:	23ff      	movs	r3, #255	@ 0xff
 800108a:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001090:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001096:	2305      	movs	r3, #5
 8001098:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <LTCD_Layer_Init+0x78>)
 80010a2:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80010a4:	23f0      	movs	r3, #240	@ 0xf0
 80010a6:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80010a8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80010ac:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80010c0:	79fa      	ldrb	r2, [r7, #7]
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4619      	mov	r1, r3
 80010c8:	4806      	ldr	r0, [pc, #24]	@ (80010e4 <LTCD_Layer_Init+0x7c>)
 80010ca:	f003 fe71 	bl	8004db0 <HAL_LTDC_ConfigLayer>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80010d4:	f000 fa9d 	bl	8001612 <LCD_Error_Handler>
	}
}
 80010d8:	bf00      	nop
 80010da:	3740      	adds	r7, #64	@ 0x40
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000170 	.word	0x20000170
 80010e4:	20000094 	.word	0x20000094

080010e8 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80010ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001198 <LTCD__Init+0xb0>)
 80010ee:	4a2b      	ldr	r2, [pc, #172]	@ (800119c <LTCD__Init+0xb4>)
 80010f0:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80010f2:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <LTCD__Init+0xb0>)
 80010f4:	2209      	movs	r2, #9
 80010f6:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80010f8:	4b27      	ldr	r3, [pc, #156]	@ (8001198 <LTCD__Init+0xb0>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80010fe:	4b26      	ldr	r3, [pc, #152]	@ (8001198 <LTCD__Init+0xb0>)
 8001100:	221d      	movs	r2, #29
 8001102:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001104:	4b24      	ldr	r3, [pc, #144]	@ (8001198 <LTCD__Init+0xb0>)
 8001106:	2203      	movs	r2, #3
 8001108:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800110a:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <LTCD__Init+0xb0>)
 800110c:	f240 120d 	movw	r2, #269	@ 0x10d
 8001110:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <LTCD__Init+0xb0>)
 8001114:	f240 1243 	movw	r2, #323	@ 0x143
 8001118:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800111a:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <LTCD__Init+0xb0>)
 800111c:	f240 1217 	movw	r2, #279	@ 0x117
 8001120:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001122:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <LTCD__Init+0xb0>)
 8001124:	f240 1247 	movw	r2, #327	@ 0x147
 8001128:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800112a:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <LTCD__Init+0xb0>)
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001132:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <LTCD__Init+0xb0>)
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <LTCD__Init+0xb0>)
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001142:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <LTCD__Init+0xb8>)
 8001144:	2208      	movs	r2, #8
 8001146:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001148:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <LTCD__Init+0xb8>)
 800114a:	22c0      	movs	r2, #192	@ 0xc0
 800114c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800114e:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <LTCD__Init+0xb8>)
 8001150:	2204      	movs	r2, #4
 8001152:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001154:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <LTCD__Init+0xb8>)
 8001156:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800115a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800115c:	4810      	ldr	r0, [pc, #64]	@ (80011a0 <LTCD__Init+0xb8>)
 800115e:	f004 fc81 	bl	8005a64 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001162:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <LTCD__Init+0xb0>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001168:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <LTCD__Init+0xb0>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800116e:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <LTCD__Init+0xb0>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001174:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <LTCD__Init+0xb0>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800117a:	f7ff fead 	bl	8000ed8 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800117e:	4806      	ldr	r0, [pc, #24]	@ (8001198 <LTCD__Init+0xb0>)
 8001180:	f003 fd46 	bl	8004c10 <HAL_LTDC_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800118a:	f000 fa42 	bl	8001612 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800118e:	f000 fb49 	bl	8001824 <ili9341_Init>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000094 	.word	0x20000094
 800119c:	40016800 	.word	0x40016800
 80011a0:	2000013c 	.word	0x2000013c

080011a4 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
 80011ae:	460b      	mov	r3, r1
 80011b0:	80bb      	strh	r3, [r7, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80011b6:	88ba      	ldrh	r2, [r7, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	1a9b      	subs	r3, r3, r2
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	461a      	mov	r2, r3
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	4413      	add	r3, r2
 80011c6:	4905      	ldr	r1, [pc, #20]	@ (80011dc <LCD_Draw_Pixel+0x38>)
 80011c8:	887a      	ldrh	r2, [r7, #2]
 80011ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000170 	.word	0x20000170

080011e0 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4604      	mov	r4, r0
 80011e8:	4608      	mov	r0, r1
 80011ea:	4611      	mov	r1, r2
 80011ec:	461a      	mov	r2, r3
 80011ee:	4623      	mov	r3, r4
 80011f0:	80fb      	strh	r3, [r7, #6]
 80011f2:	4603      	mov	r3, r0
 80011f4:	80bb      	strh	r3, [r7, #4]
 80011f6:	460b      	mov	r3, r1
 80011f8:	807b      	strh	r3, [r7, #2]
 80011fa:	4613      	mov	r3, r2
 80011fc:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 80011fe:	887b      	ldrh	r3, [r7, #2]
 8001200:	425b      	negs	r3, r3
 8001202:	b29b      	uxth	r3, r3
 8001204:	81fb      	strh	r3, [r7, #14]
 8001206:	e034      	b.n	8001272 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8001208:	887b      	ldrh	r3, [r7, #2]
 800120a:	425b      	negs	r3, r3
 800120c:	b29b      	uxth	r3, r3
 800120e:	81bb      	strh	r3, [r7, #12]
 8001210:	e024      	b.n	800125c <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8001212:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001216:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800121a:	fb03 f202 	mul.w	r2, r3, r2
 800121e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001222:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001226:	fb01 f303 	mul.w	r3, r1, r3
 800122a:	441a      	add	r2, r3
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	8879      	ldrh	r1, [r7, #2]
 8001230:	fb01 f303 	mul.w	r3, r1, r3
 8001234:	429a      	cmp	r2, r3
 8001236:	dc0b      	bgt.n	8001250 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8001238:	89ba      	ldrh	r2, [r7, #12]
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	4413      	add	r3, r2
 800123e:	b298      	uxth	r0, r3
 8001240:	89fa      	ldrh	r2, [r7, #14]
 8001242:	88bb      	ldrh	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	b29b      	uxth	r3, r3
 8001248:	883a      	ldrh	r2, [r7, #0]
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff ffaa 	bl	80011a4 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8001250:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001254:	b29b      	uxth	r3, r3
 8001256:	3301      	adds	r3, #1
 8001258:	b29b      	uxth	r3, r3
 800125a:	81bb      	strh	r3, [r7, #12]
 800125c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001260:	887b      	ldrh	r3, [r7, #2]
 8001262:	429a      	cmp	r2, r3
 8001264:	ddd5      	ble.n	8001212 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8001266:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800126a:	b29b      	uxth	r3, r3
 800126c:	3301      	adds	r3, #1
 800126e:	b29b      	uxth	r3, r3
 8001270:	81fb      	strh	r3, [r7, #14]
 8001272:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	429a      	cmp	r2, r3
 800127a:	ddc5      	ble.n	8001208 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	bd90      	pop	{r4, r7, pc}

08001286 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001286:	b590      	push	{r4, r7, lr}
 8001288:	b085      	sub	sp, #20
 800128a:	af00      	add	r7, sp, #0
 800128c:	4604      	mov	r4, r0
 800128e:	4608      	mov	r0, r1
 8001290:	4611      	mov	r1, r2
 8001292:	461a      	mov	r2, r3
 8001294:	4623      	mov	r3, r4
 8001296:	80fb      	strh	r3, [r7, #6]
 8001298:	4603      	mov	r3, r0
 800129a:	80bb      	strh	r3, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
 80012a0:	4613      	mov	r3, r2
 80012a2:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	81fb      	strh	r3, [r7, #14]
 80012a8:	e00b      	b.n	80012c2 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 80012aa:	89fa      	ldrh	r2, [r7, #14]
 80012ac:	88bb      	ldrh	r3, [r7, #4]
 80012ae:	4413      	add	r3, r2
 80012b0:	b299      	uxth	r1, r3
 80012b2:	883a      	ldrh	r2, [r7, #0]
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff74 	bl	80011a4 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80012bc:	89fb      	ldrh	r3, [r7, #14]
 80012be:	3301      	adds	r3, #1
 80012c0:	81fb      	strh	r3, [r7, #14]
 80012c2:	89fa      	ldrh	r2, [r7, #14]
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d3ef      	bcc.n	80012aa <LCD_Draw_Vertical_Line+0x24>
  }
}
 80012ca:	bf00      	nop
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd90      	pop	{r4, r7, pc}

080012d4 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	460a      	mov	r2, r1
 80012de:	71fb      	strb	r3, [r7, #7]
 80012e0:	4613      	mov	r3, r2
 80012e2:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10e      	bne.n	8001308 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	e007      	b.n	8001300 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80012f0:	4908      	ldr	r1, [pc, #32]	@ (8001314 <LCD_Clear+0x40>)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	88ba      	ldrh	r2, [r7, #4]
 80012f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3301      	adds	r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001306:	d3f3      	bcc.n	80012f0 <LCD_Clear+0x1c>
		}
	}
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20000170 	.word	0x20000170

08001318 <LCD_SetTextColor>:

void LCD_SetTextColor(uint16_t Color)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001322:	4a04      	ldr	r2, [pc, #16]	@ (8001334 <LCD_SetTextColor+0x1c>)
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	8013      	strh	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	20000002 	.word	0x20000002

08001338 <LCD_SetFont>:

void LCD_SetFont(FONT_t *fonts)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001340:	4a04      	ldr	r2, [pc, #16]	@ (8001354 <LCD_SetFont+0x1c>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6013      	str	r3, [r2, #0]
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	2000016c 	.word	0x2000016c

08001358 <LCD_Draw_Char>:

void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	603a      	str	r2, [r7, #0]
 8001362:	80fb      	strh	r3, [r7, #6]
 8001364:	460b      	mov	r3, r1
 8001366:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e04c      	b.n	8001410 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	e03f      	b.n	80013fc <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	4413      	add	r3, r2
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	4619      	mov	r1, r3
 8001388:	4b27      	ldr	r3, [pc, #156]	@ (8001428 <LCD_Draw_Char+0xd0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	889b      	ldrh	r3, [r3, #4]
 800138e:	4a27      	ldr	r2, [pc, #156]	@ (800142c <LCD_Draw_Char+0xd4>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	08db      	lsrs	r3, r3, #3
 8001396:	b29b      	uxth	r3, r3
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	2280      	movs	r2, #128	@ 0x80
 800139c:	409a      	lsls	r2, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	fa42 f303 	asr.w	r3, r2, r3
 80013a4:	400b      	ands	r3, r1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d104      	bne.n	80013b4 <LCD_Draw_Char+0x5c>
 80013aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <LCD_Draw_Char+0xd0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	889b      	ldrh	r3, [r3, #4]
 80013b0:	2b0c      	cmp	r3, #12
 80013b2:	d920      	bls.n	80013f6 <LCD_Draw_Char+0x9e>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	fa42 f303 	asr.w	r3, r2, r3
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d104      	bne.n	80013d8 <LCD_Draw_Char+0x80>
 80013ce:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <LCD_Draw_Char+0xd0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	889b      	ldrh	r3, [r3, #4]
 80013d4:	2b0c      	cmp	r3, #12
 80013d6:	d80e      	bhi.n	80013f6 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	4413      	add	r3, r2
 80013e0:	b298      	uxth	r0, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	88bb      	ldrh	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4a10      	ldr	r2, [pc, #64]	@ (8001430 <LCD_Draw_Char+0xd8>)
 80013ee:	8812      	ldrh	r2, [r2, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7ff fed7 	bl	80011a4 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	3301      	adds	r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <LCD_Draw_Char+0xd0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	889b      	ldrh	r3, [r3, #4]
 8001402:	461a      	mov	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	4293      	cmp	r3, r2
 8001408:	d3b8      	bcc.n	800137c <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3301      	adds	r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <LCD_Draw_Char+0xd0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	88db      	ldrh	r3, [r3, #6]
 8001416:	461a      	mov	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4293      	cmp	r3, r2
 800141c:	d3ab      	bcc.n	8001376 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800141e:	bf00      	nop
 8001420:	bf00      	nop
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	2000016c 	.word	0x2000016c
 800142c:	aaaaaaab 	.word	0xaaaaaaab
 8001430:	20000002 	.word	0x20000002

08001434 <LCD_DisplayChar>:

void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
 800143e:	460b      	mov	r3, r1
 8001440:	80bb      	strh	r3, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	3b20      	subs	r3, #32
 800144a:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 800144c:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <LCD_DisplayChar+0x40>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	4907      	ldr	r1, [pc, #28]	@ (8001474 <LCD_DisplayChar+0x40>)
 8001456:	6809      	ldr	r1, [r1, #0]
 8001458:	88c9      	ldrh	r1, [r1, #6]
 800145a:	fb01 f303 	mul.w	r3, r1, r3
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	441a      	add	r2, r3
 8001462:	88b9      	ldrh	r1, [r7, #4]
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff76 	bl	8001358 <LCD_Draw_Char>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2000016c 	.word	0x2000016c

08001478 <displayEmptyBoard>:

void displayEmptyBoard(void){
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
	for (int i=1; i<9; i++){
 800147e:	2301      	movs	r3, #1
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	e02c      	b.n	80014de <displayEmptyBoard+0x66>
		LCD_Draw_Vertical_Line(30*i+14, 125, 195, LCD_COLOR_BLACK);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	b29b      	uxth	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	b29b      	uxth	r3, r3
 8001492:	330e      	adds	r3, #14
 8001494:	b298      	uxth	r0, r3
 8001496:	2300      	movs	r3, #0
 8001498:	22c3      	movs	r2, #195	@ 0xc3
 800149a:	217d      	movs	r1, #125	@ 0x7d
 800149c:	f7ff fef3 	bl	8001286 <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line(30*i+15, 125, 195, LCD_COLOR_BLACK);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	0112      	lsls	r2, r2, #4
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	330f      	adds	r3, #15
 80014b0:	b298      	uxth	r0, r3
 80014b2:	2300      	movs	r3, #0
 80014b4:	22c3      	movs	r2, #195	@ 0xc3
 80014b6:	217d      	movs	r1, #125	@ 0x7d
 80014b8:	f7ff fee5 	bl	8001286 <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line(30*i+16, 125, 195, LCD_COLOR_BLACK);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	461a      	mov	r2, r3
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3310      	adds	r3, #16
 80014cc:	b298      	uxth	r0, r3
 80014ce:	2300      	movs	r3, #0
 80014d0:	22c3      	movs	r2, #195	@ 0xc3
 80014d2:	217d      	movs	r1, #125	@ 0x7d
 80014d4:	f7ff fed7 	bl	8001286 <LCD_Draw_Vertical_Line>
	for (int i=1; i<9; i++){
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3301      	adds	r3, #1
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	ddcf      	ble.n	8001484 <displayEmptyBoard+0xc>
	}
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <displayFilledBoard>:

void displayFilledBoard(void){
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
	displayEmptyBoard();
 80014f4:	f7ff ffc0 	bl	8001478 <displayEmptyBoard>
	for (int i=0; i<6; i+=2){
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	e03d      	b.n	800157a <displayFilledBoard+0x8c>
		uint16_t height = 300-30*i;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	b29b      	uxth	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	b29b      	uxth	r3, r3
 800150c:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001510:	80bb      	strh	r3, [r7, #4]
		LCD_Draw_Circle_Fill(  CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_YELLOW);
 8001512:	88b9      	ldrh	r1, [r7, #4]
 8001514:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001518:	220a      	movs	r2, #10
 800151a:	201e      	movs	r0, #30
 800151c:	f7ff fe60 	bl	80011e0 <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(2*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_RED);
 8001520:	88b9      	ldrh	r1, [r7, #4]
 8001522:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001526:	220a      	movs	r2, #10
 8001528:	203c      	movs	r0, #60	@ 0x3c
 800152a:	f7ff fe59 	bl	80011e0 <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(3*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_YELLOW);
 800152e:	88b9      	ldrh	r1, [r7, #4]
 8001530:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001534:	220a      	movs	r2, #10
 8001536:	205a      	movs	r0, #90	@ 0x5a
 8001538:	f7ff fe52 	bl	80011e0 <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(4*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_RED);
 800153c:	88b9      	ldrh	r1, [r7, #4]
 800153e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001542:	220a      	movs	r2, #10
 8001544:	2078      	movs	r0, #120	@ 0x78
 8001546:	f7ff fe4b 	bl	80011e0 <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(5*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_YELLOW);
 800154a:	88b9      	ldrh	r1, [r7, #4]
 800154c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001550:	220a      	movs	r2, #10
 8001552:	2096      	movs	r0, #150	@ 0x96
 8001554:	f7ff fe44 	bl	80011e0 <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(6*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_RED);
 8001558:	88b9      	ldrh	r1, [r7, #4]
 800155a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800155e:	220a      	movs	r2, #10
 8001560:	20b4      	movs	r0, #180	@ 0xb4
 8001562:	f7ff fe3d 	bl	80011e0 <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(7*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_YELLOW);
 8001566:	88b9      	ldrh	r1, [r7, #4]
 8001568:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800156c:	220a      	movs	r2, #10
 800156e:	20d2      	movs	r0, #210	@ 0xd2
 8001570:	f7ff fe36 	bl	80011e0 <LCD_Draw_Circle_Fill>
	for (int i=0; i<6; i+=2){
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3302      	adds	r3, #2
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b05      	cmp	r3, #5
 800157e:	ddbe      	ble.n	80014fe <displayFilledBoard+0x10>
	}
	for (int i=1; i<6; i+=2){
 8001580:	2301      	movs	r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	e03d      	b.n	8001602 <displayFilledBoard+0x114>
		uint16_t height = 300-30*i;
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	b29b      	uxth	r3, r3
 800158a:	461a      	mov	r2, r3
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	b29b      	uxth	r3, r3
 8001594:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001598:	80fb      	strh	r3, [r7, #6]
		LCD_Draw_Circle_Fill(  CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_RED);
 800159a:	88f9      	ldrh	r1, [r7, #6]
 800159c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80015a0:	220a      	movs	r2, #10
 80015a2:	201e      	movs	r0, #30
 80015a4:	f7ff fe1c 	bl	80011e0 <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(2*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_YELLOW);
 80015a8:	88f9      	ldrh	r1, [r7, #6]
 80015aa:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80015ae:	220a      	movs	r2, #10
 80015b0:	203c      	movs	r0, #60	@ 0x3c
 80015b2:	f7ff fe15 	bl	80011e0 <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(3*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_RED);
 80015b6:	88f9      	ldrh	r1, [r7, #6]
 80015b8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80015bc:	220a      	movs	r2, #10
 80015be:	205a      	movs	r0, #90	@ 0x5a
 80015c0:	f7ff fe0e 	bl	80011e0 <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(4*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_YELLOW);
 80015c4:	88f9      	ldrh	r1, [r7, #6]
 80015c6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80015ca:	220a      	movs	r2, #10
 80015cc:	2078      	movs	r0, #120	@ 0x78
 80015ce:	f7ff fe07 	bl	80011e0 <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(5*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_RED);
 80015d2:	88f9      	ldrh	r1, [r7, #6]
 80015d4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80015d8:	220a      	movs	r2, #10
 80015da:	2096      	movs	r0, #150	@ 0x96
 80015dc:	f7ff fe00 	bl	80011e0 <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(6*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_YELLOW);
 80015e0:	88f9      	ldrh	r1, [r7, #6]
 80015e2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80015e6:	220a      	movs	r2, #10
 80015e8:	20b4      	movs	r0, #180	@ 0xb4
 80015ea:	f7ff fdf9 	bl	80011e0 <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(7*CHIP_HSPACE, height, CHIP_RADIUS, LCD_COLOR_RED);
 80015ee:	88f9      	ldrh	r1, [r7, #6]
 80015f0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80015f4:	220a      	movs	r2, #10
 80015f6:	20d2      	movs	r0, #210	@ 0xd2
 80015f8:	f7ff fdf2 	bl	80011e0 <LCD_Draw_Circle_Fill>
	for (int i=1; i<6; i+=2){
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	3302      	adds	r3, #2
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b05      	cmp	r3, #5
 8001606:	ddbe      	ble.n	8001586 <displayFilledBoard+0x98>
	}
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001616:	b672      	cpsid	i
}
 8001618:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800161a:	bf00      	nop
 800161c:	e7fd      	b.n	800161a <LCD_Error_Handler+0x8>

0800161e <InitializeLCDTouch>:
}

// Touch Functionality   //

void InitializeLCDTouch(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001622:	f001 fa1c 	bl	8002a5e <STMPE811_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b02      	cmp	r3, #2
 800162a:	d001      	beq.n	8001630 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <InitializeLCDTouch+0xe>
  }
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f001 fac6 	bl	8002bce <STMPE811_ReadTouch>
 8001642:	4603      	mov	r3, r0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <selectMode>:
void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
	STMPE811_Write(RegToWrite, writeData);
}

uint8_t selectMode(STMPE811_TouchData * touchStruct){
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	touchStruct->x = 0;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	801a      	strh	r2, [r3, #0]
	touchStruct->y = 0;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	805a      	strh	r2, [r3, #2]
	while (1) {
		if (returnTouchStateAndLocation(touchStruct) == STMPE811_State_Pressed){
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ffe7 	bl	8001634 <returnTouchStateAndLocation>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f9      	bne.n	8001660 <selectMode+0x14>
			if (touchStruct->y > LCD_PIXEL_HEIGHT-50 && touchStruct->y < LCD_PIXEL_HEIGHT-10)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	885b      	ldrh	r3, [r3, #2]
 8001670:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8001674:	d906      	bls.n	8001684 <selectMode+0x38>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	885b      	ldrh	r3, [r3, #2]
 800167a:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 800167e:	d201      	bcs.n	8001684 <selectMode+0x38>
				return (uint8_t)1;
 8001680:	2301      	movs	r3, #1
 8001682:	e009      	b.n	8001698 <selectMode+0x4c>
			else if (touchStruct->y > LCD_PIXEL_HEIGHT-100 && touchStruct->y < LCD_PIXEL_HEIGHT-60)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	885b      	ldrh	r3, [r3, #2]
 8001688:	2bdc      	cmp	r3, #220	@ 0xdc
 800168a:	d9e9      	bls.n	8001660 <selectMode+0x14>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	885b      	ldrh	r3, [r3, #2]
 8001690:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001694:	d2e4      	bcs.n	8001660 <selectMode+0x14>
				return (uint8_t)2;
 8001696:	2302      	movs	r3, #2
		}
	}
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <switchColumn>:

bool switchColumn(STMPE811_TouchData * touchStruct, uint8_t * currentColumn){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	touchStruct->x = 0;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	801a      	strh	r2, [r3, #0]
	touchStruct->y = 0;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	805a      	strh	r2, [r3, #2]
	if (returnTouchStateAndLocation(touchStruct) == STMPE811_State_Pressed){
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffbc 	bl	8001634 <returnTouchStateAndLocation>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d11e      	bne.n	8001700 <switchColumn+0x60>
		if (touchStruct->x < LCD_PIXEL_WIDTH / 2){
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	2b77      	cmp	r3, #119	@ 0x77
 80016c8:	d80c      	bhi.n	80016e4 <switchColumn+0x44>
			*currentColumn = (*currentColumn > 1) ? *currentColumn-1 : 7;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d904      	bls.n	80016dc <switchColumn+0x3c>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	e000      	b.n	80016de <switchColumn+0x3e>
 80016dc:	2207      	movs	r2, #7
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	701a      	strb	r2, [r3, #0]
 80016e2:	e00b      	b.n	80016fc <switchColumn+0x5c>
		} else {
			*currentColumn = (*currentColumn < 7) ? *currentColumn+1 : 1;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b06      	cmp	r3, #6
 80016ea:	d804      	bhi.n	80016f6 <switchColumn+0x56>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	3301      	adds	r3, #1
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	e000      	b.n	80016f8 <switchColumn+0x58>
 80016f6:	2201      	movs	r2, #1
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	701a      	strb	r2, [r3, #0]
		}
		return true;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <switchColumn+0x62>
	}
	return false;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <dropChip>:

void dropChip(Gameboard * gameboard, uint8_t currentColumn, uint16_t color){
 800170a:	b590      	push	{r4, r7, lr}
 800170c:	b085      	sub	sp, #20
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	460b      	mov	r3, r1
 8001714:	70fb      	strb	r3, [r7, #3]
 8001716:	4613      	mov	r3, r2
 8001718:	803b      	strh	r3, [r7, #0]
	uint16_t currentHeight = gameboard->column[currentColumn-1].currentHeight;
 800171a:	78fb      	ldrb	r3, [r7, #3]
 800171c:	1e5a      	subs	r2, r3, #1
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	440b      	add	r3, r1
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	81fb      	strh	r3, [r7, #14]
	uint16_t dropHeight = 300-CHIP_HSPACE*currentHeight;
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	461a      	mov	r2, r3
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	b29b      	uxth	r3, r3
 800173a:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800173e:	81bb      	strh	r3, [r7, #12]
	LCD_Draw_Circle_Fill(CHIP_HSPACE*currentColumn, dropHeight, CHIP_RADIUS, color);
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	b29b      	uxth	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	b298      	uxth	r0, r3
 800174e:	883b      	ldrh	r3, [r7, #0]
 8001750:	89b9      	ldrh	r1, [r7, #12]
 8001752:	220a      	movs	r2, #10
 8001754:	f7ff fd44 	bl	80011e0 <LCD_Draw_Circle_Fill>

	gameboard->column[currentColumn-1].contents[currentHeight] = gameboard->whosTurn;
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	1e5a      	subs	r2, r3, #1
 800175c:	89f9      	ldrh	r1, [r7, #14]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 4046 	ldrb.w	r4, [r3, #70]	@ 0x46
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4403      	add	r3, r0
 8001770:	440b      	add	r3, r1
 8001772:	3302      	adds	r3, #2
 8001774:	4622      	mov	r2, r4
 8001776:	701a      	strb	r2, [r3, #0]
	gameboard->column[currentColumn-1].currentHeight++;
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	1e5a      	subs	r2, r3, #1
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	440b      	add	r3, r1
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	3301      	adds	r3, #1
 800178c:	b298      	uxth	r0, r3
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	440b      	add	r3, r1
 800179a:	4602      	mov	r2, r0
 800179c:	801a      	strh	r2, [r3, #0]

	gameboard->whosTurn = (gameboard->whosTurn == YELLOW) ? RED : YELLOW;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	461a      	mov	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd90      	pop	{r4, r7, pc}
	...

080017c0 <getScheduledEvents>:

#include "Scheduler.h"

static uint32_t scheduledEvents = 0;

uint32_t getScheduledEvents(){
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	return scheduledEvents;
 80017c4:	4b03      	ldr	r3, [pc, #12]	@ (80017d4 <getScheduledEvents+0x14>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20025970 	.word	0x20025970

080017d8 <addSchedulerEvent>:

void addSchedulerEvent(uint32_t event){
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event;
 80017e0:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <addSchedulerEvent+0x20>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	4a03      	ldr	r2, [pc, #12]	@ (80017f8 <addSchedulerEvent+0x20>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	20025970 	.word	0x20025970

080017fc <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event){
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	43da      	mvns	r2, r3
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <removeSchedulerEvent+0x24>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4013      	ands	r3, r2
 800180e:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <removeSchedulerEvent+0x24>)
 8001810:	6013      	str	r3, [r2, #0]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20025970 	.word	0x20025970

08001824 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001828:	f000 f9fe 	bl	8001c28 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 800182c:	20ca      	movs	r0, #202	@ 0xca
 800182e:	f000 f943 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001832:	20c3      	movs	r0, #195	@ 0xc3
 8001834:	f000 f94d 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001838:	2008      	movs	r0, #8
 800183a:	f000 f94a 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800183e:	2050      	movs	r0, #80	@ 0x50
 8001840:	f000 f947 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001844:	20cf      	movs	r0, #207	@ 0xcf
 8001846:	f000 f937 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f941 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001850:	20c1      	movs	r0, #193	@ 0xc1
 8001852:	f000 f93e 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001856:	2030      	movs	r0, #48	@ 0x30
 8001858:	f000 f93b 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 800185c:	20ed      	movs	r0, #237	@ 0xed
 800185e:	f000 f92b 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001862:	2064      	movs	r0, #100	@ 0x64
 8001864:	f000 f935 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001868:	2003      	movs	r0, #3
 800186a:	f000 f932 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800186e:	2012      	movs	r0, #18
 8001870:	f000 f92f 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001874:	2081      	movs	r0, #129	@ 0x81
 8001876:	f000 f92c 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800187a:	20e8      	movs	r0, #232	@ 0xe8
 800187c:	f000 f91c 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001880:	2085      	movs	r0, #133	@ 0x85
 8001882:	f000 f926 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001886:	2000      	movs	r0, #0
 8001888:	f000 f923 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800188c:	2078      	movs	r0, #120	@ 0x78
 800188e:	f000 f920 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001892:	20cb      	movs	r0, #203	@ 0xcb
 8001894:	f000 f910 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001898:	2039      	movs	r0, #57	@ 0x39
 800189a:	f000 f91a 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800189e:	202c      	movs	r0, #44	@ 0x2c
 80018a0:	f000 f917 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80018a4:	2000      	movs	r0, #0
 80018a6:	f000 f914 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80018aa:	2034      	movs	r0, #52	@ 0x34
 80018ac:	f000 f911 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80018b0:	2002      	movs	r0, #2
 80018b2:	f000 f90e 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80018b6:	20f7      	movs	r0, #247	@ 0xf7
 80018b8:	f000 f8fe 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80018bc:	2020      	movs	r0, #32
 80018be:	f000 f908 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80018c2:	20ea      	movs	r0, #234	@ 0xea
 80018c4:	f000 f8f8 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80018c8:	2000      	movs	r0, #0
 80018ca:	f000 f902 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80018ce:	2000      	movs	r0, #0
 80018d0:	f000 f8ff 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80018d4:	20b1      	movs	r0, #177	@ 0xb1
 80018d6:	f000 f8ef 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80018da:	2000      	movs	r0, #0
 80018dc:	f000 f8f9 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80018e0:	201b      	movs	r0, #27
 80018e2:	f000 f8f6 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80018e6:	20b6      	movs	r0, #182	@ 0xb6
 80018e8:	f000 f8e6 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80018ec:	200a      	movs	r0, #10
 80018ee:	f000 f8f0 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80018f2:	20a2      	movs	r0, #162	@ 0xa2
 80018f4:	f000 f8ed 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80018f8:	20c0      	movs	r0, #192	@ 0xc0
 80018fa:	f000 f8dd 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80018fe:	2010      	movs	r0, #16
 8001900:	f000 f8e7 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001904:	20c1      	movs	r0, #193	@ 0xc1
 8001906:	f000 f8d7 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800190a:	2010      	movs	r0, #16
 800190c:	f000 f8e1 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001910:	20c5      	movs	r0, #197	@ 0xc5
 8001912:	f000 f8d1 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001916:	2045      	movs	r0, #69	@ 0x45
 8001918:	f000 f8db 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 800191c:	2015      	movs	r0, #21
 800191e:	f000 f8d8 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001922:	20c7      	movs	r0, #199	@ 0xc7
 8001924:	f000 f8c8 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001928:	2090      	movs	r0, #144	@ 0x90
 800192a:	f000 f8d2 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800192e:	2036      	movs	r0, #54	@ 0x36
 8001930:	f000 f8c2 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001934:	20c8      	movs	r0, #200	@ 0xc8
 8001936:	f000 f8cc 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800193a:	20f2      	movs	r0, #242	@ 0xf2
 800193c:	f000 f8bc 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001940:	2000      	movs	r0, #0
 8001942:	f000 f8c6 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001946:	20b0      	movs	r0, #176	@ 0xb0
 8001948:	f000 f8b6 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800194c:	20c2      	movs	r0, #194	@ 0xc2
 800194e:	f000 f8c0 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001952:	20b6      	movs	r0, #182	@ 0xb6
 8001954:	f000 f8b0 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001958:	200a      	movs	r0, #10
 800195a:	f000 f8ba 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800195e:	20a7      	movs	r0, #167	@ 0xa7
 8001960:	f000 f8b7 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001964:	2027      	movs	r0, #39	@ 0x27
 8001966:	f000 f8b4 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800196a:	2004      	movs	r0, #4
 800196c:	f000 f8b1 	bl	8001ad2 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001970:	202a      	movs	r0, #42	@ 0x2a
 8001972:	f000 f8a1 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001976:	2000      	movs	r0, #0
 8001978:	f000 f8ab 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800197c:	2000      	movs	r0, #0
 800197e:	f000 f8a8 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001982:	2000      	movs	r0, #0
 8001984:	f000 f8a5 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001988:	20ef      	movs	r0, #239	@ 0xef
 800198a:	f000 f8a2 	bl	8001ad2 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800198e:	202b      	movs	r0, #43	@ 0x2b
 8001990:	f000 f892 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001994:	2000      	movs	r0, #0
 8001996:	f000 f89c 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f899 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80019a0:	2001      	movs	r0, #1
 80019a2:	f000 f896 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80019a6:	203f      	movs	r0, #63	@ 0x3f
 80019a8:	f000 f893 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80019ac:	20f6      	movs	r0, #246	@ 0xf6
 80019ae:	f000 f883 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80019b2:	2001      	movs	r0, #1
 80019b4:	f000 f88d 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f000 f88a 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80019be:	2006      	movs	r0, #6
 80019c0:	f000 f887 	bl	8001ad2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80019c4:	202c      	movs	r0, #44	@ 0x2c
 80019c6:	f000 f877 	bl	8001ab8 <ili9341_Write_Reg>
  LCD_Delay(200);
 80019ca:	20c8      	movs	r0, #200	@ 0xc8
 80019cc:	f000 f9e8 	bl	8001da0 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80019d0:	2026      	movs	r0, #38	@ 0x26
 80019d2:	f000 f871 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80019d6:	2001      	movs	r0, #1
 80019d8:	f000 f87b 	bl	8001ad2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80019dc:	20e0      	movs	r0, #224	@ 0xe0
 80019de:	f000 f86b 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80019e2:	200f      	movs	r0, #15
 80019e4:	f000 f875 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80019e8:	2029      	movs	r0, #41	@ 0x29
 80019ea:	f000 f872 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80019ee:	2024      	movs	r0, #36	@ 0x24
 80019f0:	f000 f86f 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80019f4:	200c      	movs	r0, #12
 80019f6:	f000 f86c 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80019fa:	200e      	movs	r0, #14
 80019fc:	f000 f869 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001a00:	2009      	movs	r0, #9
 8001a02:	f000 f866 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001a06:	204e      	movs	r0, #78	@ 0x4e
 8001a08:	f000 f863 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001a0c:	2078      	movs	r0, #120	@ 0x78
 8001a0e:	f000 f860 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001a12:	203c      	movs	r0, #60	@ 0x3c
 8001a14:	f000 f85d 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001a18:	2009      	movs	r0, #9
 8001a1a:	f000 f85a 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001a1e:	2013      	movs	r0, #19
 8001a20:	f000 f857 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001a24:	2005      	movs	r0, #5
 8001a26:	f000 f854 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001a2a:	2017      	movs	r0, #23
 8001a2c:	f000 f851 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001a30:	2011      	movs	r0, #17
 8001a32:	f000 f84e 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f000 f84b 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001a3c:	20e1      	movs	r0, #225	@ 0xe1
 8001a3e:	f000 f83b 	bl	8001ab8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a42:	2000      	movs	r0, #0
 8001a44:	f000 f845 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001a48:	2016      	movs	r0, #22
 8001a4a:	f000 f842 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001a4e:	201b      	movs	r0, #27
 8001a50:	f000 f83f 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001a54:	2004      	movs	r0, #4
 8001a56:	f000 f83c 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001a5a:	2011      	movs	r0, #17
 8001a5c:	f000 f839 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001a60:	2007      	movs	r0, #7
 8001a62:	f000 f836 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001a66:	2031      	movs	r0, #49	@ 0x31
 8001a68:	f000 f833 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001a6c:	2033      	movs	r0, #51	@ 0x33
 8001a6e:	f000 f830 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001a72:	2042      	movs	r0, #66	@ 0x42
 8001a74:	f000 f82d 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001a78:	2005      	movs	r0, #5
 8001a7a:	f000 f82a 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001a7e:	200c      	movs	r0, #12
 8001a80:	f000 f827 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001a84:	200a      	movs	r0, #10
 8001a86:	f000 f824 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001a8a:	2028      	movs	r0, #40	@ 0x28
 8001a8c:	f000 f821 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001a90:	202f      	movs	r0, #47	@ 0x2f
 8001a92:	f000 f81e 	bl	8001ad2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001a96:	200f      	movs	r0, #15
 8001a98:	f000 f81b 	bl	8001ad2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001a9c:	2011      	movs	r0, #17
 8001a9e:	f000 f80b 	bl	8001ab8 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001aa2:	20c8      	movs	r0, #200	@ 0xc8
 8001aa4:	f000 f97c 	bl	8001da0 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001aa8:	2029      	movs	r0, #41	@ 0x29
 8001aaa:	f000 f805 	bl	8001ab8 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001aae:	202c      	movs	r0, #44	@ 0x2c
 8001ab0:	f000 f802 	bl	8001ab8 <ili9341_Write_Reg>
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 f949 	bl	8001d5c <LCD_IO_WriteReg>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f91a 	bl	8001d18 <LCD_IO_WriteData>
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001af0:	4819      	ldr	r0, [pc, #100]	@ (8001b58 <SPI_Init+0x6c>)
 8001af2:	f004 fb96 	bl	8006222 <HAL_SPI_GetState>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d12b      	bne.n	8001b54 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001afc:	4b16      	ldr	r3, [pc, #88]	@ (8001b58 <SPI_Init+0x6c>)
 8001afe:	4a17      	ldr	r2, [pc, #92]	@ (8001b5c <SPI_Init+0x70>)
 8001b00:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <SPI_Init+0x6c>)
 8001b04:	2218      	movs	r2, #24
 8001b06:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001b08:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <SPI_Init+0x6c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001b0e:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <SPI_Init+0x6c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001b14:	4b10      	ldr	r3, [pc, #64]	@ (8001b58 <SPI_Init+0x6c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <SPI_Init+0x6c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001b20:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <SPI_Init+0x6c>)
 8001b22:	2207      	movs	r2, #7
 8001b24:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001b26:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <SPI_Init+0x6c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <SPI_Init+0x6c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001b32:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <SPI_Init+0x6c>)
 8001b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b38:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001b3a:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <SPI_Init+0x6c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001b40:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <SPI_Init+0x6c>)
 8001b42:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b46:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001b48:	4803      	ldr	r0, [pc, #12]	@ (8001b58 <SPI_Init+0x6c>)
 8001b4a:	f000 f833 	bl	8001bb4 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001b4e:	4802      	ldr	r0, [pc, #8]	@ (8001b58 <SPI_Init+0x6c>)
 8001b50:	f004 f972 	bl	8005e38 <HAL_SPI_Init>
  }
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20025974 	.word	0x20025974
 8001b5c:	40015000 	.word	0x40015000

08001b60 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001b6e:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <SPI_Write+0x34>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	1db9      	adds	r1, r7, #6
 8001b74:	2201      	movs	r2, #1
 8001b76:	4808      	ldr	r0, [pc, #32]	@ (8001b98 <SPI_Write+0x38>)
 8001b78:	f004 fa0f 	bl	8005f9a <HAL_SPI_Transmit>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001b86:	f000 f809 	bl	8001b9c <SPI_Error>
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000014 	.word	0x20000014
 8001b98:	20025974 	.word	0x20025974

08001b9c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001ba0:	4803      	ldr	r0, [pc, #12]	@ (8001bb0 <SPI_Error+0x14>)
 8001ba2:	f004 f9d2 	bl	8005f4a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001ba6:	f7ff ffa1 	bl	8001aec <SPI_Init>
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20025974 	.word	0x20025974

08001bb4 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	@ 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	4b17      	ldr	r3, [pc, #92]	@ (8001c20 <SPI_MspInit+0x6c>)
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc4:	4a16      	ldr	r2, [pc, #88]	@ (8001c20 <SPI_MspInit+0x6c>)
 8001bc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bca:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bcc:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <SPI_MspInit+0x6c>)
 8001bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <SPI_MspInit+0x6c>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be0:	4a0f      	ldr	r2, [pc, #60]	@ (8001c20 <SPI_MspInit+0x6c>)
 8001be2:	f043 0320 	orr.w	r3, r3, #32
 8001be6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c20 <SPI_MspInit+0x6c>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bec:	f003 0320 	and.w	r3, r3, #32
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001bf4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001c02:	2301      	movs	r3, #1
 8001c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001c06:	2305      	movs	r3, #5
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4804      	ldr	r0, [pc, #16]	@ (8001c24 <SPI_MspInit+0x70>)
 8001c12:	f001 fc8b 	bl	800352c <HAL_GPIO_Init>
}
 8001c16:	bf00      	nop
 8001c18:	3728      	adds	r7, #40	@ 0x28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40021400 	.word	0x40021400

08001c28 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001c2e:	4b36      	ldr	r3, [pc, #216]	@ (8001d08 <LCD_IO_Init+0xe0>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d164      	bne.n	8001d00 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001c36:	4b34      	ldr	r3, [pc, #208]	@ (8001d08 <LCD_IO_Init+0xe0>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	4b32      	ldr	r3, [pc, #200]	@ (8001d0c <LCD_IO_Init+0xe4>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c44:	4a31      	ldr	r2, [pc, #196]	@ (8001d0c <LCD_IO_Init+0xe4>)
 8001c46:	f043 0308 	orr.w	r3, r3, #8
 8001c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d0c <LCD_IO_Init+0xe4>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001c58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001c66:	2302      	movs	r3, #2
 8001c68:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001c6a:	f107 030c 	add.w	r3, r7, #12
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4827      	ldr	r0, [pc, #156]	@ (8001d10 <LCD_IO_Init+0xe8>)
 8001c72:	f001 fc5b 	bl	800352c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4b24      	ldr	r3, [pc, #144]	@ (8001d0c <LCD_IO_Init+0xe4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	4a23      	ldr	r2, [pc, #140]	@ (8001d0c <LCD_IO_Init+0xe4>)
 8001c80:	f043 0308 	orr.w	r3, r3, #8
 8001c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c86:	4b21      	ldr	r3, [pc, #132]	@ (8001d0c <LCD_IO_Init+0xe4>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001c92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4819      	ldr	r0, [pc, #100]	@ (8001d10 <LCD_IO_Init+0xe8>)
 8001cac:	f001 fc3e 	bl	800352c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <LCD_IO_Init+0xe4>)
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb8:	4a14      	ldr	r2, [pc, #80]	@ (8001d0c <LCD_IO_Init+0xe4>)
 8001cba:	f043 0304 	orr.w	r3, r3, #4
 8001cbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc0:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <LCD_IO_Init+0xe4>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001ccc:	2304      	movs	r3, #4
 8001cce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480c      	ldr	r0, [pc, #48]	@ (8001d14 <LCD_IO_Init+0xec>)
 8001ce4:	f001 fc22 	bl	800352c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2104      	movs	r1, #4
 8001cec:	4809      	ldr	r0, [pc, #36]	@ (8001d14 <LCD_IO_Init+0xec>)
 8001cee:	f001 fed5 	bl	8003a9c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	4807      	ldr	r0, [pc, #28]	@ (8001d14 <LCD_IO_Init+0xec>)
 8001cf8:	f001 fed0 	bl	8003a9c <HAL_GPIO_WritePin>

    SPI_Init();
 8001cfc:	f7ff fef6 	bl	8001aec <SPI_Init>
  }
}
 8001d00:	bf00      	nop
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200259cc 	.word	0x200259cc
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020c00 	.word	0x40020c00
 8001d14:	40020800 	.word	0x40020800

08001d18 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001d22:	2201      	movs	r2, #1
 8001d24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d28:	480a      	ldr	r0, [pc, #40]	@ (8001d54 <LCD_IO_WriteData+0x3c>)
 8001d2a:	f001 feb7 	bl	8003a9c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2104      	movs	r1, #4
 8001d32:	4809      	ldr	r0, [pc, #36]	@ (8001d58 <LCD_IO_WriteData+0x40>)
 8001d34:	f001 feb2 	bl	8003a9c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff10 	bl	8001b60 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001d40:	2201      	movs	r2, #1
 8001d42:	2104      	movs	r1, #4
 8001d44:	4804      	ldr	r0, [pc, #16]	@ (8001d58 <LCD_IO_WriteData+0x40>)
 8001d46:	f001 fea9 	bl	8003a9c <HAL_GPIO_WritePin>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40020800 	.word	0x40020800

08001d5c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d6c:	480a      	ldr	r0, [pc, #40]	@ (8001d98 <LCD_IO_WriteReg+0x3c>)
 8001d6e:	f001 fe95 	bl	8003a9c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001d72:	2200      	movs	r2, #0
 8001d74:	2104      	movs	r1, #4
 8001d76:	4809      	ldr	r0, [pc, #36]	@ (8001d9c <LCD_IO_WriteReg+0x40>)
 8001d78:	f001 fe90 	bl	8003a9c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff feed 	bl	8001b60 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001d86:	2201      	movs	r2, #1
 8001d88:	2104      	movs	r1, #4
 8001d8a:	4804      	ldr	r0, [pc, #16]	@ (8001d9c <LCD_IO_WriteReg+0x40>)
 8001d8c:	f001 fe86 	bl	8003a9c <HAL_GPIO_WritePin>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	40020800 	.word	0x40020800

08001da0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f001 fa57 	bl	800325c <HAL_Delay>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <main>:
static void MX_TIM2_Init(void);
static void MX_SPI5_Init(void);
static void MX_I2C3_Init(void);

int main(void)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001dba:	f001 f9dd 	bl	8003178 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001dbe:	f000 f817 	bl	8001df0 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001dc2:	f000 fa07 	bl	80021d4 <MX_GPIO_Init>
	MX_LTDC_Init();
 8001dc6:	f000 f8bd 	bl	8001f44 <MX_LTDC_Init>
	MX_RNG_Init();
 8001dca:	f000 f96d 	bl	80020a8 <MX_RNG_Init>
	MX_TIM2_Init();
 8001dce:	f000 f9b5 	bl	800213c <MX_TIM2_Init>
	MX_SPI5_Init();
 8001dd2:	f000 f97d 	bl	80020d0 <MX_SPI5_Init>
	MX_I2C3_Init();
 8001dd6:	f000 f875 	bl	8001ec4 <MX_I2C3_Init>

	ApplicationInit();
 8001dda:	f7fe fb7f 	bl	80004dc <ApplicationInit>
	HAL_Delay(1000);
 8001dde:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001de2:	f001 fa3b 	bl	800325c <HAL_Delay>

	PlayGame();
 8001de6:	f7fe fb93 	bl	8000510 <PlayGame>
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b094      	sub	sp, #80	@ 0x50
 8001df4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df6:	f107 0320 	add.w	r3, r7, #32
 8001dfa:	2230      	movs	r2, #48	@ 0x30
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 fdd2 	bl	80069a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	4b28      	ldr	r3, [pc, #160]	@ (8001ebc <SystemClock_Config+0xcc>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1c:	4a27      	ldr	r2, [pc, #156]	@ (8001ebc <SystemClock_Config+0xcc>)
 8001e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e24:	4b25      	ldr	r3, [pc, #148]	@ (8001ebc <SystemClock_Config+0xcc>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e30:	2300      	movs	r3, #0
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	4b22      	ldr	r3, [pc, #136]	@ (8001ec0 <SystemClock_Config+0xd0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a21      	ldr	r2, [pc, #132]	@ (8001ec0 <SystemClock_Config+0xd0>)
 8001e3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec0 <SystemClock_Config+0xd0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e56:	2302      	movs	r3, #2
 8001e58:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001e60:	2308      	movs	r3, #8
 8001e62:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001e64:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001e68:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e6e:	2307      	movs	r3, #7
 8001e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e72:	f107 0320 	add.w	r3, r7, #32
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 f970 	bl	800515c <HAL_RCC_OscConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <SystemClock_Config+0x96>
	{
	Error_Handler();
 8001e82:	f000 fb55 	bl	8002530 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e86:	230f      	movs	r3, #15
 8001e88:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e92:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e96:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e9c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e9e:	f107 030c 	add.w	r3, r7, #12
 8001ea2:	2105      	movs	r1, #5
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f003 fbd1 	bl	800564c <HAL_RCC_ClockConfig>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <SystemClock_Config+0xc4>
	{
	Error_Handler();
 8001eb0:	f000 fb3e 	bl	8002530 <Error_Handler>
	}
}
 8001eb4:	bf00      	nop
 8001eb6:	3750      	adds	r7, #80	@ 0x50
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40007000 	.word	0x40007000

08001ec4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	hi2c3.Instance = I2C3;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <MX_I2C3_Init+0x74>)
 8001eca:	4a1c      	ldr	r2, [pc, #112]	@ (8001f3c <MX_I2C3_Init+0x78>)
 8001ecc:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	@ (8001f38 <MX_I2C3_Init+0x74>)
 8001ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8001f40 <MX_I2C3_Init+0x7c>)
 8001ed2:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ed4:	4b18      	ldr	r3, [pc, #96]	@ (8001f38 <MX_I2C3_Init+0x74>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8001eda:	4b17      	ldr	r3, [pc, #92]	@ (8001f38 <MX_I2C3_Init+0x74>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ee0:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <MX_I2C3_Init+0x74>)
 8001ee2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ee6:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ee8:	4b13      	ldr	r3, [pc, #76]	@ (8001f38 <MX_I2C3_Init+0x74>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8001eee:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <MX_I2C3_Init+0x74>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ef4:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <MX_I2C3_Init+0x74>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001efa:	4b0f      	ldr	r3, [pc, #60]	@ (8001f38 <MX_I2C3_Init+0x74>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f00:	480d      	ldr	r0, [pc, #52]	@ (8001f38 <MX_I2C3_Init+0x74>)
 8001f02:	f001 fde5 	bl	8003ad0 <HAL_I2C_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_I2C3_Init+0x4c>
	{
	Error_Handler();
 8001f0c:	f000 fb10 	bl	8002530 <Error_Handler>
	}

	/* Configure Analogue filter */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f10:	2100      	movs	r1, #0
 8001f12:	4809      	ldr	r0, [pc, #36]	@ (8001f38 <MX_I2C3_Init+0x74>)
 8001f14:	f002 fe00 	bl	8004b18 <HAL_I2CEx_ConfigAnalogFilter>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_I2C3_Init+0x5e>
	{
	Error_Handler();
 8001f1e:	f000 fb07 	bl	8002530 <Error_Handler>
	}

	/* Configure Digital filter */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001f22:	2100      	movs	r1, #0
 8001f24:	4804      	ldr	r0, [pc, #16]	@ (8001f38 <MX_I2C3_Init+0x74>)
 8001f26:	f002 fe33 	bl	8004b90 <HAL_I2CEx_ConfigDigitalFilter>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_I2C3_Init+0x70>
	{
	Error_Handler();
 8001f30:	f000 fafe 	bl	8002530 <Error_Handler>
	}
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200259d0 	.word	0x200259d0
 8001f3c:	40005c00 	.word	0x40005c00
 8001f40:	000186a0 	.word	0x000186a0

08001f44 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b09a      	sub	sp, #104	@ 0x68
 8001f48:	af00      	add	r7, sp, #0
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001f4a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f4e:	2234      	movs	r2, #52	@ 0x34
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f004 fd28 	bl	80069a8 <memset>
	LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001f58:	463b      	mov	r3, r7
 8001f5a:	2234      	movs	r2, #52	@ 0x34
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f004 fd22 	bl	80069a8 <memset>

	hltdc.Instance = LTDC;
 8001f64:	4b4e      	ldr	r3, [pc, #312]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 8001f66:	4a4f      	ldr	r2, [pc, #316]	@ (80020a4 <MX_LTDC_Init+0x160>)
 8001f68:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001f6a:	4b4d      	ldr	r3, [pc, #308]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001f70:	4b4b      	ldr	r3, [pc, #300]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001f76:	4b4a      	ldr	r3, [pc, #296]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001f7c:	4b48      	ldr	r3, [pc, #288]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 7;
 8001f82:	4b47      	ldr	r3, [pc, #284]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 3;
 8001f88:	4b45      	ldr	r3, [pc, #276]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 14;
 8001f8e:	4b44      	ldr	r3, [pc, #272]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 8001f90:	220e      	movs	r2, #14
 8001f92:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 5;
 8001f94:	4b42      	ldr	r3, [pc, #264]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 8001f96:	2205      	movs	r2, #5
 8001f98:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 654;
 8001f9a:	4b41      	ldr	r3, [pc, #260]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 8001f9c:	f240 228e 	movw	r2, #654	@ 0x28e
 8001fa0:	625a      	str	r2, [r3, #36]	@ 0x24
	hltdc.Init.AccumulatedActiveH = 485;
 8001fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 8001fa4:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001fa8:	629a      	str	r2, [r3, #40]	@ 0x28
	hltdc.Init.TotalWidth = 660;
 8001faa:	4b3d      	ldr	r3, [pc, #244]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 8001fac:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hltdc.Init.TotalHeigh = 487;
 8001fb2:	4b3b      	ldr	r3, [pc, #236]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 8001fb4:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001fb8:	631a      	str	r2, [r3, #48]	@ 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8001fba:	4b39      	ldr	r3, [pc, #228]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001fc2:	4b37      	ldr	r3, [pc, #220]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	hltdc.Init.Backcolor.Red = 0;
 8001fca:	4b35      	ldr	r3, [pc, #212]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001fd2:	4833      	ldr	r0, [pc, #204]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 8001fd4:	f002 fe1c 	bl	8004c10 <HAL_LTDC_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_LTDC_Init+0x9e>
	{
	Error_Handler();
 8001fde:	f000 faa7 	bl	8002530 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.WindowX1 = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.WindowY0 = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
	pLayerCfg.WindowY1 = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	643b      	str	r3, [r7, #64]	@ 0x40
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	647b      	str	r3, [r7, #68]	@ 0x44
	pLayerCfg.Alpha = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
	pLayerCfg.Alpha0 = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001ffe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002002:	653b      	str	r3, [r7, #80]	@ 0x50
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002004:	2305      	movs	r3, #5
 8002006:	657b      	str	r3, [r7, #84]	@ 0x54
	pLayerCfg.FBStartAdress = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	65bb      	str	r3, [r7, #88]	@ 0x58
	pLayerCfg.ImageWidth = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	pLayerCfg.ImageHeight = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	663b      	str	r3, [r7, #96]	@ 0x60
	pLayerCfg.Backcolor.Blue = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	pLayerCfg.Backcolor.Green = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	pLayerCfg.Backcolor.Red = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002026:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800202a:	2200      	movs	r2, #0
 800202c:	4619      	mov	r1, r3
 800202e:	481c      	ldr	r0, [pc, #112]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 8002030:	f002 febe 	bl	8004db0 <HAL_LTDC_ConfigLayer>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_LTDC_Init+0xfa>
	{
	Error_Handler();
 800203a:	f000 fa79 	bl	8002530 <Error_Handler>
	}
	pLayerCfg1.WindowX0 = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	603b      	str	r3, [r7, #0]
	pLayerCfg1.WindowX1 = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	607b      	str	r3, [r7, #4]
	pLayerCfg1.WindowY0 = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
	pLayerCfg1.WindowY1 = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
	pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
	pLayerCfg1.Alpha = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
	pLayerCfg1.Alpha0 = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
	pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800205a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800205e:	61fb      	str	r3, [r7, #28]
	pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002060:	2305      	movs	r3, #5
 8002062:	623b      	str	r3, [r7, #32]
	pLayerCfg1.FBStartAdress = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg1.ImageWidth = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg1.ImageHeight = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pLayerCfg1.Backcolor.Blue = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	pLayerCfg1.Backcolor.Green = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	pLayerCfg1.Backcolor.Red = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002082:	463b      	mov	r3, r7
 8002084:	2201      	movs	r2, #1
 8002086:	4619      	mov	r1, r3
 8002088:	4805      	ldr	r0, [pc, #20]	@ (80020a0 <MX_LTDC_Init+0x15c>)
 800208a:	f002 fe91 	bl	8004db0 <HAL_LTDC_ConfigLayer>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_LTDC_Init+0x154>
	{
	Error_Handler();
 8002094:	f000 fa4c 	bl	8002530 <Error_Handler>
	}
}
 8002098:	bf00      	nop
 800209a:	3768      	adds	r7, #104	@ 0x68
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20025a24 	.word	0x20025a24
 80020a4:	40016800 	.word	0x40016800

080020a8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	hrng.Instance = RNG;
 80020ac:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <MX_RNG_Init+0x20>)
 80020ae:	4a07      	ldr	r2, [pc, #28]	@ (80020cc <MX_RNG_Init+0x24>)
 80020b0:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK)
 80020b2:	4805      	ldr	r0, [pc, #20]	@ (80020c8 <MX_RNG_Init+0x20>)
 80020b4:	f003 fe96 	bl	8005de4 <HAL_RNG_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_RNG_Init+0x1a>
	{
	Error_Handler();
 80020be:	f000 fa37 	bl	8002530 <Error_Handler>
	}
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20025acc 	.word	0x20025acc
 80020cc:	50060800 	.word	0x50060800

080020d0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
	hspi5.Instance = SPI5;
 80020d4:	4b17      	ldr	r3, [pc, #92]	@ (8002134 <MX_SPI5_Init+0x64>)
 80020d6:	4a18      	ldr	r2, [pc, #96]	@ (8002138 <MX_SPI5_Init+0x68>)
 80020d8:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 80020da:	4b16      	ldr	r3, [pc, #88]	@ (8002134 <MX_SPI5_Init+0x64>)
 80020dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020e0:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80020e2:	4b14      	ldr	r3, [pc, #80]	@ (8002134 <MX_SPI5_Init+0x64>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80020e8:	4b12      	ldr	r3, [pc, #72]	@ (8002134 <MX_SPI5_Init+0x64>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ee:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <MX_SPI5_Init+0x64>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002134 <MX_SPI5_Init+0x64>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 80020fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002134 <MX_SPI5_Init+0x64>)
 80020fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002100:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002102:	4b0c      	ldr	r3, [pc, #48]	@ (8002134 <MX_SPI5_Init+0x64>)
 8002104:	2200      	movs	r2, #0
 8002106:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002108:	4b0a      	ldr	r3, [pc, #40]	@ (8002134 <MX_SPI5_Init+0x64>)
 800210a:	2200      	movs	r2, #0
 800210c:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800210e:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <MX_SPI5_Init+0x64>)
 8002110:	2200      	movs	r2, #0
 8002112:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002114:	4b07      	ldr	r3, [pc, #28]	@ (8002134 <MX_SPI5_Init+0x64>)
 8002116:	2200      	movs	r2, #0
 8002118:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 10;
 800211a:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <MX_SPI5_Init+0x64>)
 800211c:	220a      	movs	r2, #10
 800211e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002120:	4804      	ldr	r0, [pc, #16]	@ (8002134 <MX_SPI5_Init+0x64>)
 8002122:	f003 fe89 	bl	8005e38 <HAL_SPI_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_SPI5_Init+0x60>
	{
	Error_Handler();
 800212c:	f000 fa00 	bl	8002530 <Error_Handler>
	}
}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20025adc 	.word	0x20025adc
 8002138:	40015000 	.word	0x40015000

0800213c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002142:	f107 0308 	add.w	r3, r7, #8
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002150:	463b      	mov	r3, r7
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]

	htim2.Instance = TIM2;
 8002158:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <MX_TIM2_Init+0x94>)
 800215a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800215e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002160:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <MX_TIM2_Init+0x94>)
 8002162:	2200      	movs	r2, #0
 8002164:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002166:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <MX_TIM2_Init+0x94>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 800216c:	4b18      	ldr	r3, [pc, #96]	@ (80021d0 <MX_TIM2_Init+0x94>)
 800216e:	f04f 32ff 	mov.w	r2, #4294967295
 8002172:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002174:	4b16      	ldr	r3, [pc, #88]	@ (80021d0 <MX_TIM2_Init+0x94>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217a:	4b15      	ldr	r3, [pc, #84]	@ (80021d0 <MX_TIM2_Init+0x94>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002180:	4813      	ldr	r0, [pc, #76]	@ (80021d0 <MX_TIM2_Init+0x94>)
 8002182:	f004 f939 	bl	80063f8 <HAL_TIM_Base_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM2_Init+0x54>
	{
	Error_Handler();
 800218c:	f000 f9d0 	bl	8002530 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002190:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002194:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002196:	f107 0308 	add.w	r3, r7, #8
 800219a:	4619      	mov	r1, r3
 800219c:	480c      	ldr	r0, [pc, #48]	@ (80021d0 <MX_TIM2_Init+0x94>)
 800219e:	f004 f97a 	bl	8006496 <HAL_TIM_ConfigClockSource>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM2_Init+0x70>
	{
	Error_Handler();
 80021a8:	f000 f9c2 	bl	8002530 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ac:	2300      	movs	r3, #0
 80021ae:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021b4:	463b      	mov	r3, r7
 80021b6:	4619      	mov	r1, r3
 80021b8:	4805      	ldr	r0, [pc, #20]	@ (80021d0 <MX_TIM2_Init+0x94>)
 80021ba:	f004 fb79 	bl	80068b0 <HAL_TIMEx_MasterConfigSynchronization>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM2_Init+0x8c>
	{
	Error_Handler();
 80021c4:	f000 f9b4 	bl	8002530 <Error_Handler>
	}
}
 80021c8:	bf00      	nop
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20025b34 	.word	0x20025b34

080021d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08e      	sub	sp, #56	@ 0x38
 80021d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
 80021e8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
 80021ee:	4bb2      	ldr	r3, [pc, #712]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	4ab1      	ldr	r2, [pc, #708]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 80021f4:	f043 0304 	orr.w	r3, r3, #4
 80021f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fa:	4baf      	ldr	r3, [pc, #700]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	623b      	str	r3, [r7, #32]
 8002204:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	4bab      	ldr	r3, [pc, #684]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	4aaa      	ldr	r2, [pc, #680]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 8002210:	f043 0320 	orr.w	r3, r3, #32
 8002214:	6313      	str	r3, [r2, #48]	@ 0x30
 8002216:	4ba8      	ldr	r3, [pc, #672]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	4ba4      	ldr	r3, [pc, #656]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	4aa3      	ldr	r2, [pc, #652]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 800222c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002230:	6313      	str	r3, [r2, #48]	@ 0x30
 8002232:	4ba1      	ldr	r3, [pc, #644]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	4b9d      	ldr	r3, [pc, #628]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	4a9c      	ldr	r2, [pc, #624]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6313      	str	r3, [r2, #48]	@ 0x30
 800224e:	4b9a      	ldr	r3, [pc, #616]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	4b96      	ldr	r3, [pc, #600]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a95      	ldr	r2, [pc, #596]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b93      	ldr	r3, [pc, #588]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b8f      	ldr	r3, [pc, #572]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a8e      	ldr	r2, [pc, #568]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 8002280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b8c      	ldr	r3, [pc, #560]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	4b88      	ldr	r3, [pc, #544]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	4a87      	ldr	r2, [pc, #540]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 800229c:	f043 0310 	orr.w	r3, r3, #16
 80022a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a2:	4b85      	ldr	r3, [pc, #532]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	4b81      	ldr	r3, [pc, #516]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	4a80      	ldr	r2, [pc, #512]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 80022b8:	f043 0308 	orr.w	r3, r3, #8
 80022bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022be:	4b7e      	ldr	r3, [pc, #504]	@ (80024b8 <MX_GPIO_Init+0x2e4>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2116      	movs	r1, #22
 80022ce:	487b      	ldr	r0, [pc, #492]	@ (80024bc <MX_GPIO_Init+0x2e8>)
 80022d0:	f001 fbe4 	bl	8003a9c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2180      	movs	r1, #128	@ 0x80
 80022d8:	4879      	ldr	r0, [pc, #484]	@ (80024c0 <MX_GPIO_Init+0x2ec>)
 80022da:	f001 fbdf 	bl	8003a9c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80022de:	2200      	movs	r2, #0
 80022e0:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80022e4:	4877      	ldr	r0, [pc, #476]	@ (80024c4 <MX_GPIO_Init+0x2f0>)
 80022e6:	f001 fbd9 	bl	8003a9c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80022ea:	2200      	movs	r2, #0
 80022ec:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80022f0:	4875      	ldr	r0, [pc, #468]	@ (80024c8 <MX_GPIO_Init+0x2f4>)
 80022f2:	f001 fbd3 	bl	8003a9c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
						   A4_Pin A5_Pin SDNRAS_Pin A6_Pin
						   A7_Pin A8_Pin A9_Pin */
	GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80022f6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24
						  |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
						  |A7_Pin|A8_Pin|A9_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002308:	230c      	movs	r3, #12
 800230a:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800230c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002310:	4619      	mov	r1, r3
 8002312:	486e      	ldr	r0, [pc, #440]	@ (80024cc <MX_GPIO_Init+0x2f8>)
 8002314:	f001 f90a 	bl	800352c <HAL_GPIO_Init>

	/*Configure GPIO pin : SDNWE_Pin */
	GPIO_InitStruct.Pin = SDNWE_Pin;
 8002318:	2301      	movs	r3, #1
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002324:	2303      	movs	r3, #3
 8002326:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002328:	230c      	movs	r3, #12
 800232a:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800232c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002330:	4619      	mov	r1, r3
 8002332:	4862      	ldr	r0, [pc, #392]	@ (80024bc <MX_GPIO_Init+0x2e8>)
 8002334:	f001 f8fa 	bl	800352c <HAL_GPIO_Init>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002338:	2316      	movs	r3, #22
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233c:	2301      	movs	r3, #1
 800233e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	2300      	movs	r3, #0
 8002346:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002348:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800234c:	4619      	mov	r1, r3
 800234e:	485b      	ldr	r0, [pc, #364]	@ (80024bc <MX_GPIO_Init+0x2e8>)
 8002350:	f001 f8ec 	bl	800352c <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002354:	f248 0307 	movw	r3, #32775	@ 0x8007
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800235a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800235e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002364:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002368:	4619      	mov	r1, r3
 800236a:	4855      	ldr	r0, [pc, #340]	@ (80024c0 <MX_GPIO_Init+0x2ec>)
 800236c:	f001 f8de 	bl	800352c <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002370:	2380      	movs	r3, #128	@ 0x80
 8002372:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002374:	2301      	movs	r3, #1
 8002376:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002380:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002384:	4619      	mov	r1, r3
 8002386:	484e      	ldr	r0, [pc, #312]	@ (80024c0 <MX_GPIO_Init+0x2ec>)
 8002388:	f001 f8d0 	bl	800352c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800238c:	2320      	movs	r3, #32
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002390:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002394:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800239a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800239e:	4619      	mov	r1, r3
 80023a0:	4846      	ldr	r0, [pc, #280]	@ (80024bc <MX_GPIO_Init+0x2e8>)
 80023a2:	f001 f8c3 	bl	800352c <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 80023a6:	2304      	movs	r3, #4
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023aa:	2300      	movs	r3, #0
 80023ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80023b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023b6:	4619      	mov	r1, r3
 80023b8:	4845      	ldr	r0, [pc, #276]	@ (80024d0 <MX_GPIO_Init+0x2fc>)
 80023ba:	f001 f8b7 	bl	800352c <HAL_GPIO_Init>

	/*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
						   SDCLK_Pin SDNCAS_Pin */
	GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80023be:	f248 1333 	movw	r3, #33075	@ 0x8133
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
						  |SDCLK_Pin|SDNCAS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c4:	2302      	movs	r3, #2
 80023c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023cc:	2303      	movs	r3, #3
 80023ce:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023d0:	230c      	movs	r3, #12
 80023d2:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023d8:	4619      	mov	r1, r3
 80023da:	483b      	ldr	r0, [pc, #236]	@ (80024c8 <MX_GPIO_Init+0x2f4>)
 80023dc:	f001 f8a6 	bl	800352c <HAL_GPIO_Init>

	/*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
						   D8_Pin D9_Pin D10_Pin D11_Pin
						   D12_Pin NBL0_Pin NBL1_Pin */
	GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80023e0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24
						  |D8_Pin|D9_Pin|D10_Pin|D11_Pin
						  |D12_Pin|NBL0_Pin|NBL1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023f2:	230c      	movs	r3, #12
 80023f4:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023fa:	4619      	mov	r1, r3
 80023fc:	4835      	ldr	r0, [pc, #212]	@ (80024d4 <MX_GPIO_Init+0x300>)
 80023fe:	f001 f895 	bl	800352c <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002402:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2300      	movs	r3, #0
 8002412:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002414:	230c      	movs	r3, #12
 8002416:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002418:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800241c:	4619      	mov	r1, r3
 800241e:	482c      	ldr	r0, [pc, #176]	@ (80024d0 <MX_GPIO_Init+0x2fc>)
 8002420:	f001 f884 	bl	800352c <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_HS_Pin */
	GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002424:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800242a:	2300      	movs	r3, #0
 800242c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002436:	4619      	mov	r1, r3
 8002438:	4825      	ldr	r0, [pc, #148]	@ (80024d0 <MX_GPIO_Init+0x2fc>)
 800243a:	f001 f877 	bl	800352c <HAL_GPIO_Init>

	/*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
						   D1_Pin D2_Pin D3_Pin */
	GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800243e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002442:	627b      	str	r3, [r7, #36]	@ 0x24
						  |D1_Pin|D2_Pin|D3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002450:	230c      	movs	r3, #12
 8002452:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002454:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002458:	4619      	mov	r1, r3
 800245a:	481a      	ldr	r0, [pc, #104]	@ (80024c4 <MX_GPIO_Init+0x2f0>)
 800245c:	f001 f866 	bl	800352c <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 8002460:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002464:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002466:	2300      	movs	r3, #0
 8002468:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800246e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002472:	4619      	mov	r1, r3
 8002474:	4813      	ldr	r0, [pc, #76]	@ (80024c4 <MX_GPIO_Init+0x2f0>)
 8002476:	f001 f859 	bl	800352c <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800247a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002480:	2301      	movs	r3, #1
 8002482:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002488:	2300      	movs	r3, #0
 800248a:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800248c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002490:	4619      	mov	r1, r3
 8002492:	480c      	ldr	r0, [pc, #48]	@ (80024c4 <MX_GPIO_Init+0x2f0>)
 8002494:	f001 f84a 	bl	800352c <HAL_GPIO_Init>

	/*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
	GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002498:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a6:	2303      	movs	r3, #3
 80024a8:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024aa:	2307      	movs	r3, #7
 80024ac:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024b2:	4619      	mov	r1, r3
 80024b4:	e010      	b.n	80024d8 <MX_GPIO_Init+0x304>
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020800 	.word	0x40020800
 80024c0:	40020000 	.word	0x40020000
 80024c4:	40020c00 	.word	0x40020c00
 80024c8:	40021800 	.word	0x40021800
 80024cc:	40021400 	.word	0x40021400
 80024d0:	40020400 	.word	0x40020400
 80024d4:	40021000 	.word	0x40021000
 80024d8:	4812      	ldr	r0, [pc, #72]	@ (8002524 <MX_GPIO_Init+0x350>)
 80024da:	f001 f827 	bl	800352c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80024de:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e4:	2301      	movs	r3, #1
 80024e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ec:	2300      	movs	r3, #0
 80024ee:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024f4:	4619      	mov	r1, r3
 80024f6:	480c      	ldr	r0, [pc, #48]	@ (8002528 <MX_GPIO_Init+0x354>)
 80024f8:	f001 f818 	bl	800352c <HAL_GPIO_Init>

	/*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
	GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80024fc:	2360      	movs	r3, #96	@ 0x60
 80024fe:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002500:	2302      	movs	r3, #2
 8002502:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002508:	2303      	movs	r3, #3
 800250a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800250c:	230c      	movs	r3, #12
 800250e:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002510:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002514:	4619      	mov	r1, r3
 8002516:	4805      	ldr	r0, [pc, #20]	@ (800252c <MX_GPIO_Init+0x358>)
 8002518:	f001 f808 	bl	800352c <HAL_GPIO_Init>
}
 800251c:	bf00      	nop
 800251e:	3738      	adds	r7, #56	@ 0x38
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40020000 	.word	0x40020000
 8002528:	40021800 	.word	0x40021800
 800252c:	40020400 	.word	0x40020400

08002530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002534:	b672      	cpsid	i
}
 8002536:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <Error_Handler+0x8>

0800253c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
 8002546:	4b10      	ldr	r3, [pc, #64]	@ (8002588 <HAL_MspInit+0x4c>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254a:	4a0f      	ldr	r2, [pc, #60]	@ (8002588 <HAL_MspInit+0x4c>)
 800254c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002550:	6453      	str	r3, [r2, #68]	@ 0x44
 8002552:	4b0d      	ldr	r3, [pc, #52]	@ (8002588 <HAL_MspInit+0x4c>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	4b09      	ldr	r3, [pc, #36]	@ (8002588 <HAL_MspInit+0x4c>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	4a08      	ldr	r2, [pc, #32]	@ (8002588 <HAL_MspInit+0x4c>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800256c:	6413      	str	r3, [r2, #64]	@ 0x40
 800256e:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_MspInit+0x4c>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800257a:	2007      	movs	r0, #7
 800257c:	f000 ff86 	bl	800348c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40023800 	.word	0x40023800

0800258c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	@ 0x28
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a29      	ldr	r2, [pc, #164]	@ (8002650 <HAL_I2C_MspInit+0xc4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d14b      	bne.n	8002646 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	4b28      	ldr	r3, [pc, #160]	@ (8002654 <HAL_I2C_MspInit+0xc8>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b6:	4a27      	ldr	r2, [pc, #156]	@ (8002654 <HAL_I2C_MspInit+0xc8>)
 80025b8:	f043 0304 	orr.w	r3, r3, #4
 80025bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025be:	4b25      	ldr	r3, [pc, #148]	@ (8002654 <HAL_I2C_MspInit+0xc8>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	4b21      	ldr	r3, [pc, #132]	@ (8002654 <HAL_I2C_MspInit+0xc8>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	4a20      	ldr	r2, [pc, #128]	@ (8002654 <HAL_I2C_MspInit+0xc8>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025da:	4b1e      	ldr	r3, [pc, #120]	@ (8002654 <HAL_I2C_MspInit+0xc8>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80025e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ec:	2312      	movs	r3, #18
 80025ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025f8:	2304      	movs	r3, #4
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4619      	mov	r1, r3
 8002602:	4815      	ldr	r0, [pc, #84]	@ (8002658 <HAL_I2C_MspInit+0xcc>)
 8002604:	f000 ff92 	bl	800352c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002608:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800260c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800260e:	2312      	movs	r3, #18
 8002610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002616:	2300      	movs	r3, #0
 8002618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800261a:	2304      	movs	r3, #4
 800261c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800261e:	f107 0314 	add.w	r3, r7, #20
 8002622:	4619      	mov	r1, r3
 8002624:	480d      	ldr	r0, [pc, #52]	@ (800265c <HAL_I2C_MspInit+0xd0>)
 8002626:	f000 ff81 	bl	800352c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <HAL_I2C_MspInit+0xc8>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	4a08      	ldr	r2, [pc, #32]	@ (8002654 <HAL_I2C_MspInit+0xc8>)
 8002634:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002638:	6413      	str	r3, [r2, #64]	@ 0x40
 800263a:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <HAL_I2C_MspInit+0xc8>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002646:	bf00      	nop
 8002648:	3728      	adds	r7, #40	@ 0x28
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40005c00 	.word	0x40005c00
 8002654:	40023800 	.word	0x40023800
 8002658:	40020800 	.word	0x40020800
 800265c:	40020000 	.word	0x40020000

08002660 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b09a      	sub	sp, #104	@ 0x68
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800267c:	2230      	movs	r2, #48	@ 0x30
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f004 f991 	bl	80069a8 <memset>
  if(hltdc->Instance==LTDC)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a81      	ldr	r2, [pc, #516]	@ (8002890 <HAL_LTDC_MspInit+0x230>)
 800268c:	4293      	cmp	r3, r2
 800268e:	f040 80fb 	bne.w	8002888 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002692:	2308      	movs	r3, #8
 8002694:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8002696:	23c8      	movs	r3, #200	@ 0xc8
 8002698:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800269a:	2302      	movs	r3, #2
 800269c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 800269e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80026a2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026a8:	4618      	mov	r0, r3
 80026aa:	f003 f9db 	bl	8005a64 <HAL_RCCEx_PeriphCLKConfig>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80026b4:	f7ff ff3c 	bl	8002530 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80026b8:	2300      	movs	r3, #0
 80026ba:	623b      	str	r3, [r7, #32]
 80026bc:	4b75      	ldr	r3, [pc, #468]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 80026be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c0:	4a74      	ldr	r2, [pc, #464]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 80026c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80026c8:	4b72      	ldr	r3, [pc, #456]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 80026ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026d0:	623b      	str	r3, [r7, #32]
 80026d2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026d4:	2300      	movs	r3, #0
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	4b6e      	ldr	r3, [pc, #440]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026dc:	4a6d      	ldr	r2, [pc, #436]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 80026de:	f043 0320 	orr.w	r3, r3, #32
 80026e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e4:	4b6b      	ldr	r3, [pc, #428]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f0:	2300      	movs	r3, #0
 80026f2:	61bb      	str	r3, [r7, #24]
 80026f4:	4b67      	ldr	r3, [pc, #412]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	4a66      	ldr	r2, [pc, #408]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002700:	4b64      	ldr	r3, [pc, #400]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	4b60      	ldr	r3, [pc, #384]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 8002712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002714:	4a5f      	ldr	r2, [pc, #380]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 8002716:	f043 0302 	orr.w	r3, r3, #2
 800271a:	6313      	str	r3, [r2, #48]	@ 0x30
 800271c:	4b5d      	ldr	r3, [pc, #372]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	4b59      	ldr	r3, [pc, #356]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002730:	4a58      	ldr	r2, [pc, #352]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 8002732:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002736:	6313      	str	r3, [r2, #48]	@ 0x30
 8002738:	4b56      	ldr	r3, [pc, #344]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 800273a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	4b52      	ldr	r3, [pc, #328]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274c:	4a51      	ldr	r2, [pc, #324]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 800274e:	f043 0304 	orr.w	r3, r3, #4
 8002752:	6313      	str	r3, [r2, #48]	@ 0x30
 8002754:	4b4f      	ldr	r3, [pc, #316]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 8002756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002760:	2300      	movs	r3, #0
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	4b4b      	ldr	r3, [pc, #300]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002768:	4a4a      	ldr	r2, [pc, #296]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 800276a:	f043 0308 	orr.w	r3, r3, #8
 800276e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002770:	4b48      	ldr	r3, [pc, #288]	@ (8002894 <HAL_LTDC_MspInit+0x234>)
 8002772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800277c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002780:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002782:	2302      	movs	r3, #2
 8002784:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278a:	2300      	movs	r3, #0
 800278c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800278e:	230e      	movs	r3, #14
 8002790:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002792:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002796:	4619      	mov	r1, r3
 8002798:	483f      	ldr	r0, [pc, #252]	@ (8002898 <HAL_LTDC_MspInit+0x238>)
 800279a:	f000 fec7 	bl	800352c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800279e:	f641 0358 	movw	r3, #6232	@ 0x1858
 80027a2:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	2302      	movs	r3, #2
 80027a6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	2300      	movs	r3, #0
 80027ae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027b0:	230e      	movs	r3, #14
 80027b2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027b8:	4619      	mov	r1, r3
 80027ba:	4838      	ldr	r0, [pc, #224]	@ (800289c <HAL_LTDC_MspInit+0x23c>)
 80027bc:	f000 feb6 	bl	800352c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80027c0:	2303      	movs	r3, #3
 80027c2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027cc:	2300      	movs	r3, #0
 80027ce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80027d0:	2309      	movs	r3, #9
 80027d2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027d8:	4619      	mov	r1, r3
 80027da:	4831      	ldr	r0, [pc, #196]	@ (80028a0 <HAL_LTDC_MspInit+0x240>)
 80027dc:	f000 fea6 	bl	800352c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80027e0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80027e4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e6:	2302      	movs	r3, #2
 80027e8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ee:	2300      	movs	r3, #0
 80027f0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027f2:	230e      	movs	r3, #14
 80027f4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027fa:	4619      	mov	r1, r3
 80027fc:	4828      	ldr	r0, [pc, #160]	@ (80028a0 <HAL_LTDC_MspInit+0x240>)
 80027fe:	f000 fe95 	bl	800352c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002802:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002806:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2300      	movs	r3, #0
 8002812:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002814:	230e      	movs	r3, #14
 8002816:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002818:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800281c:	4619      	mov	r1, r3
 800281e:	4821      	ldr	r0, [pc, #132]	@ (80028a4 <HAL_LTDC_MspInit+0x244>)
 8002820:	f000 fe84 	bl	800352c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002824:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002828:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002832:	2300      	movs	r3, #0
 8002834:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002836:	230e      	movs	r3, #14
 8002838:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800283e:	4619      	mov	r1, r3
 8002840:	4819      	ldr	r0, [pc, #100]	@ (80028a8 <HAL_LTDC_MspInit+0x248>)
 8002842:	f000 fe73 	bl	800352c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002846:	2348      	movs	r3, #72	@ 0x48
 8002848:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284a:	2302      	movs	r3, #2
 800284c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002852:	2300      	movs	r3, #0
 8002854:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002856:	230e      	movs	r3, #14
 8002858:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800285a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800285e:	4619      	mov	r1, r3
 8002860:	4812      	ldr	r0, [pc, #72]	@ (80028ac <HAL_LTDC_MspInit+0x24c>)
 8002862:	f000 fe63 	bl	800352c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002866:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800286a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002874:	2300      	movs	r3, #0
 8002876:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002878:	2309      	movs	r3, #9
 800287a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800287c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002880:	4619      	mov	r1, r3
 8002882:	4808      	ldr	r0, [pc, #32]	@ (80028a4 <HAL_LTDC_MspInit+0x244>)
 8002884:	f000 fe52 	bl	800352c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002888:	bf00      	nop
 800288a:	3768      	adds	r7, #104	@ 0x68
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40016800 	.word	0x40016800
 8002894:	40023800 	.word	0x40023800
 8002898:	40021400 	.word	0x40021400
 800289c:	40020000 	.word	0x40020000
 80028a0:	40020400 	.word	0x40020400
 80028a4:	40021800 	.word	0x40021800
 80028a8:	40020800 	.word	0x40020800
 80028ac:	40020c00 	.word	0x40020c00

080028b0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0b      	ldr	r2, [pc, #44]	@ (80028ec <HAL_RNG_MspInit+0x3c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d10d      	bne.n	80028de <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <HAL_RNG_MspInit+0x40>)
 80028c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ca:	4a09      	ldr	r2, [pc, #36]	@ (80028f0 <HAL_RNG_MspInit+0x40>)
 80028cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028d0:	6353      	str	r3, [r2, #52]	@ 0x34
 80028d2:	4b07      	ldr	r3, [pc, #28]	@ (80028f0 <HAL_RNG_MspInit+0x40>)
 80028d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	50060800 	.word	0x50060800
 80028f0:	40023800 	.word	0x40023800

080028f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	@ 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a19      	ldr	r2, [pc, #100]	@ (8002978 <HAL_SPI_MspInit+0x84>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d12c      	bne.n	8002970 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	4b18      	ldr	r3, [pc, #96]	@ (800297c <HAL_SPI_MspInit+0x88>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	4a17      	ldr	r2, [pc, #92]	@ (800297c <HAL_SPI_MspInit+0x88>)
 8002920:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002924:	6453      	str	r3, [r2, #68]	@ 0x44
 8002926:	4b15      	ldr	r3, [pc, #84]	@ (800297c <HAL_SPI_MspInit+0x88>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	4b11      	ldr	r3, [pc, #68]	@ (800297c <HAL_SPI_MspInit+0x88>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	4a10      	ldr	r2, [pc, #64]	@ (800297c <HAL_SPI_MspInit+0x88>)
 800293c:	f043 0320 	orr.w	r3, r3, #32
 8002940:	6313      	str	r3, [r2, #48]	@ 0x30
 8002942:	4b0e      	ldr	r3, [pc, #56]	@ (800297c <HAL_SPI_MspInit+0x88>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800294e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002954:	2302      	movs	r3, #2
 8002956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295c:	2300      	movs	r3, #0
 800295e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002960:	2305      	movs	r3, #5
 8002962:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	4619      	mov	r1, r3
 800296a:	4805      	ldr	r0, [pc, #20]	@ (8002980 <HAL_SPI_MspInit+0x8c>)
 800296c:	f000 fdde 	bl	800352c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002970:	bf00      	nop
 8002972:	3728      	adds	r7, #40	@ 0x28
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40015000 	.word	0x40015000
 800297c:	40023800 	.word	0x40023800
 8002980:	40021400 	.word	0x40021400

08002984 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a08      	ldr	r2, [pc, #32]	@ (80029b4 <HAL_SPI_MspDeInit+0x30>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d10a      	bne.n	80029ac <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002996:	4b08      	ldr	r3, [pc, #32]	@ (80029b8 <HAL_SPI_MspDeInit+0x34>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299a:	4a07      	ldr	r2, [pc, #28]	@ (80029b8 <HAL_SPI_MspDeInit+0x34>)
 800299c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80029a0:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80029a2:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80029a6:	4805      	ldr	r0, [pc, #20]	@ (80029bc <HAL_SPI_MspDeInit+0x38>)
 80029a8:	f000 ff6c 	bl	8003884 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40015000 	.word	0x40015000
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40021400 	.word	0x40021400

080029c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d0:	d10d      	bne.n	80029ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <HAL_TIM_Base_MspInit+0x3c>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	4a08      	ldr	r2, [pc, #32]	@ (80029fc <HAL_TIM_Base_MspInit+0x3c>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029e2:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_TIM_Base_MspInit+0x3c>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800

08002a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a04:	bf00      	nop
 8002a06:	e7fd      	b.n	8002a04 <NMI_Handler+0x4>

08002a08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a0c:	bf00      	nop
 8002a0e:	e7fd      	b.n	8002a0c <HardFault_Handler+0x4>

08002a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a14:	bf00      	nop
 8002a16:	e7fd      	b.n	8002a14 <MemManage_Handler+0x4>

08002a18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a1c:	bf00      	nop
 8002a1e:	e7fd      	b.n	8002a1c <BusFault_Handler+0x4>

08002a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a24:	bf00      	nop
 8002a26:	e7fd      	b.n	8002a24 <UsageFault_Handler+0x4>

08002a28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a56:	f000 fbe1 	bl	800321c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002a64:	f000 f9ce 	bl	8002e04 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002a68:	f000 f98e 	bl	8002d88 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	2103      	movs	r1, #3
 8002a70:	2082      	movs	r0, #130	@ 0x82
 8002a72:	f000 fa1b 	bl	8002eac <I2C3_Write>
    HAL_Delay(5);
 8002a76:	2005      	movs	r0, #5
 8002a78:	f000 fbf0 	bl	800325c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2103      	movs	r1, #3
 8002a80:	2082      	movs	r0, #130	@ 0x82
 8002a82:	f000 fa13 	bl	8002eac <I2C3_Write>
    HAL_Delay(2);
 8002a86:	2002      	movs	r0, #2
 8002a88:	f000 fbe8 	bl	800325c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002a8c:	1cba      	adds	r2, r7, #2
 8002a8e:	2302      	movs	r3, #2
 8002a90:	2100      	movs	r1, #0
 8002a92:	2082      	movs	r0, #130	@ 0x82
 8002a94:	f000 fa5a 	bl	8002f4c <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002a98:	887b      	ldrh	r3, [r7, #2]
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002a9e:	887b      	ldrh	r3, [r7, #2]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	f640 0211 	movw	r2, #2065	@ 0x811
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d001      	beq.n	8002ab8 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e075      	b.n	8002ba4 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002ab8:	2202      	movs	r2, #2
 8002aba:	2103      	movs	r1, #3
 8002abc:	2082      	movs	r0, #130	@ 0x82
 8002abe:	f000 f9f5 	bl	8002eac <I2C3_Write>
    HAL_Delay(5);
 8002ac2:	2005      	movs	r0, #5
 8002ac4:	f000 fbca 	bl	800325c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2103      	movs	r1, #3
 8002acc:	2082      	movs	r0, #130	@ 0x82
 8002ace:	f000 f9ed 	bl	8002eac <I2C3_Write>
    HAL_Delay(2);
 8002ad2:	2002      	movs	r0, #2
 8002ad4:	f000 fbc2 	bl	800325c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002ad8:	2004      	movs	r0, #4
 8002ada:	f000 f867 	bl	8002bac <STMPE811_Read>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002ae2:	797b      	ldrb	r3, [r7, #5]
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002aea:	797b      	ldrb	r3, [r7, #5]
 8002aec:	461a      	mov	r2, r3
 8002aee:	2104      	movs	r1, #4
 8002af0:	2082      	movs	r0, #130	@ 0x82
 8002af2:	f000 f9db 	bl	8002eac <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002af6:	2004      	movs	r0, #4
 8002af8:	f000 f858 	bl	8002bac <STMPE811_Read>
 8002afc:	4603      	mov	r3, r0
 8002afe:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002b00:	797b      	ldrb	r3, [r7, #5]
 8002b02:	f023 0302 	bic.w	r3, r3, #2
 8002b06:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002b08:	797b      	ldrb	r3, [r7, #5]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	2104      	movs	r1, #4
 8002b0e:	2082      	movs	r0, #130	@ 0x82
 8002b10:	f000 f9cc 	bl	8002eac <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002b14:	2249      	movs	r2, #73	@ 0x49
 8002b16:	2120      	movs	r1, #32
 8002b18:	2082      	movs	r0, #130	@ 0x82
 8002b1a:	f000 f9c7 	bl	8002eac <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002b1e:	2002      	movs	r0, #2
 8002b20:	f000 fb9c 	bl	800325c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002b24:	2201      	movs	r2, #1
 8002b26:	2121      	movs	r1, #33	@ 0x21
 8002b28:	2082      	movs	r0, #130	@ 0x82
 8002b2a:	f000 f9bf 	bl	8002eac <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002b2e:	2017      	movs	r0, #23
 8002b30:	f000 f83c 	bl	8002bac <STMPE811_Read>
 8002b34:	4603      	mov	r3, r0
 8002b36:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002b38:	797b      	ldrb	r3, [r7, #5]
 8002b3a:	f043 031e 	orr.w	r3, r3, #30
 8002b3e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002b40:	797b      	ldrb	r3, [r7, #5]
 8002b42:	461a      	mov	r2, r3
 8002b44:	2117      	movs	r1, #23
 8002b46:	2082      	movs	r0, #130	@ 0x82
 8002b48:	f000 f9b0 	bl	8002eac <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002b4c:	229a      	movs	r2, #154	@ 0x9a
 8002b4e:	2141      	movs	r1, #65	@ 0x41
 8002b50:	2082      	movs	r0, #130	@ 0x82
 8002b52:	f000 f9ab 	bl	8002eac <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002b56:	2201      	movs	r2, #1
 8002b58:	214a      	movs	r1, #74	@ 0x4a
 8002b5a:	2082      	movs	r0, #130	@ 0x82
 8002b5c:	f000 f9a6 	bl	8002eac <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002b60:	2201      	movs	r2, #1
 8002b62:	214b      	movs	r1, #75	@ 0x4b
 8002b64:	2082      	movs	r0, #130	@ 0x82
 8002b66:	f000 f9a1 	bl	8002eac <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	214b      	movs	r1, #75	@ 0x4b
 8002b6e:	2082      	movs	r0, #130	@ 0x82
 8002b70:	f000 f99c 	bl	8002eac <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002b74:	2201      	movs	r2, #1
 8002b76:	2156      	movs	r1, #86	@ 0x56
 8002b78:	2082      	movs	r0, #130	@ 0x82
 8002b7a:	f000 f997 	bl	8002eac <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002b7e:	2201      	movs	r2, #1
 8002b80:	2158      	movs	r1, #88	@ 0x58
 8002b82:	2082      	movs	r0, #130	@ 0x82
 8002b84:	f000 f992 	bl	8002eac <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002b88:	2203      	movs	r2, #3
 8002b8a:	2140      	movs	r1, #64	@ 0x40
 8002b8c:	2082      	movs	r0, #130	@ 0x82
 8002b8e:	f000 f98d 	bl	8002eac <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002b92:	22ff      	movs	r2, #255	@ 0xff
 8002b94:	210b      	movs	r1, #11
 8002b96:	2082      	movs	r0, #130	@ 0x82
 8002b98:	f000 f988 	bl	8002eac <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002b9c:	20c8      	movs	r0, #200	@ 0xc8
 8002b9e:	f000 fb5d 	bl	800325c <HAL_Delay>

    return STMPE811_State_Ok;
 8002ba2:	2302      	movs	r3, #2

}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002bb6:	f107 020f 	add.w	r2, r7, #15
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	2082      	movs	r0, #130	@ 0x82
 8002bc0:	f000 f99e 	bl	8002f00 <I2C3_Read>

    return readData;
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	791a      	ldrb	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002bde:	2040      	movs	r0, #64	@ 0x40
 8002be0:	f7ff ffe4 	bl	8002bac <STMPE811_Read>
 8002be4:	4603      	mov	r3, r0
 8002be6:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	db0e      	blt.n	8002c0e <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	214b      	movs	r1, #75	@ 0x4b
 8002bfa:	2082      	movs	r0, #130	@ 0x82
 8002bfc:	f000 f956 	bl	8002eac <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002c00:	2200      	movs	r2, #0
 8002c02:	214b      	movs	r1, #75	@ 0x4b
 8002c04:	2082      	movs	r0, #130	@ 0x82
 8002c06:	f000 f951 	bl	8002eac <I2C3_Write>

        return STMPE811_State_Released;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e0a7      	b.n	8002d5e <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	799b      	ldrb	r3, [r3, #6]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d117      	bne.n	8002c46 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f9b8 	bl	8002f90 <TM_STMPE811_ReadX>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	885b      	ldrh	r3, [r3, #2]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fa0b 	bl	800304c <TM_STMPE811_ReadY>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	805a      	strh	r2, [r3, #2]
 8002c44:	e048      	b.n	8002cd8 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	799b      	ldrb	r3, [r3, #6]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d112      	bne.n	8002c74 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 f99c 	bl	8002f90 <TM_STMPE811_ReadX>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	885b      	ldrh	r3, [r3, #2]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 f9f1 	bl	800304c <TM_STMPE811_ReadY>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	805a      	strh	r2, [r3, #2]
 8002c72:	e031      	b.n	8002cd8 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	799b      	ldrb	r3, [r3, #6]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d115      	bne.n	8002ca8 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	885b      	ldrh	r3, [r3, #2]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f985 	bl	8002f90 <TM_STMPE811_ReadX>
 8002c86:	4603      	mov	r3, r0
 8002c88:	461a      	mov	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 f9da 	bl	800304c <TM_STMPE811_ReadY>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	801a      	strh	r2, [r3, #0]
 8002ca6:	e017      	b.n	8002cd8 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	799b      	ldrb	r3, [r3, #6]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d113      	bne.n	8002cd8 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 f96b 	bl	8002f90 <TM_STMPE811_ReadX>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f9be 	bl	800304c <TM_STMPE811_ReadY>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002cd8:	2201      	movs	r2, #1
 8002cda:	214b      	movs	r1, #75	@ 0x4b
 8002cdc:	2082      	movs	r0, #130	@ 0x82
 8002cde:	f000 f8e5 	bl	8002eac <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	214b      	movs	r1, #75	@ 0x4b
 8002ce6:	2082      	movs	r0, #130	@ 0x82
 8002ce8:	f000 f8e0 	bl	8002eac <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	799b      	ldrb	r3, [r3, #6]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <STMPE811_ReadTouch+0x12e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	799b      	ldrb	r3, [r3, #6]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d115      	bne.n	8002d28 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d027      	beq.n	8002d54 <STMPE811_ReadTouch+0x186>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	2bee      	cmp	r3, #238	@ 0xee
 8002d0a:	d823      	bhi.n	8002d54 <STMPE811_ReadTouch+0x186>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	885b      	ldrh	r3, [r3, #2]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d01f      	beq.n	8002d54 <STMPE811_ReadTouch+0x186>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	885b      	ldrh	r3, [r3, #2]
 8002d18:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002d1c:	d81a      	bhi.n	8002d54 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002d24:	2300      	movs	r3, #0
 8002d26:	e01a      	b.n	8002d5e <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d012      	beq.n	8002d56 <STMPE811_ReadTouch+0x188>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002d38:	d80d      	bhi.n	8002d56 <STMPE811_ReadTouch+0x188>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	885b      	ldrh	r3, [r3, #2]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <STMPE811_ReadTouch+0x188>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	885b      	ldrh	r3, [r3, #2]
 8002d46:	2bee      	cmp	r3, #238	@ 0xee
 8002d48:	d805      	bhi.n	8002d56 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e004      	b.n	8002d5e <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002d54:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002d5c:	2301      	movs	r3, #1
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002d6c:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002d74:	bf00      	nop
 8002d76:	e7fd      	b.n	8002d74 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20025bd0 	.word	0x20025bd0

08002d88 <I2C3_Init>:

static void I2C3_Init()
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	4b18      	ldr	r3, [pc, #96]	@ (8002df4 <I2C3_Init+0x6c>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	4a17      	ldr	r2, [pc, #92]	@ (8002df4 <I2C3_Init+0x6c>)
 8002d98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d9e:	4b15      	ldr	r3, [pc, #84]	@ (8002df4 <I2C3_Init+0x6c>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002daa:	4b13      	ldr	r3, [pc, #76]	@ (8002df8 <I2C3_Init+0x70>)
 8002dac:	4a13      	ldr	r2, [pc, #76]	@ (8002dfc <I2C3_Init+0x74>)
 8002dae:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002db0:	4b11      	ldr	r3, [pc, #68]	@ (8002df8 <I2C3_Init+0x70>)
 8002db2:	4a13      	ldr	r2, [pc, #76]	@ (8002e00 <I2C3_Init+0x78>)
 8002db4:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002db6:	4b10      	ldr	r3, [pc, #64]	@ (8002df8 <I2C3_Init+0x70>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8002df8 <I2C3_Init+0x70>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002df8 <I2C3_Init+0x70>)
 8002dc4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002dc8:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002dca:	4b0b      	ldr	r3, [pc, #44]	@ (8002df8 <I2C3_Init+0x70>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002dd0:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <I2C3_Init+0x70>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002dd6:	4808      	ldr	r0, [pc, #32]	@ (8002df8 <I2C3_Init+0x70>)
 8002dd8:	f000 fe7a 	bl	8003ad0 <HAL_I2C_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002de6:	bf00      	nop
 8002de8:	e7fd      	b.n	8002de6 <I2C3_Init+0x5e>
    }
    return;
 8002dea:	bf00      	nop
}
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	20025b7c 	.word	0x20025b7c
 8002dfc:	40005c00 	.word	0x40005c00
 8002e00:	000186a0 	.word	0x000186a0

08002e04 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0a:	f107 030c 	add.w	r3, r7, #12
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	609a      	str	r2, [r3, #8]
 8002e16:	60da      	str	r2, [r3, #12]
 8002e18:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ea0 <I2C3_MspInit+0x9c>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea0 <I2C3_MspInit+0x9c>)
 8002e24:	f043 0304 	orr.w	r3, r3, #4
 8002e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea0 <I2C3_MspInit+0x9c>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	4b19      	ldr	r3, [pc, #100]	@ (8002ea0 <I2C3_MspInit+0x9c>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3e:	4a18      	ldr	r2, [pc, #96]	@ (8002ea0 <I2C3_MspInit+0x9c>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e46:	4b16      	ldr	r3, [pc, #88]	@ (8002ea0 <I2C3_MspInit+0x9c>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002e52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e58:	2312      	movs	r3, #18
 8002e5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e64:	2304      	movs	r3, #4
 8002e66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002e68:	f107 030c 	add.w	r3, r7, #12
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	480d      	ldr	r0, [pc, #52]	@ (8002ea4 <I2C3_MspInit+0xa0>)
 8002e70:	f000 fb5c 	bl	800352c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002e74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e7a:	2312      	movs	r3, #18
 8002e7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e86:	2304      	movs	r3, #4
 8002e88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002e8a:	f107 030c 	add.w	r3, r7, #12
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4805      	ldr	r0, [pc, #20]	@ (8002ea8 <I2C3_MspInit+0xa4>)
 8002e92:	f000 fb4b 	bl	800352c <HAL_GPIO_Init>
    
}
 8002e96:	bf00      	nop
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40020800 	.word	0x40020800
 8002ea8:	40020000 	.word	0x40020000

08002eac <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af04      	add	r7, sp, #16
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	80fb      	strh	r3, [r7, #6]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	717b      	strb	r3, [r7, #5]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002ebe:	793b      	ldrb	r3, [r7, #4]
 8002ec0:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002ec2:	797b      	ldrb	r3, [r7, #5]
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	88f9      	ldrh	r1, [r7, #6]
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef4 <I2C3_Write+0x48>)
 8002eca:	9302      	str	r3, [sp, #8]
 8002ecc:	2301      	movs	r3, #1
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	f107 030f 	add.w	r3, r7, #15
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	4807      	ldr	r0, [pc, #28]	@ (8002ef8 <I2C3_Write+0x4c>)
 8002eda:	f000 ff3d 	bl	8003d58 <HAL_I2C_Mem_Write>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b06      	ldr	r3, [pc, #24]	@ (8002efc <I2C3_Write+0x50>)
 8002ee4:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002ee6:	f7ff ff3f 	bl	8002d68 <verifyHAL_I2C_IS_OKAY>
}
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	0003d090 	.word	0x0003d090
 8002ef8:	20025b7c 	.word	0x20025b7c
 8002efc:	20025bd0 	.word	0x20025bd0

08002f00 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af04      	add	r7, sp, #16
 8002f06:	4603      	mov	r3, r0
 8002f08:	603a      	str	r2, [r7, #0]
 8002f0a:	71fb      	strb	r3, [r7, #7]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	b299      	uxth	r1, r3
 8002f14:	79bb      	ldrb	r3, [r7, #6]
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	4b09      	ldr	r3, [pc, #36]	@ (8002f40 <I2C3_Read+0x40>)
 8002f1a:	9302      	str	r3, [sp, #8]
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	2301      	movs	r3, #1
 8002f26:	4807      	ldr	r0, [pc, #28]	@ (8002f44 <I2C3_Read+0x44>)
 8002f28:	f001 f810 	bl	8003f4c <HAL_I2C_Mem_Read>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <I2C3_Read+0x48>)
 8002f32:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002f34:	f7ff ff18 	bl	8002d68 <verifyHAL_I2C_IS_OKAY>
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	0003d090 	.word	0x0003d090
 8002f44:	20025b7c 	.word	0x20025b7c
 8002f48:	20025bd0 	.word	0x20025bd0

08002f4c <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af04      	add	r7, sp, #16
 8002f52:	603a      	str	r2, [r7, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	71bb      	strb	r3, [r7, #6]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	b299      	uxth	r1, r3
 8002f66:	79bb      	ldrb	r3, [r7, #6]
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	4b07      	ldr	r3, [pc, #28]	@ (8002f88 <I2C3_MulitByteRead+0x3c>)
 8002f6c:	9302      	str	r3, [sp, #8]
 8002f6e:	88bb      	ldrh	r3, [r7, #4]
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	2301      	movs	r3, #1
 8002f78:	4804      	ldr	r0, [pc, #16]	@ (8002f8c <I2C3_MulitByteRead+0x40>)
 8002f7a:	f000 ffe7 	bl	8003f4c <HAL_I2C_Mem_Read>
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	0003d090 	.word	0x0003d090
 8002f8c:	20025b7c 	.word	0x20025b7c

08002f90 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002f9a:	204d      	movs	r0, #77	@ 0x4d
 8002f9c:	f7ff fe06 	bl	8002bac <STMPE811_Read>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002fa4:	204e      	movs	r0, #78	@ 0x4e
 8002fa6:	f7ff fe01 	bl	8002bac <STMPE811_Read>
 8002faa:	4603      	mov	r3, r0
 8002fac:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002fae:	7a7b      	ldrb	r3, [r7, #9]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	b21a      	sxth	r2, r3
 8002fb4:	7a3b      	ldrb	r3, [r7, #8]
 8002fb6:	b21b      	sxth	r3, r3
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002fbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fc0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	dc06      	bgt.n	8002fd6 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002fc8:	89fb      	ldrh	r3, [r7, #14]
 8002fca:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002fce:	330c      	adds	r3, #12
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	81fb      	strh	r3, [r7, #14]
 8002fd4:	e005      	b.n	8002fe2 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002fd6:	89fb      	ldrh	r3, [r7, #14]
 8002fd8:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002fdc:	3308      	adds	r3, #8
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002fe2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fe6:	4a18      	ldr	r2, [pc, #96]	@ (8003048 <TM_STMPE811_ReadX+0xb8>)
 8002fe8:	fb82 1203 	smull	r1, r2, r2, r3
 8002fec:	441a      	add	r2, r3
 8002fee:	10d2      	asrs	r2, r2, #3
 8002ff0:	17db      	asrs	r3, r3, #31
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002ff6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ffa:	2bef      	cmp	r3, #239	@ 0xef
 8002ffc:	dd02      	ble.n	8003004 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002ffe:	23ef      	movs	r3, #239	@ 0xef
 8003000:	81fb      	strh	r3, [r7, #14]
 8003002:	e005      	b.n	8003010 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8003004:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003008:	2b00      	cmp	r3, #0
 800300a:	da01      	bge.n	8003010 <TM_STMPE811_ReadX+0x80>
        val = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003010:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	429a      	cmp	r2, r3
 8003018:	dd05      	ble.n	8003026 <TM_STMPE811_ReadX+0x96>
 800301a:	89fa      	ldrh	r2, [r7, #14]
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	b29b      	uxth	r3, r3
 8003022:	b21b      	sxth	r3, r3
 8003024:	e004      	b.n	8003030 <TM_STMPE811_ReadX+0xa0>
 8003026:	89fb      	ldrh	r3, [r7, #14]
 8003028:	88fa      	ldrh	r2, [r7, #6]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	b29b      	uxth	r3, r3
 800302e:	b21b      	sxth	r3, r3
 8003030:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003032:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003036:	2b04      	cmp	r3, #4
 8003038:	dd01      	ble.n	800303e <TM_STMPE811_ReadX+0xae>
        return val;
 800303a:	89fb      	ldrh	r3, [r7, #14]
 800303c:	e000      	b.n	8003040 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800303e:	88fb      	ldrh	r3, [r7, #6]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	88888889 	.word	0x88888889

0800304c <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003056:	204f      	movs	r0, #79	@ 0x4f
 8003058:	f7ff fda8 	bl	8002bac <STMPE811_Read>
 800305c:	4603      	mov	r3, r0
 800305e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003060:	2050      	movs	r0, #80	@ 0x50
 8003062:	f7ff fda3 	bl	8002bac <STMPE811_Read>
 8003066:	4603      	mov	r3, r0
 8003068:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800306a:	7a7b      	ldrb	r3, [r7, #9]
 800306c:	021b      	lsls	r3, r3, #8
 800306e:	b21a      	sxth	r2, r3
 8003070:	7a3b      	ldrb	r3, [r7, #8]
 8003072:	b21b      	sxth	r3, r3
 8003074:	4313      	orrs	r3, r2
 8003076:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003078:	89fb      	ldrh	r3, [r7, #14]
 800307a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800307e:	b29b      	uxth	r3, r3
 8003080:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003082:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003086:	4a19      	ldr	r2, [pc, #100]	@ (80030ec <TM_STMPE811_ReadY+0xa0>)
 8003088:	fb82 1203 	smull	r1, r2, r2, r3
 800308c:	1052      	asrs	r2, r2, #1
 800308e:	17db      	asrs	r3, r3, #31
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003094:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003098:	2b00      	cmp	r3, #0
 800309a:	dc02      	bgt.n	80030a2 <TM_STMPE811_ReadY+0x56>
        val = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	81fb      	strh	r3, [r7, #14]
 80030a0:	e007      	b.n	80030b2 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 80030a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030a6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80030aa:	db02      	blt.n	80030b2 <TM_STMPE811_ReadY+0x66>
        val = 319;
 80030ac:	f240 133f 	movw	r3, #319	@ 0x13f
 80030b0:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80030b2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	dd05      	ble.n	80030c8 <TM_STMPE811_ReadY+0x7c>
 80030bc:	89fa      	ldrh	r2, [r7, #14]
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	b21b      	sxth	r3, r3
 80030c6:	e004      	b.n	80030d2 <TM_STMPE811_ReadY+0x86>
 80030c8:	89fb      	ldrh	r3, [r7, #14]
 80030ca:	88fa      	ldrh	r2, [r7, #6]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	b21b      	sxth	r3, r3
 80030d2:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80030d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80030d8:	2b04      	cmp	r3, #4
 80030da:	dd01      	ble.n	80030e0 <TM_STMPE811_ReadY+0x94>
        return val;
 80030dc:	89fb      	ldrh	r3, [r7, #14]
 80030de:	e000      	b.n	80030e2 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80030e0:	88fb      	ldrh	r3, [r7, #6]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	2e8ba2e9 	.word	0x2e8ba2e9

080030f0 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003104:	4b06      	ldr	r3, [pc, #24]	@ (8003120 <SystemInit+0x20>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310a:	4a05      	ldr	r2, [pc, #20]	@ (8003120 <SystemInit+0x20>)
 800310c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000ed00 	.word	0xe000ed00

08003124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003124:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800315c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003128:	f7ff ffea 	bl	8003100 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800312c:	480c      	ldr	r0, [pc, #48]	@ (8003160 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800312e:	490d      	ldr	r1, [pc, #52]	@ (8003164 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003130:	4a0d      	ldr	r2, [pc, #52]	@ (8003168 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003134:	e002      	b.n	800313c <LoopCopyDataInit>

08003136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800313a:	3304      	adds	r3, #4

0800313c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800313c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800313e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003140:	d3f9      	bcc.n	8003136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003142:	4a0a      	ldr	r2, [pc, #40]	@ (800316c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003144:	4c0a      	ldr	r4, [pc, #40]	@ (8003170 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003148:	e001      	b.n	800314e <LoopFillZerobss>

0800314a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800314a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800314c:	3204      	adds	r2, #4

0800314e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800314e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003150:	d3fb      	bcc.n	800314a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003152:	f003 fc31 	bl	80069b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003156:	f7fe fe2e 	bl	8001db6 <main>
  bx  lr    
 800315a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800315c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003164:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8003168:	08008510 	.word	0x08008510
  ldr r2, =_sbss
 800316c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8003170:	20025bd8 	.word	0x20025bd8

08003174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003174:	e7fe      	b.n	8003174 <ADC_IRQHandler>
	...

08003178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800317c:	4b0e      	ldr	r3, [pc, #56]	@ (80031b8 <HAL_Init+0x40>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0d      	ldr	r2, [pc, #52]	@ (80031b8 <HAL_Init+0x40>)
 8003182:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003188:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <HAL_Init+0x40>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a0a      	ldr	r2, [pc, #40]	@ (80031b8 <HAL_Init+0x40>)
 800318e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003194:	4b08      	ldr	r3, [pc, #32]	@ (80031b8 <HAL_Init+0x40>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a07      	ldr	r2, [pc, #28]	@ (80031b8 <HAL_Init+0x40>)
 800319a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800319e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031a0:	2003      	movs	r0, #3
 80031a2:	f000 f973 	bl	800348c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031a6:	2000      	movs	r0, #0
 80031a8:	f000 f808 	bl	80031bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031ac:	f7ff f9c6 	bl	800253c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40023c00 	.word	0x40023c00

080031bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031c4:	4b12      	ldr	r3, [pc, #72]	@ (8003210 <HAL_InitTick+0x54>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b12      	ldr	r3, [pc, #72]	@ (8003214 <HAL_InitTick+0x58>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	4619      	mov	r1, r3
 80031ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 f999 	bl	8003512 <HAL_SYSTICK_Config>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e00e      	b.n	8003208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b0f      	cmp	r3, #15
 80031ee:	d80a      	bhi.n	8003206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031f0:	2200      	movs	r2, #0
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
 80031f8:	f000 f953 	bl	80034a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031fc:	4a06      	ldr	r2, [pc, #24]	@ (8003218 <HAL_InitTick+0x5c>)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	e000      	b.n	8003208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20000018 	.word	0x20000018
 8003214:	20000020 	.word	0x20000020
 8003218:	2000001c 	.word	0x2000001c

0800321c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003220:	4b06      	ldr	r3, [pc, #24]	@ (800323c <HAL_IncTick+0x20>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <HAL_IncTick+0x24>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4413      	add	r3, r2
 800322c:	4a04      	ldr	r2, [pc, #16]	@ (8003240 <HAL_IncTick+0x24>)
 800322e:	6013      	str	r3, [r2, #0]
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000020 	.word	0x20000020
 8003240:	20025bd4 	.word	0x20025bd4

08003244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return uwTick;
 8003248:	4b03      	ldr	r3, [pc, #12]	@ (8003258 <HAL_GetTick+0x14>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	20025bd4 	.word	0x20025bd4

0800325c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003264:	f7ff ffee 	bl	8003244 <HAL_GetTick>
 8003268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d005      	beq.n	8003282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003276:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <HAL_Delay+0x44>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003282:	bf00      	nop
 8003284:	f7ff ffde 	bl	8003244 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	429a      	cmp	r2, r3
 8003292:	d8f7      	bhi.n	8003284 <HAL_Delay+0x28>
  {
  }
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000020 	.word	0x20000020

080032a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b4:	4b0c      	ldr	r3, [pc, #48]	@ (80032e8 <__NVIC_SetPriorityGrouping+0x44>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032c0:	4013      	ands	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032d6:	4a04      	ldr	r2, [pc, #16]	@ (80032e8 <__NVIC_SetPriorityGrouping+0x44>)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	60d3      	str	r3, [r2, #12]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	e000ed00 	.word	0xe000ed00

080032ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f0:	4b04      	ldr	r3, [pc, #16]	@ (8003304 <__NVIC_GetPriorityGrouping+0x18>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	0a1b      	lsrs	r3, r3, #8
 80032f6:	f003 0307 	and.w	r3, r3, #7
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	2b00      	cmp	r3, #0
 8003318:	db0b      	blt.n	8003332 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	f003 021f 	and.w	r2, r3, #31
 8003320:	4907      	ldr	r1, [pc, #28]	@ (8003340 <__NVIC_EnableIRQ+0x38>)
 8003322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	2001      	movs	r0, #1
 800332a:	fa00 f202 	lsl.w	r2, r0, r2
 800332e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000e100 	.word	0xe000e100

08003344 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	2b00      	cmp	r3, #0
 8003354:	db12      	blt.n	800337c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	f003 021f 	and.w	r2, r3, #31
 800335c:	490a      	ldr	r1, [pc, #40]	@ (8003388 <__NVIC_DisableIRQ+0x44>)
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	2001      	movs	r0, #1
 8003366:	fa00 f202 	lsl.w	r2, r0, r2
 800336a:	3320      	adds	r3, #32
 800336c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003370:	f3bf 8f4f 	dsb	sy
}
 8003374:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003376:	f3bf 8f6f 	isb	sy
}
 800337a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	e000e100 	.word	0xe000e100

0800338c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	6039      	str	r1, [r7, #0]
 8003396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	2b00      	cmp	r3, #0
 800339e:	db0a      	blt.n	80033b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	490c      	ldr	r1, [pc, #48]	@ (80033d8 <__NVIC_SetPriority+0x4c>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	0112      	lsls	r2, r2, #4
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	440b      	add	r3, r1
 80033b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b4:	e00a      	b.n	80033cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4908      	ldr	r1, [pc, #32]	@ (80033dc <__NVIC_SetPriority+0x50>)
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	3b04      	subs	r3, #4
 80033c4:	0112      	lsls	r2, r2, #4
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	440b      	add	r3, r1
 80033ca:	761a      	strb	r2, [r3, #24]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	@ 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f1c3 0307 	rsb	r3, r3, #7
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	bf28      	it	cs
 80033fe:	2304      	movcs	r3, #4
 8003400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3304      	adds	r3, #4
 8003406:	2b06      	cmp	r3, #6
 8003408:	d902      	bls.n	8003410 <NVIC_EncodePriority+0x30>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3b03      	subs	r3, #3
 800340e:	e000      	b.n	8003412 <NVIC_EncodePriority+0x32>
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003414:	f04f 32ff 	mov.w	r2, #4294967295
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43da      	mvns	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	401a      	ands	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003428:	f04f 31ff 	mov.w	r1, #4294967295
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	43d9      	mvns	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	4313      	orrs	r3, r2
         );
}
 800343a:	4618      	mov	r0, r3
 800343c:	3724      	adds	r7, #36	@ 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003458:	d301      	bcc.n	800345e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800345a:	2301      	movs	r3, #1
 800345c:	e00f      	b.n	800347e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800345e:	4a0a      	ldr	r2, [pc, #40]	@ (8003488 <SysTick_Config+0x40>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003466:	210f      	movs	r1, #15
 8003468:	f04f 30ff 	mov.w	r0, #4294967295
 800346c:	f7ff ff8e 	bl	800338c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003470:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <SysTick_Config+0x40>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003476:	4b04      	ldr	r3, [pc, #16]	@ (8003488 <SysTick_Config+0x40>)
 8003478:	2207      	movs	r2, #7
 800347a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	e000e010 	.word	0xe000e010

0800348c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ff05 	bl	80032a4 <__NVIC_SetPriorityGrouping>
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b086      	sub	sp, #24
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b4:	f7ff ff1a 	bl	80032ec <__NVIC_GetPriorityGrouping>
 80034b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	6978      	ldr	r0, [r7, #20]
 80034c0:	f7ff ff8e 	bl	80033e0 <NVIC_EncodePriority>
 80034c4:	4602      	mov	r2, r0
 80034c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff5d 	bl	800338c <__NVIC_SetPriority>
}
 80034d2:	bf00      	nop
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff0d 	bl	8003308 <__NVIC_EnableIRQ>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff1d 	bl	8003344 <__NVIC_DisableIRQ>
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff ff94 	bl	8003448 <SysTick_Config>
 8003520:	4603      	mov	r3, r0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800352c:	b480      	push	{r7}
 800352e:	b089      	sub	sp, #36	@ 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800353e:	2300      	movs	r3, #0
 8003540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	e177      	b.n	8003838 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003548:	2201      	movs	r2, #1
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	429a      	cmp	r2, r3
 8003562:	f040 8166 	bne.w	8003832 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d005      	beq.n	800357e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800357a:	2b02      	cmp	r3, #2
 800357c:	d130      	bne.n	80035e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	2203      	movs	r2, #3
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035b4:	2201      	movs	r2, #1
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f003 0201 	and.w	r2, r3, #1
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d017      	beq.n	800361c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	2203      	movs	r2, #3
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d123      	bne.n	8003670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	08da      	lsrs	r2, r3, #3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3208      	adds	r2, #8
 8003630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	220f      	movs	r2, #15
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	08da      	lsrs	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3208      	adds	r2, #8
 800366a:	69b9      	ldr	r1, [r7, #24]
 800366c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	2203      	movs	r2, #3
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 0203 	and.w	r2, r3, #3
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4313      	orrs	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80c0 	beq.w	8003832 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4b66      	ldr	r3, [pc, #408]	@ (8003850 <HAL_GPIO_Init+0x324>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ba:	4a65      	ldr	r2, [pc, #404]	@ (8003850 <HAL_GPIO_Init+0x324>)
 80036bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80036c2:	4b63      	ldr	r3, [pc, #396]	@ (8003850 <HAL_GPIO_Init+0x324>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ce:	4a61      	ldr	r2, [pc, #388]	@ (8003854 <HAL_GPIO_Init+0x328>)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	089b      	lsrs	r3, r3, #2
 80036d4:	3302      	adds	r3, #2
 80036d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	220f      	movs	r2, #15
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a58      	ldr	r2, [pc, #352]	@ (8003858 <HAL_GPIO_Init+0x32c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d037      	beq.n	800376a <HAL_GPIO_Init+0x23e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a57      	ldr	r2, [pc, #348]	@ (800385c <HAL_GPIO_Init+0x330>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d031      	beq.n	8003766 <HAL_GPIO_Init+0x23a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a56      	ldr	r2, [pc, #344]	@ (8003860 <HAL_GPIO_Init+0x334>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d02b      	beq.n	8003762 <HAL_GPIO_Init+0x236>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a55      	ldr	r2, [pc, #340]	@ (8003864 <HAL_GPIO_Init+0x338>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d025      	beq.n	800375e <HAL_GPIO_Init+0x232>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a54      	ldr	r2, [pc, #336]	@ (8003868 <HAL_GPIO_Init+0x33c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01f      	beq.n	800375a <HAL_GPIO_Init+0x22e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a53      	ldr	r2, [pc, #332]	@ (800386c <HAL_GPIO_Init+0x340>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d019      	beq.n	8003756 <HAL_GPIO_Init+0x22a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a52      	ldr	r2, [pc, #328]	@ (8003870 <HAL_GPIO_Init+0x344>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <HAL_GPIO_Init+0x226>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a51      	ldr	r2, [pc, #324]	@ (8003874 <HAL_GPIO_Init+0x348>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00d      	beq.n	800374e <HAL_GPIO_Init+0x222>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a50      	ldr	r2, [pc, #320]	@ (8003878 <HAL_GPIO_Init+0x34c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d007      	beq.n	800374a <HAL_GPIO_Init+0x21e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a4f      	ldr	r2, [pc, #316]	@ (800387c <HAL_GPIO_Init+0x350>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d101      	bne.n	8003746 <HAL_GPIO_Init+0x21a>
 8003742:	2309      	movs	r3, #9
 8003744:	e012      	b.n	800376c <HAL_GPIO_Init+0x240>
 8003746:	230a      	movs	r3, #10
 8003748:	e010      	b.n	800376c <HAL_GPIO_Init+0x240>
 800374a:	2308      	movs	r3, #8
 800374c:	e00e      	b.n	800376c <HAL_GPIO_Init+0x240>
 800374e:	2307      	movs	r3, #7
 8003750:	e00c      	b.n	800376c <HAL_GPIO_Init+0x240>
 8003752:	2306      	movs	r3, #6
 8003754:	e00a      	b.n	800376c <HAL_GPIO_Init+0x240>
 8003756:	2305      	movs	r3, #5
 8003758:	e008      	b.n	800376c <HAL_GPIO_Init+0x240>
 800375a:	2304      	movs	r3, #4
 800375c:	e006      	b.n	800376c <HAL_GPIO_Init+0x240>
 800375e:	2303      	movs	r3, #3
 8003760:	e004      	b.n	800376c <HAL_GPIO_Init+0x240>
 8003762:	2302      	movs	r3, #2
 8003764:	e002      	b.n	800376c <HAL_GPIO_Init+0x240>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <HAL_GPIO_Init+0x240>
 800376a:	2300      	movs	r3, #0
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	f002 0203 	and.w	r2, r2, #3
 8003772:	0092      	lsls	r2, r2, #2
 8003774:	4093      	lsls	r3, r2
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800377c:	4935      	ldr	r1, [pc, #212]	@ (8003854 <HAL_GPIO_Init+0x328>)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	089b      	lsrs	r3, r3, #2
 8003782:	3302      	adds	r3, #2
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800378a:	4b3d      	ldr	r3, [pc, #244]	@ (8003880 <HAL_GPIO_Init+0x354>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	43db      	mvns	r3, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4013      	ands	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037ae:	4a34      	ldr	r2, [pc, #208]	@ (8003880 <HAL_GPIO_Init+0x354>)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037b4:	4b32      	ldr	r3, [pc, #200]	@ (8003880 <HAL_GPIO_Init+0x354>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037d8:	4a29      	ldr	r2, [pc, #164]	@ (8003880 <HAL_GPIO_Init+0x354>)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037de:	4b28      	ldr	r3, [pc, #160]	@ (8003880 <HAL_GPIO_Init+0x354>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003802:	4a1f      	ldr	r2, [pc, #124]	@ (8003880 <HAL_GPIO_Init+0x354>)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003808:	4b1d      	ldr	r3, [pc, #116]	@ (8003880 <HAL_GPIO_Init+0x354>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800382c:	4a14      	ldr	r2, [pc, #80]	@ (8003880 <HAL_GPIO_Init+0x354>)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	3301      	adds	r3, #1
 8003836:	61fb      	str	r3, [r7, #28]
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	2b0f      	cmp	r3, #15
 800383c:	f67f ae84 	bls.w	8003548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003840:	bf00      	nop
 8003842:	bf00      	nop
 8003844:	3724      	adds	r7, #36	@ 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800
 8003854:	40013800 	.word	0x40013800
 8003858:	40020000 	.word	0x40020000
 800385c:	40020400 	.word	0x40020400
 8003860:	40020800 	.word	0x40020800
 8003864:	40020c00 	.word	0x40020c00
 8003868:	40021000 	.word	0x40021000
 800386c:	40021400 	.word	0x40021400
 8003870:	40021800 	.word	0x40021800
 8003874:	40021c00 	.word	0x40021c00
 8003878:	40022000 	.word	0x40022000
 800387c:	40022400 	.word	0x40022400
 8003880:	40013c00 	.word	0x40013c00

08003884 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	e0d9      	b.n	8003a54 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038a0:	2201      	movs	r2, #1
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4013      	ands	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	f040 80c9 	bne.w	8003a4e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80038bc:	4a6b      	ldr	r2, [pc, #428]	@ (8003a6c <HAL_GPIO_DeInit+0x1e8>)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	089b      	lsrs	r3, r3, #2
 80038c2:	3302      	adds	r3, #2
 80038c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	220f      	movs	r2, #15
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	4013      	ands	r3, r2
 80038dc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a63      	ldr	r2, [pc, #396]	@ (8003a70 <HAL_GPIO_DeInit+0x1ec>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d037      	beq.n	8003956 <HAL_GPIO_DeInit+0xd2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a62      	ldr	r2, [pc, #392]	@ (8003a74 <HAL_GPIO_DeInit+0x1f0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d031      	beq.n	8003952 <HAL_GPIO_DeInit+0xce>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a61      	ldr	r2, [pc, #388]	@ (8003a78 <HAL_GPIO_DeInit+0x1f4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d02b      	beq.n	800394e <HAL_GPIO_DeInit+0xca>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a60      	ldr	r2, [pc, #384]	@ (8003a7c <HAL_GPIO_DeInit+0x1f8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d025      	beq.n	800394a <HAL_GPIO_DeInit+0xc6>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a5f      	ldr	r2, [pc, #380]	@ (8003a80 <HAL_GPIO_DeInit+0x1fc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d01f      	beq.n	8003946 <HAL_GPIO_DeInit+0xc2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a5e      	ldr	r2, [pc, #376]	@ (8003a84 <HAL_GPIO_DeInit+0x200>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d019      	beq.n	8003942 <HAL_GPIO_DeInit+0xbe>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a5d      	ldr	r2, [pc, #372]	@ (8003a88 <HAL_GPIO_DeInit+0x204>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d013      	beq.n	800393e <HAL_GPIO_DeInit+0xba>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a5c      	ldr	r2, [pc, #368]	@ (8003a8c <HAL_GPIO_DeInit+0x208>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00d      	beq.n	800393a <HAL_GPIO_DeInit+0xb6>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a5b      	ldr	r2, [pc, #364]	@ (8003a90 <HAL_GPIO_DeInit+0x20c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d007      	beq.n	8003936 <HAL_GPIO_DeInit+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a5a      	ldr	r2, [pc, #360]	@ (8003a94 <HAL_GPIO_DeInit+0x210>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d101      	bne.n	8003932 <HAL_GPIO_DeInit+0xae>
 800392e:	2309      	movs	r3, #9
 8003930:	e012      	b.n	8003958 <HAL_GPIO_DeInit+0xd4>
 8003932:	230a      	movs	r3, #10
 8003934:	e010      	b.n	8003958 <HAL_GPIO_DeInit+0xd4>
 8003936:	2308      	movs	r3, #8
 8003938:	e00e      	b.n	8003958 <HAL_GPIO_DeInit+0xd4>
 800393a:	2307      	movs	r3, #7
 800393c:	e00c      	b.n	8003958 <HAL_GPIO_DeInit+0xd4>
 800393e:	2306      	movs	r3, #6
 8003940:	e00a      	b.n	8003958 <HAL_GPIO_DeInit+0xd4>
 8003942:	2305      	movs	r3, #5
 8003944:	e008      	b.n	8003958 <HAL_GPIO_DeInit+0xd4>
 8003946:	2304      	movs	r3, #4
 8003948:	e006      	b.n	8003958 <HAL_GPIO_DeInit+0xd4>
 800394a:	2303      	movs	r3, #3
 800394c:	e004      	b.n	8003958 <HAL_GPIO_DeInit+0xd4>
 800394e:	2302      	movs	r3, #2
 8003950:	e002      	b.n	8003958 <HAL_GPIO_DeInit+0xd4>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <HAL_GPIO_DeInit+0xd4>
 8003956:	2300      	movs	r3, #0
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	f002 0203 	and.w	r2, r2, #3
 800395e:	0092      	lsls	r2, r2, #2
 8003960:	4093      	lsls	r3, r2
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	429a      	cmp	r2, r3
 8003966:	d132      	bne.n	80039ce <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003968:	4b4b      	ldr	r3, [pc, #300]	@ (8003a98 <HAL_GPIO_DeInit+0x214>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	43db      	mvns	r3, r3
 8003970:	4949      	ldr	r1, [pc, #292]	@ (8003a98 <HAL_GPIO_DeInit+0x214>)
 8003972:	4013      	ands	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003976:	4b48      	ldr	r3, [pc, #288]	@ (8003a98 <HAL_GPIO_DeInit+0x214>)
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	43db      	mvns	r3, r3
 800397e:	4946      	ldr	r1, [pc, #280]	@ (8003a98 <HAL_GPIO_DeInit+0x214>)
 8003980:	4013      	ands	r3, r2
 8003982:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003984:	4b44      	ldr	r3, [pc, #272]	@ (8003a98 <HAL_GPIO_DeInit+0x214>)
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	43db      	mvns	r3, r3
 800398c:	4942      	ldr	r1, [pc, #264]	@ (8003a98 <HAL_GPIO_DeInit+0x214>)
 800398e:	4013      	ands	r3, r2
 8003990:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003992:	4b41      	ldr	r3, [pc, #260]	@ (8003a98 <HAL_GPIO_DeInit+0x214>)
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	43db      	mvns	r3, r3
 800399a:	493f      	ldr	r1, [pc, #252]	@ (8003a98 <HAL_GPIO_DeInit+0x214>)
 800399c:	4013      	ands	r3, r2
 800399e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	220f      	movs	r2, #15
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80039b0:	4a2e      	ldr	r2, [pc, #184]	@ (8003a6c <HAL_GPIO_DeInit+0x1e8>)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	089b      	lsrs	r3, r3, #2
 80039b6:	3302      	adds	r3, #2
 80039b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	43da      	mvns	r2, r3
 80039c0:	482a      	ldr	r0, [pc, #168]	@ (8003a6c <HAL_GPIO_DeInit+0x1e8>)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	089b      	lsrs	r3, r3, #2
 80039c6:	400a      	ands	r2, r1
 80039c8:	3302      	adds	r3, #2
 80039ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	2103      	movs	r1, #3
 80039d8:	fa01 f303 	lsl.w	r3, r1, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	401a      	ands	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	08da      	lsrs	r2, r3, #3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3208      	adds	r2, #8
 80039ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	220f      	movs	r2, #15
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	08d2      	lsrs	r2, r2, #3
 8003a04:	4019      	ands	r1, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3208      	adds	r2, #8
 8003a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	2103      	movs	r1, #3
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	401a      	ands	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	2101      	movs	r1, #1
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	401a      	ands	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	2103      	movs	r1, #3
 8003a42:	fa01 f303 	lsl.w	r3, r1, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	401a      	ands	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	3301      	adds	r3, #1
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2b0f      	cmp	r3, #15
 8003a58:	f67f af22 	bls.w	80038a0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40013800 	.word	0x40013800
 8003a70:	40020000 	.word	0x40020000
 8003a74:	40020400 	.word	0x40020400
 8003a78:	40020800 	.word	0x40020800
 8003a7c:	40020c00 	.word	0x40020c00
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40021400 	.word	0x40021400
 8003a88:	40021800 	.word	0x40021800
 8003a8c:	40021c00 	.word	0x40021c00
 8003a90:	40022000 	.word	0x40022000
 8003a94:	40022400 	.word	0x40022400
 8003a98:	40013c00 	.word	0x40013c00

08003a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	807b      	strh	r3, [r7, #2]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aac:	787b      	ldrb	r3, [r7, #1]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ab2:	887a      	ldrh	r2, [r7, #2]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ab8:	e003      	b.n	8003ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aba:	887b      	ldrh	r3, [r7, #2]
 8003abc:	041a      	lsls	r2, r3, #16
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	619a      	str	r2, [r3, #24]
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e12b      	b.n	8003d3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fe fd48 	bl	800258c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2224      	movs	r2, #36	@ 0x24
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0201 	bic.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b34:	f001 ff82 	bl	8005a3c <HAL_RCC_GetPCLK1Freq>
 8003b38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4a81      	ldr	r2, [pc, #516]	@ (8003d44 <HAL_I2C_Init+0x274>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d807      	bhi.n	8003b54 <HAL_I2C_Init+0x84>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a80      	ldr	r2, [pc, #512]	@ (8003d48 <HAL_I2C_Init+0x278>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	bf94      	ite	ls
 8003b4c:	2301      	movls	r3, #1
 8003b4e:	2300      	movhi	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	e006      	b.n	8003b62 <HAL_I2C_Init+0x92>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4a7d      	ldr	r2, [pc, #500]	@ (8003d4c <HAL_I2C_Init+0x27c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	bf94      	ite	ls
 8003b5c:	2301      	movls	r3, #1
 8003b5e:	2300      	movhi	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e0e7      	b.n	8003d3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4a78      	ldr	r2, [pc, #480]	@ (8003d50 <HAL_I2C_Init+0x280>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	0c9b      	lsrs	r3, r3, #18
 8003b74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4a6a      	ldr	r2, [pc, #424]	@ (8003d44 <HAL_I2C_Init+0x274>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d802      	bhi.n	8003ba4 <HAL_I2C_Init+0xd4>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	e009      	b.n	8003bb8 <HAL_I2C_Init+0xe8>
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003baa:	fb02 f303 	mul.w	r3, r2, r3
 8003bae:	4a69      	ldr	r2, [pc, #420]	@ (8003d54 <HAL_I2C_Init+0x284>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	099b      	lsrs	r3, r3, #6
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	495c      	ldr	r1, [pc, #368]	@ (8003d44 <HAL_I2C_Init+0x274>)
 8003bd4:	428b      	cmp	r3, r1
 8003bd6:	d819      	bhi.n	8003c0c <HAL_I2C_Init+0x13c>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1e59      	subs	r1, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003be6:	1c59      	adds	r1, r3, #1
 8003be8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003bec:	400b      	ands	r3, r1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_I2C_Init+0x138>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1e59      	subs	r1, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c00:	3301      	adds	r3, #1
 8003c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c06:	e051      	b.n	8003cac <HAL_I2C_Init+0x1dc>
 8003c08:	2304      	movs	r3, #4
 8003c0a:	e04f      	b.n	8003cac <HAL_I2C_Init+0x1dc>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d111      	bne.n	8003c38 <HAL_I2C_Init+0x168>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	1e58      	subs	r0, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6859      	ldr	r1, [r3, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	440b      	add	r3, r1
 8003c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c26:	3301      	adds	r3, #1
 8003c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	e012      	b.n	8003c5e <HAL_I2C_Init+0x18e>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1e58      	subs	r0, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6859      	ldr	r1, [r3, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	0099      	lsls	r1, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf0c      	ite	eq
 8003c58:	2301      	moveq	r3, #1
 8003c5a:	2300      	movne	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_I2C_Init+0x196>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e022      	b.n	8003cac <HAL_I2C_Init+0x1dc>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10e      	bne.n	8003c8c <HAL_I2C_Init+0x1bc>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	1e58      	subs	r0, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6859      	ldr	r1, [r3, #4]
 8003c76:	460b      	mov	r3, r1
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	440b      	add	r3, r1
 8003c7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c80:	3301      	adds	r3, #1
 8003c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c8a:	e00f      	b.n	8003cac <HAL_I2C_Init+0x1dc>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1e58      	subs	r0, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6859      	ldr	r1, [r3, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	0099      	lsls	r1, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	6809      	ldr	r1, [r1, #0]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69da      	ldr	r2, [r3, #28]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003cda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6911      	ldr	r1, [r2, #16]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	68d2      	ldr	r2, [r2, #12]
 8003ce6:	4311      	orrs	r1, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	430b      	orrs	r3, r1
 8003cee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695a      	ldr	r2, [r3, #20]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	000186a0 	.word	0x000186a0
 8003d48:	001e847f 	.word	0x001e847f
 8003d4c:	003d08ff 	.word	0x003d08ff
 8003d50:	431bde83 	.word	0x431bde83
 8003d54:	10624dd3 	.word	0x10624dd3

08003d58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	4608      	mov	r0, r1
 8003d62:	4611      	mov	r1, r2
 8003d64:	461a      	mov	r2, r3
 8003d66:	4603      	mov	r3, r0
 8003d68:	817b      	strh	r3, [r7, #10]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	813b      	strh	r3, [r7, #8]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d72:	f7ff fa67 	bl	8003244 <HAL_GetTick>
 8003d76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	f040 80d9 	bne.w	8003f38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	2319      	movs	r3, #25
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	496d      	ldr	r1, [pc, #436]	@ (8003f44 <HAL_I2C_Mem_Write+0x1ec>)
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 fc8b 	bl	80046ac <I2C_WaitOnFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e0cc      	b.n	8003f3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_I2C_Mem_Write+0x56>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e0c5      	b.n	8003f3a <HAL_I2C_Mem_Write+0x1e2>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d007      	beq.n	8003dd4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003de2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2221      	movs	r2, #33	@ 0x21
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2240      	movs	r2, #64	@ 0x40
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a3a      	ldr	r2, [r7, #32]
 8003dfe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4a4d      	ldr	r2, [pc, #308]	@ (8003f48 <HAL_I2C_Mem_Write+0x1f0>)
 8003e14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e16:	88f8      	ldrh	r0, [r7, #6]
 8003e18:	893a      	ldrh	r2, [r7, #8]
 8003e1a:	8979      	ldrh	r1, [r7, #10]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	4603      	mov	r3, r0
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 fac2 	bl	80043b0 <I2C_RequestMemoryWrite>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d052      	beq.n	8003ed8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e081      	b.n	8003f3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fd50 	bl	80048e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00d      	beq.n	8003e62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d107      	bne.n	8003e5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e06b      	b.n	8003f3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e66:	781a      	ldrb	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d11b      	bne.n	8003ed8 <HAL_I2C_Mem_Write+0x180>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d017      	beq.n	8003ed8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	781a      	ldrb	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1aa      	bne.n	8003e36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 fd43 	bl	8004970 <I2C_WaitOnBTFFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00d      	beq.n	8003f0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d107      	bne.n	8003f08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e016      	b.n	8003f3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e000      	b.n	8003f3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f38:	2302      	movs	r3, #2
  }
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	00100002 	.word	0x00100002
 8003f48:	ffff0000 	.word	0xffff0000

08003f4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08c      	sub	sp, #48	@ 0x30
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	4608      	mov	r0, r1
 8003f56:	4611      	mov	r1, r2
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	817b      	strh	r3, [r7, #10]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	813b      	strh	r3, [r7, #8]
 8003f62:	4613      	mov	r3, r2
 8003f64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f66:	f7ff f96d 	bl	8003244 <HAL_GetTick>
 8003f6a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	f040 8214 	bne.w	80043a2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	2319      	movs	r3, #25
 8003f80:	2201      	movs	r2, #1
 8003f82:	497b      	ldr	r1, [pc, #492]	@ (8004170 <HAL_I2C_Mem_Read+0x224>)
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 fb91 	bl	80046ac <I2C_WaitOnFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
 8003f92:	e207      	b.n	80043a4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_I2C_Mem_Read+0x56>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e200      	b.n	80043a4 <HAL_I2C_Mem_Read+0x458>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d007      	beq.n	8003fc8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2222      	movs	r2, #34	@ 0x22
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2240      	movs	r2, #64	@ 0x40
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ff2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4a5b      	ldr	r2, [pc, #364]	@ (8004174 <HAL_I2C_Mem_Read+0x228>)
 8004008:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800400a:	88f8      	ldrh	r0, [r7, #6]
 800400c:	893a      	ldrh	r2, [r7, #8]
 800400e:	8979      	ldrh	r1, [r7, #10]
 8004010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	4603      	mov	r3, r0
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 fa5e 	bl	80044dc <I2C_RequestMemoryRead>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e1bc      	b.n	80043a4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402e:	2b00      	cmp	r3, #0
 8004030:	d113      	bne.n	800405a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004032:	2300      	movs	r3, #0
 8004034:	623b      	str	r3, [r7, #32]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	623b      	str	r3, [r7, #32]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	623b      	str	r3, [r7, #32]
 8004046:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e190      	b.n	800437c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405e:	2b01      	cmp	r3, #1
 8004060:	d11b      	bne.n	800409a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004070:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004072:	2300      	movs	r3, #0
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	61fb      	str	r3, [r7, #28]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	e170      	b.n	800437c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d11b      	bne.n	80040da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c2:	2300      	movs	r3, #0
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	61bb      	str	r3, [r7, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	e150      	b.n	800437c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040da:	2300      	movs	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040f0:	e144      	b.n	800437c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	f200 80f1 	bhi.w	80042de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004100:	2b01      	cmp	r3, #1
 8004102:	d123      	bne.n	800414c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004106:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 fc79 	bl	8004a00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e145      	b.n	80043a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800414a:	e117      	b.n	800437c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004150:	2b02      	cmp	r3, #2
 8004152:	d14e      	bne.n	80041f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800415a:	2200      	movs	r2, #0
 800415c:	4906      	ldr	r1, [pc, #24]	@ (8004178 <HAL_I2C_Mem_Read+0x22c>)
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 faa4 	bl	80046ac <I2C_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e11a      	b.n	80043a4 <HAL_I2C_Mem_Read+0x458>
 800416e:	bf00      	nop
 8004170:	00100002 	.word	0x00100002
 8004174:	ffff0000 	.word	0xffff0000
 8004178:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800418a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041f0:	e0c4      	b.n	800437c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f8:	2200      	movs	r2, #0
 80041fa:	496c      	ldr	r1, [pc, #432]	@ (80043ac <HAL_I2C_Mem_Read+0x460>)
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 fa55 	bl	80046ac <I2C_WaitOnFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0cb      	b.n	80043a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800421a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691a      	ldr	r2, [r3, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004254:	2200      	movs	r2, #0
 8004256:	4955      	ldr	r1, [pc, #340]	@ (80043ac <HAL_I2C_Mem_Read+0x460>)
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fa27 	bl	80046ac <I2C_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e09d      	b.n	80043a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004276:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042dc:	e04e      	b.n	800437c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 fb8c 	bl	8004a00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e058      	b.n	80043a4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b04      	cmp	r3, #4
 8004330:	d124      	bne.n	800437c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004336:	2b03      	cmp	r3, #3
 8004338:	d107      	bne.n	800434a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004348:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004380:	2b00      	cmp	r3, #0
 8004382:	f47f aeb6 	bne.w	80040f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2220      	movs	r2, #32
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e000      	b.n	80043a4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80043a2:	2302      	movs	r3, #2
  }
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3728      	adds	r7, #40	@ 0x28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	00010004 	.word	0x00010004

080043b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	4608      	mov	r0, r1
 80043ba:	4611      	mov	r1, r2
 80043bc:	461a      	mov	r2, r3
 80043be:	4603      	mov	r3, r0
 80043c0:	817b      	strh	r3, [r7, #10]
 80043c2:	460b      	mov	r3, r1
 80043c4:	813b      	strh	r3, [r7, #8]
 80043c6:	4613      	mov	r3, r2
 80043c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f960 	bl	80046ac <I2C_WaitOnFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00d      	beq.n	800440e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004400:	d103      	bne.n	800440a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004408:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e05f      	b.n	80044ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800440e:	897b      	ldrh	r3, [r7, #10]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	461a      	mov	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800441c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	6a3a      	ldr	r2, [r7, #32]
 8004422:	492d      	ldr	r1, [pc, #180]	@ (80044d8 <I2C_RequestMemoryWrite+0x128>)
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f9bb 	bl	80047a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e04c      	b.n	80044ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800444a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800444c:	6a39      	ldr	r1, [r7, #32]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 fa46 	bl	80048e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00d      	beq.n	8004476 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	2b04      	cmp	r3, #4
 8004460:	d107      	bne.n	8004472 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004470:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e02b      	b.n	80044ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d105      	bne.n	8004488 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800447c:	893b      	ldrh	r3, [r7, #8]
 800447e:	b2da      	uxtb	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	611a      	str	r2, [r3, #16]
 8004486:	e021      	b.n	80044cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004488:	893b      	ldrh	r3, [r7, #8]
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	b29b      	uxth	r3, r3
 800448e:	b2da      	uxtb	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004498:	6a39      	ldr	r1, [r7, #32]
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 fa20 	bl	80048e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00d      	beq.n	80044c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d107      	bne.n	80044be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e005      	b.n	80044ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044c2:	893b      	ldrh	r3, [r7, #8]
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	00010002 	.word	0x00010002

080044dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	4608      	mov	r0, r1
 80044e6:	4611      	mov	r1, r2
 80044e8:	461a      	mov	r2, r3
 80044ea:	4603      	mov	r3, r0
 80044ec:	817b      	strh	r3, [r7, #10]
 80044ee:	460b      	mov	r3, r1
 80044f0:	813b      	strh	r3, [r7, #8]
 80044f2:	4613      	mov	r3, r2
 80044f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004504:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004514:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	2200      	movs	r2, #0
 800451e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f8c2 	bl	80046ac <I2C_WaitOnFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00d      	beq.n	800454a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800453c:	d103      	bne.n	8004546 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004544:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e0aa      	b.n	80046a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800454a:	897b      	ldrh	r3, [r7, #10]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004558:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800455a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455c:	6a3a      	ldr	r2, [r7, #32]
 800455e:	4952      	ldr	r1, [pc, #328]	@ (80046a8 <I2C_RequestMemoryRead+0x1cc>)
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 f91d 	bl	80047a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e097      	b.n	80046a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004588:	6a39      	ldr	r1, [r7, #32]
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f9a8 	bl	80048e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00d      	beq.n	80045b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	2b04      	cmp	r3, #4
 800459c:	d107      	bne.n	80045ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e076      	b.n	80046a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d105      	bne.n	80045c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045b8:	893b      	ldrh	r3, [r7, #8]
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	611a      	str	r2, [r3, #16]
 80045c2:	e021      	b.n	8004608 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045c4:	893b      	ldrh	r3, [r7, #8]
 80045c6:	0a1b      	lsrs	r3, r3, #8
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d4:	6a39      	ldr	r1, [r7, #32]
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 f982 	bl	80048e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00d      	beq.n	80045fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d107      	bne.n	80045fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e050      	b.n	80046a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045fe:	893b      	ldrh	r3, [r7, #8]
 8004600:	b2da      	uxtb	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800460a:	6a39      	ldr	r1, [r7, #32]
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f967 	bl	80048e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00d      	beq.n	8004634 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461c:	2b04      	cmp	r3, #4
 800461e:	d107      	bne.n	8004630 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800462e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e035      	b.n	80046a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004642:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	2200      	movs	r2, #0
 800464c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f82b 	bl	80046ac <I2C_WaitOnFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00d      	beq.n	8004678 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800466a:	d103      	bne.n	8004674 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004672:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e013      	b.n	80046a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004678:	897b      	ldrh	r3, [r7, #10]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	b2da      	uxtb	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	6a3a      	ldr	r2, [r7, #32]
 800468c:	4906      	ldr	r1, [pc, #24]	@ (80046a8 <I2C_RequestMemoryRead+0x1cc>)
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f886 	bl	80047a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	00010002 	.word	0x00010002

080046ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	4613      	mov	r3, r2
 80046ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046bc:	e048      	b.n	8004750 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c4:	d044      	beq.n	8004750 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c6:	f7fe fdbd 	bl	8003244 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d302      	bcc.n	80046dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d139      	bne.n	8004750 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	0c1b      	lsrs	r3, r3, #16
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d10d      	bne.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x56>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	43da      	mvns	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	4013      	ands	r3, r2
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bf0c      	ite	eq
 80046f8:	2301      	moveq	r3, #1
 80046fa:	2300      	movne	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	e00c      	b.n	800471c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	43da      	mvns	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	4013      	ands	r3, r2
 800470e:	b29b      	uxth	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	bf0c      	ite	eq
 8004714:	2301      	moveq	r3, #1
 8004716:	2300      	movne	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	429a      	cmp	r2, r3
 8004720:	d116      	bne.n	8004750 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473c:	f043 0220 	orr.w	r2, r3, #32
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e023      	b.n	8004798 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	0c1b      	lsrs	r3, r3, #16
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b01      	cmp	r3, #1
 8004758:	d10d      	bne.n	8004776 <I2C_WaitOnFlagUntilTimeout+0xca>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	43da      	mvns	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	4013      	ands	r3, r2
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	bf0c      	ite	eq
 800476c:	2301      	moveq	r3, #1
 800476e:	2300      	movne	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	e00c      	b.n	8004790 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	43da      	mvns	r2, r3
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4013      	ands	r3, r2
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	461a      	mov	r2, r3
 8004790:	79fb      	ldrb	r3, [r7, #7]
 8004792:	429a      	cmp	r2, r3
 8004794:	d093      	beq.n	80046be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047ae:	e071      	b.n	8004894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047be:	d123      	bne.n	8004808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f4:	f043 0204 	orr.w	r2, r3, #4
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e067      	b.n	80048d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480e:	d041      	beq.n	8004894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004810:	f7fe fd18 	bl	8003244 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	429a      	cmp	r2, r3
 800481e:	d302      	bcc.n	8004826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d136      	bne.n	8004894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	0c1b      	lsrs	r3, r3, #16
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b01      	cmp	r3, #1
 800482e:	d10c      	bne.n	800484a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	43da      	mvns	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4013      	ands	r3, r2
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	bf14      	ite	ne
 8004842:	2301      	movne	r3, #1
 8004844:	2300      	moveq	r3, #0
 8004846:	b2db      	uxtb	r3, r3
 8004848:	e00b      	b.n	8004862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	43da      	mvns	r2, r3
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	4013      	ands	r3, r2
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	bf14      	ite	ne
 800485c:	2301      	movne	r3, #1
 800485e:	2300      	moveq	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d016      	beq.n	8004894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004880:	f043 0220 	orr.w	r2, r3, #32
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e021      	b.n	80048d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	0c1b      	lsrs	r3, r3, #16
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b01      	cmp	r3, #1
 800489c:	d10c      	bne.n	80048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	43da      	mvns	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	4013      	ands	r3, r2
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	bf14      	ite	ne
 80048b0:	2301      	movne	r3, #1
 80048b2:	2300      	moveq	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	e00b      	b.n	80048d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	43da      	mvns	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4013      	ands	r3, r2
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bf14      	ite	ne
 80048ca:	2301      	movne	r3, #1
 80048cc:	2300      	moveq	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f47f af6d 	bne.w	80047b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048ec:	e034      	b.n	8004958 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f8e3 	bl	8004aba <I2C_IsAcknowledgeFailed>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e034      	b.n	8004968 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d028      	beq.n	8004958 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004906:	f7fe fc9d 	bl	8003244 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	429a      	cmp	r2, r3
 8004914:	d302      	bcc.n	800491c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d11d      	bne.n	8004958 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004926:	2b80      	cmp	r3, #128	@ 0x80
 8004928:	d016      	beq.n	8004958 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	f043 0220 	orr.w	r2, r3, #32
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e007      	b.n	8004968 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004962:	2b80      	cmp	r3, #128	@ 0x80
 8004964:	d1c3      	bne.n	80048ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800497c:	e034      	b.n	80049e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f89b 	bl	8004aba <I2C_IsAcknowledgeFailed>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e034      	b.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004994:	d028      	beq.n	80049e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004996:	f7fe fc55 	bl	8003244 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d302      	bcc.n	80049ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d11d      	bne.n	80049e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d016      	beq.n	80049e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d4:	f043 0220 	orr.w	r2, r3, #32
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e007      	b.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d1c3      	bne.n	800497e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a0c:	e049      	b.n	8004aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	f003 0310 	and.w	r3, r3, #16
 8004a18:	2b10      	cmp	r3, #16
 8004a1a:	d119      	bne.n	8004a50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0210 	mvn.w	r2, #16
 8004a24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e030      	b.n	8004ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a50:	f7fe fbf8 	bl	8003244 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d302      	bcc.n	8004a66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d11d      	bne.n	8004aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a70:	2b40      	cmp	r3, #64	@ 0x40
 8004a72:	d016      	beq.n	8004aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8e:	f043 0220 	orr.w	r2, r3, #32
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e007      	b.n	8004ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aac:	2b40      	cmp	r3, #64	@ 0x40
 8004aae:	d1ae      	bne.n	8004a0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004acc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad0:	d11b      	bne.n	8004b0a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ada:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af6:	f043 0204 	orr.w	r2, r3, #4
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d129      	bne.n	8004b82 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2224      	movs	r2, #36	@ 0x24
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0201 	bic.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0210 	bic.w	r2, r2, #16
 8004b54:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0201 	orr.w	r2, r2, #1
 8004b74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e000      	b.n	8004b84 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004b82:	2302      	movs	r3, #2
  }
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d12a      	bne.n	8004c00 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2224      	movs	r2, #36	@ 0x24
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0201 	bic.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004bca:	89fb      	ldrh	r3, [r7, #14]
 8004bcc:	f023 030f 	bic.w	r3, r3, #15
 8004bd0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	89fb      	ldrh	r3, [r7, #14]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	89fa      	ldrh	r2, [r7, #14]
 8004be2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e000      	b.n	8004c02 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004c00:	2302      	movs	r3, #2
  }
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e0bf      	b.n	8004da2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fd fd12 	bl	8002660 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004c52:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6999      	ldr	r1, [r3, #24]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004c68:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6899      	ldr	r1, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4b4a      	ldr	r3, [pc, #296]	@ (8004dac <HAL_LTDC_Init+0x19c>)
 8004c84:	400b      	ands	r3, r1
 8004c86:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	041b      	lsls	r3, r3, #16
 8004c8e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6899      	ldr	r1, [r3, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699a      	ldr	r2, [r3, #24]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68d9      	ldr	r1, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8004dac <HAL_LTDC_Init+0x19c>)
 8004cb2:	400b      	ands	r3, r1
 8004cb4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68d9      	ldr	r1, [r3, #12]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1a      	ldr	r2, [r3, #32]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6919      	ldr	r1, [r3, #16]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4b33      	ldr	r3, [pc, #204]	@ (8004dac <HAL_LTDC_Init+0x19c>)
 8004ce0:	400b      	ands	r3, r1
 8004ce2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce8:	041b      	lsls	r3, r3, #16
 8004cea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6919      	ldr	r1, [r3, #16]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6959      	ldr	r1, [r3, #20]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	4b27      	ldr	r3, [pc, #156]	@ (8004dac <HAL_LTDC_Init+0x19c>)
 8004d0e:	400b      	ands	r3, r1
 8004d10:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d16:	041b      	lsls	r3, r3, #16
 8004d18:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6959      	ldr	r1, [r3, #20]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004d40:	041b      	lsls	r3, r3, #16
 8004d42:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004d52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0206 	orr.w	r2, r2, #6
 8004d7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	f000f800 	.word	0xf000f800

08004db0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004db0:	b5b0      	push	{r4, r5, r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_LTDC_ConfigLayer+0x1a>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e02c      	b.n	8004e24 <HAL_LTDC_ConfigLayer+0x74>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2134      	movs	r1, #52	@ 0x34
 8004de0:	fb01 f303 	mul.w	r3, r1, r3
 8004de4:	4413      	add	r3, r2
 8004de6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4614      	mov	r4, r2
 8004dee:	461d      	mov	r5, r3
 8004df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f811 	bl	8004e2c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bdb0      	pop	{r4, r5, r7, pc}

08004e2c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b089      	sub	sp, #36	@ 0x24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	0c1b      	lsrs	r3, r3, #16
 8004e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e48:	4413      	add	r3, r2
 8004e4a:	041b      	lsls	r3, r3, #16
 8004e4c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	01db      	lsls	r3, r3, #7
 8004e58:	4413      	add	r3, r2
 8004e5a:	3384      	adds	r3, #132	@ 0x84
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	4611      	mov	r1, r2
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	01d2      	lsls	r2, r2, #7
 8004e68:	440a      	add	r2, r1
 8004e6a:	3284      	adds	r2, #132	@ 0x84
 8004e6c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004e70:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	0c1b      	lsrs	r3, r3, #16
 8004e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e82:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e84:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	01db      	lsls	r3, r3, #7
 8004e90:	440b      	add	r3, r1
 8004e92:	3384      	adds	r3, #132	@ 0x84
 8004e94:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e9a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eaa:	4413      	add	r3, r2
 8004eac:	041b      	lsls	r3, r3, #16
 8004eae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	01db      	lsls	r3, r3, #7
 8004eba:	4413      	add	r3, r2
 8004ebc:	3384      	adds	r3, #132	@ 0x84
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	01d2      	lsls	r2, r2, #7
 8004eca:	440a      	add	r2, r1
 8004ecc:	3284      	adds	r2, #132	@ 0x84
 8004ece:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004ed2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ee2:	4413      	add	r3, r2
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4619      	mov	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	01db      	lsls	r3, r3, #7
 8004ef0:	440b      	add	r3, r1
 8004ef2:	3384      	adds	r3, #132	@ 0x84
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	01db      	lsls	r3, r3, #7
 8004f06:	4413      	add	r3, r2
 8004f08:	3384      	adds	r3, #132	@ 0x84
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	4611      	mov	r1, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	01d2      	lsls	r2, r2, #7
 8004f16:	440a      	add	r2, r1
 8004f18:	3284      	adds	r2, #132	@ 0x84
 8004f1a:	f023 0307 	bic.w	r3, r3, #7
 8004f1e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	01db      	lsls	r3, r3, #7
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3384      	adds	r3, #132	@ 0x84
 8004f2e:	461a      	mov	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004f46:	041b      	lsls	r3, r3, #16
 8004f48:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	061b      	lsls	r3, r3, #24
 8004f50:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	01db      	lsls	r3, r3, #7
 8004f5c:	4413      	add	r3, r2
 8004f5e:	3384      	adds	r3, #132	@ 0x84
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	01db      	lsls	r3, r3, #7
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3384      	adds	r3, #132	@ 0x84
 8004f70:	461a      	mov	r2, r3
 8004f72:	2300      	movs	r3, #0
 8004f74:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	431a      	orrs	r2, r3
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	431a      	orrs	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	01db      	lsls	r3, r3, #7
 8004f90:	440b      	add	r3, r1
 8004f92:	3384      	adds	r3, #132	@ 0x84
 8004f94:	4619      	mov	r1, r3
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	01db      	lsls	r3, r3, #7
 8004fa6:	4413      	add	r3, r2
 8004fa8:	3384      	adds	r3, #132	@ 0x84
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	01d2      	lsls	r2, r2, #7
 8004fb6:	440a      	add	r2, r1
 8004fb8:	3284      	adds	r2, #132	@ 0x84
 8004fba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004fbe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	01db      	lsls	r3, r3, #7
 8004fca:	4413      	add	r3, r2
 8004fcc:	3384      	adds	r3, #132	@ 0x84
 8004fce:	461a      	mov	r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	01db      	lsls	r3, r3, #7
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3384      	adds	r3, #132	@ 0x84
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	4611      	mov	r1, r2
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	01d2      	lsls	r2, r2, #7
 8004ff0:	440a      	add	r2, r1
 8004ff2:	3284      	adds	r2, #132	@ 0x84
 8004ff4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004ff8:	f023 0307 	bic.w	r3, r3, #7
 8004ffc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	69da      	ldr	r2, [r3, #28]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	68f9      	ldr	r1, [r7, #12]
 8005008:	6809      	ldr	r1, [r1, #0]
 800500a:	4608      	mov	r0, r1
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	01c9      	lsls	r1, r1, #7
 8005010:	4401      	add	r1, r0
 8005012:	3184      	adds	r1, #132	@ 0x84
 8005014:	4313      	orrs	r3, r2
 8005016:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	461a      	mov	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	01db      	lsls	r3, r3, #7
 8005022:	4413      	add	r3, r2
 8005024:	3384      	adds	r3, #132	@ 0x84
 8005026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	461a      	mov	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	01db      	lsls	r3, r3, #7
 8005032:	4413      	add	r3, r2
 8005034:	3384      	adds	r3, #132	@ 0x84
 8005036:	461a      	mov	r2, r3
 8005038:	2300      	movs	r3, #0
 800503a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	461a      	mov	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	01db      	lsls	r3, r3, #7
 8005046:	4413      	add	r3, r2
 8005048:	3384      	adds	r3, #132	@ 0x84
 800504a:	461a      	mov	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d102      	bne.n	8005060 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800505a:	2304      	movs	r3, #4
 800505c:	61fb      	str	r3, [r7, #28]
 800505e:	e01b      	b.n	8005098 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d102      	bne.n	800506e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005068:	2303      	movs	r3, #3
 800506a:	61fb      	str	r3, [r7, #28]
 800506c:	e014      	b.n	8005098 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b04      	cmp	r3, #4
 8005074:	d00b      	beq.n	800508e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800507a:	2b02      	cmp	r3, #2
 800507c:	d007      	beq.n	800508e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005082:	2b03      	cmp	r3, #3
 8005084:	d003      	beq.n	800508e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800508a:	2b07      	cmp	r3, #7
 800508c:	d102      	bne.n	8005094 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800508e:	2302      	movs	r3, #2
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	e001      	b.n	8005098 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005094:	2301      	movs	r3, #1
 8005096:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	01db      	lsls	r3, r3, #7
 80050a2:	4413      	add	r3, r2
 80050a4:	3384      	adds	r3, #132	@ 0x84
 80050a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	6812      	ldr	r2, [r2, #0]
 80050ac:	4611      	mov	r1, r2
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	01d2      	lsls	r2, r2, #7
 80050b2:	440a      	add	r2, r1
 80050b4:	3284      	adds	r2, #132	@ 0x84
 80050b6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80050ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	6859      	ldr	r1, [r3, #4]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	1acb      	subs	r3, r1, r3
 80050d2:	69f9      	ldr	r1, [r7, #28]
 80050d4:	fb01 f303 	mul.w	r3, r1, r3
 80050d8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80050da:	68f9      	ldr	r1, [r7, #12]
 80050dc:	6809      	ldr	r1, [r1, #0]
 80050de:	4608      	mov	r0, r1
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	01c9      	lsls	r1, r1, #7
 80050e4:	4401      	add	r1, r0
 80050e6:	3184      	adds	r1, #132	@ 0x84
 80050e8:	4313      	orrs	r3, r2
 80050ea:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	01db      	lsls	r3, r3, #7
 80050f6:	4413      	add	r3, r2
 80050f8:	3384      	adds	r3, #132	@ 0x84
 80050fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	6812      	ldr	r2, [r2, #0]
 8005100:	4611      	mov	r1, r2
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	01d2      	lsls	r2, r2, #7
 8005106:	440a      	add	r2, r1
 8005108:	3284      	adds	r2, #132	@ 0x84
 800510a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800510e:	f023 0307 	bic.w	r3, r3, #7
 8005112:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	01db      	lsls	r3, r3, #7
 800511e:	4413      	add	r3, r2
 8005120:	3384      	adds	r3, #132	@ 0x84
 8005122:	461a      	mov	r2, r3
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005128:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	01db      	lsls	r3, r3, #7
 8005134:	4413      	add	r3, r2
 8005136:	3384      	adds	r3, #132	@ 0x84
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	4611      	mov	r1, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	01d2      	lsls	r2, r2, #7
 8005144:	440a      	add	r2, r1
 8005146:	3284      	adds	r2, #132	@ 0x84
 8005148:	f043 0301 	orr.w	r3, r3, #1
 800514c:	6013      	str	r3, [r2, #0]
}
 800514e:	bf00      	nop
 8005150:	3724      	adds	r7, #36	@ 0x24
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
	...

0800515c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e267      	b.n	800563e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d075      	beq.n	8005266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800517a:	4b88      	ldr	r3, [pc, #544]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 030c 	and.w	r3, r3, #12
 8005182:	2b04      	cmp	r3, #4
 8005184:	d00c      	beq.n	80051a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005186:	4b85      	ldr	r3, [pc, #532]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800518e:	2b08      	cmp	r3, #8
 8005190:	d112      	bne.n	80051b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005192:	4b82      	ldr	r3, [pc, #520]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800519a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800519e:	d10b      	bne.n	80051b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a0:	4b7e      	ldr	r3, [pc, #504]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d05b      	beq.n	8005264 <HAL_RCC_OscConfig+0x108>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d157      	bne.n	8005264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e242      	b.n	800563e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051c0:	d106      	bne.n	80051d0 <HAL_RCC_OscConfig+0x74>
 80051c2:	4b76      	ldr	r3, [pc, #472]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a75      	ldr	r2, [pc, #468]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 80051c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	e01d      	b.n	800520c <HAL_RCC_OscConfig+0xb0>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051d8:	d10c      	bne.n	80051f4 <HAL_RCC_OscConfig+0x98>
 80051da:	4b70      	ldr	r3, [pc, #448]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a6f      	ldr	r2, [pc, #444]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 80051e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	4b6d      	ldr	r3, [pc, #436]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a6c      	ldr	r2, [pc, #432]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 80051ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	e00b      	b.n	800520c <HAL_RCC_OscConfig+0xb0>
 80051f4:	4b69      	ldr	r3, [pc, #420]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a68      	ldr	r2, [pc, #416]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 80051fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	4b66      	ldr	r3, [pc, #408]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a65      	ldr	r2, [pc, #404]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 8005206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800520a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d013      	beq.n	800523c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005214:	f7fe f816 	bl	8003244 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800521c:	f7fe f812 	bl	8003244 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b64      	cmp	r3, #100	@ 0x64
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e207      	b.n	800563e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800522e:	4b5b      	ldr	r3, [pc, #364]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0f0      	beq.n	800521c <HAL_RCC_OscConfig+0xc0>
 800523a:	e014      	b.n	8005266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523c:	f7fe f802 	bl	8003244 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005244:	f7fd fffe 	bl	8003244 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b64      	cmp	r3, #100	@ 0x64
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e1f3      	b.n	800563e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005256:	4b51      	ldr	r3, [pc, #324]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1f0      	bne.n	8005244 <HAL_RCC_OscConfig+0xe8>
 8005262:	e000      	b.n	8005266 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d063      	beq.n	800533a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005272:	4b4a      	ldr	r3, [pc, #296]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 030c 	and.w	r3, r3, #12
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00b      	beq.n	8005296 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800527e:	4b47      	ldr	r3, [pc, #284]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005286:	2b08      	cmp	r3, #8
 8005288:	d11c      	bne.n	80052c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800528a:	4b44      	ldr	r3, [pc, #272]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d116      	bne.n	80052c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005296:	4b41      	ldr	r3, [pc, #260]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d005      	beq.n	80052ae <HAL_RCC_OscConfig+0x152>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d001      	beq.n	80052ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e1c7      	b.n	800563e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ae:	4b3b      	ldr	r3, [pc, #236]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	4937      	ldr	r1, [pc, #220]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052c2:	e03a      	b.n	800533a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d020      	beq.n	800530e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052cc:	4b34      	ldr	r3, [pc, #208]	@ (80053a0 <HAL_RCC_OscConfig+0x244>)
 80052ce:	2201      	movs	r2, #1
 80052d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d2:	f7fd ffb7 	bl	8003244 <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d8:	e008      	b.n	80052ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052da:	f7fd ffb3 	bl	8003244 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e1a8      	b.n	800563e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ec:	4b2b      	ldr	r3, [pc, #172]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0f0      	beq.n	80052da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f8:	4b28      	ldr	r3, [pc, #160]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	4925      	ldr	r1, [pc, #148]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 8005308:	4313      	orrs	r3, r2
 800530a:	600b      	str	r3, [r1, #0]
 800530c:	e015      	b.n	800533a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800530e:	4b24      	ldr	r3, [pc, #144]	@ (80053a0 <HAL_RCC_OscConfig+0x244>)
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005314:	f7fd ff96 	bl	8003244 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800531c:	f7fd ff92 	bl	8003244 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e187      	b.n	800563e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800532e:	4b1b      	ldr	r3, [pc, #108]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f0      	bne.n	800531c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	2b00      	cmp	r3, #0
 8005344:	d036      	beq.n	80053b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d016      	beq.n	800537c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800534e:	4b15      	ldr	r3, [pc, #84]	@ (80053a4 <HAL_RCC_OscConfig+0x248>)
 8005350:	2201      	movs	r2, #1
 8005352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005354:	f7fd ff76 	bl	8003244 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800535c:	f7fd ff72 	bl	8003244 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e167      	b.n	800563e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800536e:	4b0b      	ldr	r3, [pc, #44]	@ (800539c <HAL_RCC_OscConfig+0x240>)
 8005370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0f0      	beq.n	800535c <HAL_RCC_OscConfig+0x200>
 800537a:	e01b      	b.n	80053b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800537c:	4b09      	ldr	r3, [pc, #36]	@ (80053a4 <HAL_RCC_OscConfig+0x248>)
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005382:	f7fd ff5f 	bl	8003244 <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005388:	e00e      	b.n	80053a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800538a:	f7fd ff5b 	bl	8003244 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d907      	bls.n	80053a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e150      	b.n	800563e <HAL_RCC_OscConfig+0x4e2>
 800539c:	40023800 	.word	0x40023800
 80053a0:	42470000 	.word	0x42470000
 80053a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053a8:	4b88      	ldr	r3, [pc, #544]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 80053aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1ea      	bne.n	800538a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 8097 	beq.w	80054f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053c2:	2300      	movs	r3, #0
 80053c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053c6:	4b81      	ldr	r3, [pc, #516]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 80053c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10f      	bne.n	80053f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053d2:	2300      	movs	r3, #0
 80053d4:	60bb      	str	r3, [r7, #8]
 80053d6:	4b7d      	ldr	r3, [pc, #500]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 80053d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053da:	4a7c      	ldr	r2, [pc, #496]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 80053dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80053e2:	4b7a      	ldr	r3, [pc, #488]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 80053e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ea:	60bb      	str	r3, [r7, #8]
 80053ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053ee:	2301      	movs	r3, #1
 80053f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f2:	4b77      	ldr	r3, [pc, #476]	@ (80055d0 <HAL_RCC_OscConfig+0x474>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d118      	bne.n	8005430 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053fe:	4b74      	ldr	r3, [pc, #464]	@ (80055d0 <HAL_RCC_OscConfig+0x474>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a73      	ldr	r2, [pc, #460]	@ (80055d0 <HAL_RCC_OscConfig+0x474>)
 8005404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800540a:	f7fd ff1b 	bl	8003244 <HAL_GetTick>
 800540e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005410:	e008      	b.n	8005424 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005412:	f7fd ff17 	bl	8003244 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e10c      	b.n	800563e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005424:	4b6a      	ldr	r3, [pc, #424]	@ (80055d0 <HAL_RCC_OscConfig+0x474>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0f0      	beq.n	8005412 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d106      	bne.n	8005446 <HAL_RCC_OscConfig+0x2ea>
 8005438:	4b64      	ldr	r3, [pc, #400]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 800543a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800543c:	4a63      	ldr	r2, [pc, #396]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 800543e:	f043 0301 	orr.w	r3, r3, #1
 8005442:	6713      	str	r3, [r2, #112]	@ 0x70
 8005444:	e01c      	b.n	8005480 <HAL_RCC_OscConfig+0x324>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	2b05      	cmp	r3, #5
 800544c:	d10c      	bne.n	8005468 <HAL_RCC_OscConfig+0x30c>
 800544e:	4b5f      	ldr	r3, [pc, #380]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 8005450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005452:	4a5e      	ldr	r2, [pc, #376]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 8005454:	f043 0304 	orr.w	r3, r3, #4
 8005458:	6713      	str	r3, [r2, #112]	@ 0x70
 800545a:	4b5c      	ldr	r3, [pc, #368]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 800545c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800545e:	4a5b      	ldr	r2, [pc, #364]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 8005460:	f043 0301 	orr.w	r3, r3, #1
 8005464:	6713      	str	r3, [r2, #112]	@ 0x70
 8005466:	e00b      	b.n	8005480 <HAL_RCC_OscConfig+0x324>
 8005468:	4b58      	ldr	r3, [pc, #352]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 800546a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800546c:	4a57      	ldr	r2, [pc, #348]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 800546e:	f023 0301 	bic.w	r3, r3, #1
 8005472:	6713      	str	r3, [r2, #112]	@ 0x70
 8005474:	4b55      	ldr	r3, [pc, #340]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 8005476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005478:	4a54      	ldr	r2, [pc, #336]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 800547a:	f023 0304 	bic.w	r3, r3, #4
 800547e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d015      	beq.n	80054b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005488:	f7fd fedc 	bl	8003244 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800548e:	e00a      	b.n	80054a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005490:	f7fd fed8 	bl	8003244 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800549e:	4293      	cmp	r3, r2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e0cb      	b.n	800563e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a6:	4b49      	ldr	r3, [pc, #292]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 80054a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0ee      	beq.n	8005490 <HAL_RCC_OscConfig+0x334>
 80054b2:	e014      	b.n	80054de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054b4:	f7fd fec6 	bl	8003244 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054ba:	e00a      	b.n	80054d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054bc:	f7fd fec2 	bl	8003244 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e0b5      	b.n	800563e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054d2:	4b3e      	ldr	r3, [pc, #248]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 80054d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1ee      	bne.n	80054bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054de:	7dfb      	ldrb	r3, [r7, #23]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d105      	bne.n	80054f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054e4:	4b39      	ldr	r3, [pc, #228]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 80054e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e8:	4a38      	ldr	r2, [pc, #224]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 80054ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 80a1 	beq.w	800563c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054fa:	4b34      	ldr	r3, [pc, #208]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 030c 	and.w	r3, r3, #12
 8005502:	2b08      	cmp	r3, #8
 8005504:	d05c      	beq.n	80055c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d141      	bne.n	8005592 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800550e:	4b31      	ldr	r3, [pc, #196]	@ (80055d4 <HAL_RCC_OscConfig+0x478>)
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005514:	f7fd fe96 	bl	8003244 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800551c:	f7fd fe92 	bl	8003244 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e087      	b.n	800563e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800552e:	4b27      	ldr	r3, [pc, #156]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f0      	bne.n	800551c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69da      	ldr	r2, [r3, #28]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005548:	019b      	lsls	r3, r3, #6
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005550:	085b      	lsrs	r3, r3, #1
 8005552:	3b01      	subs	r3, #1
 8005554:	041b      	lsls	r3, r3, #16
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555c:	061b      	lsls	r3, r3, #24
 800555e:	491b      	ldr	r1, [pc, #108]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 8005560:	4313      	orrs	r3, r2
 8005562:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005564:	4b1b      	ldr	r3, [pc, #108]	@ (80055d4 <HAL_RCC_OscConfig+0x478>)
 8005566:	2201      	movs	r2, #1
 8005568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556a:	f7fd fe6b 	bl	8003244 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005572:	f7fd fe67 	bl	8003244 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e05c      	b.n	800563e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005584:	4b11      	ldr	r3, [pc, #68]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0f0      	beq.n	8005572 <HAL_RCC_OscConfig+0x416>
 8005590:	e054      	b.n	800563c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005592:	4b10      	ldr	r3, [pc, #64]	@ (80055d4 <HAL_RCC_OscConfig+0x478>)
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005598:	f7fd fe54 	bl	8003244 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a0:	f7fd fe50 	bl	8003244 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e045      	b.n	800563e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055b2:	4b06      	ldr	r3, [pc, #24]	@ (80055cc <HAL_RCC_OscConfig+0x470>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1f0      	bne.n	80055a0 <HAL_RCC_OscConfig+0x444>
 80055be:	e03d      	b.n	800563c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d107      	bne.n	80055d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e038      	b.n	800563e <HAL_RCC_OscConfig+0x4e2>
 80055cc:	40023800 	.word	0x40023800
 80055d0:	40007000 	.word	0x40007000
 80055d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005648 <HAL_RCC_OscConfig+0x4ec>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d028      	beq.n	8005638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d121      	bne.n	8005638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055fe:	429a      	cmp	r2, r3
 8005600:	d11a      	bne.n	8005638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005608:	4013      	ands	r3, r2
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800560e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005610:	4293      	cmp	r3, r2
 8005612:	d111      	bne.n	8005638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561e:	085b      	lsrs	r3, r3, #1
 8005620:	3b01      	subs	r3, #1
 8005622:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005624:	429a      	cmp	r2, r3
 8005626:	d107      	bne.n	8005638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005632:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005634:	429a      	cmp	r2, r3
 8005636:	d001      	beq.n	800563c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e000      	b.n	800563e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	40023800 	.word	0x40023800

0800564c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e0cc      	b.n	80057fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005660:	4b68      	ldr	r3, [pc, #416]	@ (8005804 <HAL_RCC_ClockConfig+0x1b8>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 030f 	and.w	r3, r3, #15
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d90c      	bls.n	8005688 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800566e:	4b65      	ldr	r3, [pc, #404]	@ (8005804 <HAL_RCC_ClockConfig+0x1b8>)
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005676:	4b63      	ldr	r3, [pc, #396]	@ (8005804 <HAL_RCC_ClockConfig+0x1b8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d001      	beq.n	8005688 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e0b8      	b.n	80057fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d020      	beq.n	80056d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d005      	beq.n	80056ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056a0:	4b59      	ldr	r3, [pc, #356]	@ (8005808 <HAL_RCC_ClockConfig+0x1bc>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	4a58      	ldr	r2, [pc, #352]	@ (8005808 <HAL_RCC_ClockConfig+0x1bc>)
 80056a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80056aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d005      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056b8:	4b53      	ldr	r3, [pc, #332]	@ (8005808 <HAL_RCC_ClockConfig+0x1bc>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	4a52      	ldr	r2, [pc, #328]	@ (8005808 <HAL_RCC_ClockConfig+0x1bc>)
 80056be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80056c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056c4:	4b50      	ldr	r3, [pc, #320]	@ (8005808 <HAL_RCC_ClockConfig+0x1bc>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	494d      	ldr	r1, [pc, #308]	@ (8005808 <HAL_RCC_ClockConfig+0x1bc>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d044      	beq.n	800576c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d107      	bne.n	80056fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ea:	4b47      	ldr	r3, [pc, #284]	@ (8005808 <HAL_RCC_ClockConfig+0x1bc>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d119      	bne.n	800572a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e07f      	b.n	80057fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d003      	beq.n	800570a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005706:	2b03      	cmp	r3, #3
 8005708:	d107      	bne.n	800571a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800570a:	4b3f      	ldr	r3, [pc, #252]	@ (8005808 <HAL_RCC_ClockConfig+0x1bc>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e06f      	b.n	80057fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800571a:	4b3b      	ldr	r3, [pc, #236]	@ (8005808 <HAL_RCC_ClockConfig+0x1bc>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e067      	b.n	80057fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800572a:	4b37      	ldr	r3, [pc, #220]	@ (8005808 <HAL_RCC_ClockConfig+0x1bc>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f023 0203 	bic.w	r2, r3, #3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	4934      	ldr	r1, [pc, #208]	@ (8005808 <HAL_RCC_ClockConfig+0x1bc>)
 8005738:	4313      	orrs	r3, r2
 800573a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800573c:	f7fd fd82 	bl	8003244 <HAL_GetTick>
 8005740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005742:	e00a      	b.n	800575a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005744:	f7fd fd7e 	bl	8003244 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005752:	4293      	cmp	r3, r2
 8005754:	d901      	bls.n	800575a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e04f      	b.n	80057fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800575a:	4b2b      	ldr	r3, [pc, #172]	@ (8005808 <HAL_RCC_ClockConfig+0x1bc>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f003 020c 	and.w	r2, r3, #12
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	429a      	cmp	r2, r3
 800576a:	d1eb      	bne.n	8005744 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800576c:	4b25      	ldr	r3, [pc, #148]	@ (8005804 <HAL_RCC_ClockConfig+0x1b8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 030f 	and.w	r3, r3, #15
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d20c      	bcs.n	8005794 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577a:	4b22      	ldr	r3, [pc, #136]	@ (8005804 <HAL_RCC_ClockConfig+0x1b8>)
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005782:	4b20      	ldr	r3, [pc, #128]	@ (8005804 <HAL_RCC_ClockConfig+0x1b8>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d001      	beq.n	8005794 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e032      	b.n	80057fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057a0:	4b19      	ldr	r3, [pc, #100]	@ (8005808 <HAL_RCC_ClockConfig+0x1bc>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	4916      	ldr	r1, [pc, #88]	@ (8005808 <HAL_RCC_ClockConfig+0x1bc>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d009      	beq.n	80057d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057be:	4b12      	ldr	r3, [pc, #72]	@ (8005808 <HAL_RCC_ClockConfig+0x1bc>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	490e      	ldr	r1, [pc, #56]	@ (8005808 <HAL_RCC_ClockConfig+0x1bc>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057d2:	f000 f821 	bl	8005818 <HAL_RCC_GetSysClockFreq>
 80057d6:	4602      	mov	r2, r0
 80057d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005808 <HAL_RCC_ClockConfig+0x1bc>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	091b      	lsrs	r3, r3, #4
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	490a      	ldr	r1, [pc, #40]	@ (800580c <HAL_RCC_ClockConfig+0x1c0>)
 80057e4:	5ccb      	ldrb	r3, [r1, r3]
 80057e6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ea:	4a09      	ldr	r2, [pc, #36]	@ (8005810 <HAL_RCC_ClockConfig+0x1c4>)
 80057ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80057ee:	4b09      	ldr	r3, [pc, #36]	@ (8005814 <HAL_RCC_ClockConfig+0x1c8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fd fce2 	bl	80031bc <HAL_InitTick>

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40023c00 	.word	0x40023c00
 8005808:	40023800 	.word	0x40023800
 800580c:	080084e8 	.word	0x080084e8
 8005810:	20000018 	.word	0x20000018
 8005814:	2000001c 	.word	0x2000001c

08005818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800581c:	b094      	sub	sp, #80	@ 0x50
 800581e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005830:	4b79      	ldr	r3, [pc, #484]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f003 030c 	and.w	r3, r3, #12
 8005838:	2b08      	cmp	r3, #8
 800583a:	d00d      	beq.n	8005858 <HAL_RCC_GetSysClockFreq+0x40>
 800583c:	2b08      	cmp	r3, #8
 800583e:	f200 80e1 	bhi.w	8005a04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <HAL_RCC_GetSysClockFreq+0x34>
 8005846:	2b04      	cmp	r3, #4
 8005848:	d003      	beq.n	8005852 <HAL_RCC_GetSysClockFreq+0x3a>
 800584a:	e0db      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800584c:	4b73      	ldr	r3, [pc, #460]	@ (8005a1c <HAL_RCC_GetSysClockFreq+0x204>)
 800584e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005850:	e0db      	b.n	8005a0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005852:	4b73      	ldr	r3, [pc, #460]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0x208>)
 8005854:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005856:	e0d8      	b.n	8005a0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005858:	4b6f      	ldr	r3, [pc, #444]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x200>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005860:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005862:	4b6d      	ldr	r3, [pc, #436]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d063      	beq.n	8005936 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800586e:	4b6a      	ldr	r3, [pc, #424]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	099b      	lsrs	r3, r3, #6
 8005874:	2200      	movs	r2, #0
 8005876:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005878:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800587a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005880:	633b      	str	r3, [r7, #48]	@ 0x30
 8005882:	2300      	movs	r3, #0
 8005884:	637b      	str	r3, [r7, #52]	@ 0x34
 8005886:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800588a:	4622      	mov	r2, r4
 800588c:	462b      	mov	r3, r5
 800588e:	f04f 0000 	mov.w	r0, #0
 8005892:	f04f 0100 	mov.w	r1, #0
 8005896:	0159      	lsls	r1, r3, #5
 8005898:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800589c:	0150      	lsls	r0, r2, #5
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4621      	mov	r1, r4
 80058a4:	1a51      	subs	r1, r2, r1
 80058a6:	6139      	str	r1, [r7, #16]
 80058a8:	4629      	mov	r1, r5
 80058aa:	eb63 0301 	sbc.w	r3, r3, r1
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058bc:	4659      	mov	r1, fp
 80058be:	018b      	lsls	r3, r1, #6
 80058c0:	4651      	mov	r1, sl
 80058c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058c6:	4651      	mov	r1, sl
 80058c8:	018a      	lsls	r2, r1, #6
 80058ca:	4651      	mov	r1, sl
 80058cc:	ebb2 0801 	subs.w	r8, r2, r1
 80058d0:	4659      	mov	r1, fp
 80058d2:	eb63 0901 	sbc.w	r9, r3, r1
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	f04f 0300 	mov.w	r3, #0
 80058de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058ea:	4690      	mov	r8, r2
 80058ec:	4699      	mov	r9, r3
 80058ee:	4623      	mov	r3, r4
 80058f0:	eb18 0303 	adds.w	r3, r8, r3
 80058f4:	60bb      	str	r3, [r7, #8]
 80058f6:	462b      	mov	r3, r5
 80058f8:	eb49 0303 	adc.w	r3, r9, r3
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800590a:	4629      	mov	r1, r5
 800590c:	024b      	lsls	r3, r1, #9
 800590e:	4621      	mov	r1, r4
 8005910:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005914:	4621      	mov	r1, r4
 8005916:	024a      	lsls	r2, r1, #9
 8005918:	4610      	mov	r0, r2
 800591a:	4619      	mov	r1, r3
 800591c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800591e:	2200      	movs	r2, #0
 8005920:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005922:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005924:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005928:	f7fa fc60 	bl	80001ec <__aeabi_uldivmod>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4613      	mov	r3, r2
 8005932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005934:	e058      	b.n	80059e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005936:	4b38      	ldr	r3, [pc, #224]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	099b      	lsrs	r3, r3, #6
 800593c:	2200      	movs	r2, #0
 800593e:	4618      	mov	r0, r3
 8005940:	4611      	mov	r1, r2
 8005942:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005946:	623b      	str	r3, [r7, #32]
 8005948:	2300      	movs	r3, #0
 800594a:	627b      	str	r3, [r7, #36]	@ 0x24
 800594c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005950:	4642      	mov	r2, r8
 8005952:	464b      	mov	r3, r9
 8005954:	f04f 0000 	mov.w	r0, #0
 8005958:	f04f 0100 	mov.w	r1, #0
 800595c:	0159      	lsls	r1, r3, #5
 800595e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005962:	0150      	lsls	r0, r2, #5
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4641      	mov	r1, r8
 800596a:	ebb2 0a01 	subs.w	sl, r2, r1
 800596e:	4649      	mov	r1, r9
 8005970:	eb63 0b01 	sbc.w	fp, r3, r1
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	f04f 0300 	mov.w	r3, #0
 800597c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005980:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005984:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005988:	ebb2 040a 	subs.w	r4, r2, sl
 800598c:	eb63 050b 	sbc.w	r5, r3, fp
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	00eb      	lsls	r3, r5, #3
 800599a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800599e:	00e2      	lsls	r2, r4, #3
 80059a0:	4614      	mov	r4, r2
 80059a2:	461d      	mov	r5, r3
 80059a4:	4643      	mov	r3, r8
 80059a6:	18e3      	adds	r3, r4, r3
 80059a8:	603b      	str	r3, [r7, #0]
 80059aa:	464b      	mov	r3, r9
 80059ac:	eb45 0303 	adc.w	r3, r5, r3
 80059b0:	607b      	str	r3, [r7, #4]
 80059b2:	f04f 0200 	mov.w	r2, #0
 80059b6:	f04f 0300 	mov.w	r3, #0
 80059ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059be:	4629      	mov	r1, r5
 80059c0:	028b      	lsls	r3, r1, #10
 80059c2:	4621      	mov	r1, r4
 80059c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059c8:	4621      	mov	r1, r4
 80059ca:	028a      	lsls	r2, r1, #10
 80059cc:	4610      	mov	r0, r2
 80059ce:	4619      	mov	r1, r3
 80059d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059d2:	2200      	movs	r2, #0
 80059d4:	61bb      	str	r3, [r7, #24]
 80059d6:	61fa      	str	r2, [r7, #28]
 80059d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059dc:	f7fa fc06 	bl	80001ec <__aeabi_uldivmod>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4613      	mov	r3, r2
 80059e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80059e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x200>)
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	0c1b      	lsrs	r3, r3, #16
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	3301      	adds	r3, #1
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80059f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a02:	e002      	b.n	8005a0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a04:	4b05      	ldr	r3, [pc, #20]	@ (8005a1c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3750      	adds	r7, #80	@ 0x50
 8005a10:	46bd      	mov	sp, r7
 8005a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a16:	bf00      	nop
 8005a18:	40023800 	.word	0x40023800
 8005a1c:	00f42400 	.word	0x00f42400
 8005a20:	007a1200 	.word	0x007a1200

08005a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a28:	4b03      	ldr	r3, [pc, #12]	@ (8005a38 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	20000018 	.word	0x20000018

08005a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a40:	f7ff fff0 	bl	8005a24 <HAL_RCC_GetHCLKFreq>
 8005a44:	4602      	mov	r2, r0
 8005a46:	4b05      	ldr	r3, [pc, #20]	@ (8005a5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	0a9b      	lsrs	r3, r3, #10
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	4903      	ldr	r1, [pc, #12]	@ (8005a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a52:	5ccb      	ldrb	r3, [r1, r3]
 8005a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	080084f8 	.word	0x080084f8

08005a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10b      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d105      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d075      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a98:	4b91      	ldr	r3, [pc, #580]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a9e:	f7fd fbd1 	bl	8003244 <HAL_GetTick>
 8005aa2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005aa6:	f7fd fbcd 	bl	8003244 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e189      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ab8:	4b8a      	ldr	r3, [pc, #552]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1f0      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d009      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	019a      	lsls	r2, r3, #6
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	071b      	lsls	r3, r3, #28
 8005adc:	4981      	ldr	r1, [pc, #516]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01f      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005af0:	4b7c      	ldr	r3, [pc, #496]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005af6:	0f1b      	lsrs	r3, r3, #28
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	019a      	lsls	r2, r3, #6
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	061b      	lsls	r3, r3, #24
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	071b      	lsls	r3, r3, #28
 8005b10:	4974      	ldr	r1, [pc, #464]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b18:	4b72      	ldr	r3, [pc, #456]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b1e:	f023 021f 	bic.w	r2, r3, #31
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	496e      	ldr	r1, [pc, #440]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00d      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	019a      	lsls	r2, r3, #6
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	061b      	lsls	r3, r3, #24
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	071b      	lsls	r3, r3, #28
 8005b50:	4964      	ldr	r1, [pc, #400]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b58:	4b61      	ldr	r3, [pc, #388]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b5e:	f7fd fb71 	bl	8003244 <HAL_GetTick>
 8005b62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b64:	e008      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b66:	f7fd fb6d 	bl	8003244 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d901      	bls.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e129      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b78:	4b5a      	ldr	r3, [pc, #360]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0f0      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d105      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d079      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b9c:	4b52      	ldr	r3, [pc, #328]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ba2:	f7fd fb4f 	bl	8003244 <HAL_GetTick>
 8005ba6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005baa:	f7fd fb4b 	bl	8003244 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e107      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bbc:	4b49      	ldr	r3, [pc, #292]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bc8:	d0ef      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0304 	and.w	r3, r3, #4
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d020      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005bd6:	4b43      	ldr	r3, [pc, #268]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bdc:	0f1b      	lsrs	r3, r3, #28
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	019a      	lsls	r2, r3, #6
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	061b      	lsls	r3, r3, #24
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	071b      	lsls	r3, r3, #28
 8005bf6:	493b      	ldr	r1, [pc, #236]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005bfe:	4b39      	ldr	r3, [pc, #228]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c04:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	021b      	lsls	r3, r3, #8
 8005c10:	4934      	ldr	r1, [pc, #208]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0308 	and.w	r3, r3, #8
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01e      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c24:	4b2f      	ldr	r3, [pc, #188]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c2a:	0e1b      	lsrs	r3, r3, #24
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	019a      	lsls	r2, r3, #6
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	061b      	lsls	r3, r3, #24
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	071b      	lsls	r3, r3, #28
 8005c44:	4927      	ldr	r1, [pc, #156]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005c4c:	4b25      	ldr	r3, [pc, #148]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c52:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5a:	4922      	ldr	r1, [pc, #136]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c62:	4b21      	ldr	r3, [pc, #132]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c68:	f7fd faec 	bl	8003244 <HAL_GetTick>
 8005c6c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c70:	f7fd fae8 	bl	8003244 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e0a4      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c82:	4b18      	ldr	r3, [pc, #96]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c8e:	d1ef      	bne.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 808b 	beq.w	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	4b10      	ldr	r3, [pc, #64]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005cba:	4b0c      	ldr	r3, [pc, #48]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cc6:	f7fd fabd 	bl	8003244 <HAL_GetTick>
 8005cca:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005ccc:	e010      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cce:	f7fd fab9 	bl	8003244 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d909      	bls.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e075      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005ce0:	42470068 	.word	0x42470068
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	42470070 	.word	0x42470070
 8005cec:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005cf0:	4b38      	ldr	r3, [pc, #224]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0e8      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cfc:	4b36      	ldr	r3, [pc, #216]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d04:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d02f      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d028      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d22:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d24:	4b2d      	ldr	r3, [pc, #180]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d30:	4a29      	ldr	r2, [pc, #164]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d36:	4b28      	ldr	r3, [pc, #160]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d114      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d42:	f7fd fa7f 	bl	8003244 <HAL_GetTick>
 8005d46:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d48:	e00a      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d4a:	f7fd fa7b 	bl	8003244 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e035      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d60:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0ee      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d78:	d10d      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005d7a:	4b17      	ldr	r3, [pc, #92]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d86:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d8e:	4912      	ldr	r1, [pc, #72]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	608b      	str	r3, [r1, #8]
 8005d94:	e005      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005d96:	4b10      	ldr	r3, [pc, #64]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	4a0f      	ldr	r2, [pc, #60]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d9c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005da0:	6093      	str	r3, [r2, #8]
 8005da2:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005da4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dae:	490a      	ldr	r1, [pc, #40]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d004      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005dc6:	4b06      	ldr	r3, [pc, #24]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005dc8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	40007000 	.word	0x40007000
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	42470e40 	.word	0x42470e40
 8005de0:	424711e0 	.word	0x424711e0

08005de4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e01c      	b.n	8005e30 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	795b      	ldrb	r3, [r3, #5]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d105      	bne.n	8005e0c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fc fd52 	bl	80028b0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0204 	orr.w	r2, r2, #4
 8005e20:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e07b      	b.n	8005f42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d108      	bne.n	8005e64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e5a:	d009      	beq.n	8005e70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	61da      	str	r2, [r3, #28]
 8005e62:	e005      	b.n	8005e70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d106      	bne.n	8005e90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fc fd32 	bl	80028f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ea6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005eea:	431a      	orrs	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef4:	ea42 0103 	orr.w	r1, r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	0c1b      	lsrs	r3, r3, #16
 8005f0e:	f003 0104 	and.w	r1, r3, #4
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f16:	f003 0210 	and.w	r2, r3, #16
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69da      	ldr	r2, [r3, #28]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b082      	sub	sp, #8
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e01a      	b.n	8005f92 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f72:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7fc fd05 	bl	8002984 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b088      	sub	sp, #32
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	60b9      	str	r1, [r7, #8]
 8005fa4:	603b      	str	r3, [r7, #0]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005faa:	f7fd f94b 	bl	8003244 <HAL_GetTick>
 8005fae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005fb0:	88fb      	ldrh	r3, [r7, #6]
 8005fb2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d001      	beq.n	8005fc4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e12a      	b.n	800621a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <HAL_SPI_Transmit+0x36>
 8005fca:	88fb      	ldrh	r3, [r7, #6]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e122      	b.n	800621a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_SPI_Transmit+0x48>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e11b      	b.n	800621a <HAL_SPI_Transmit+0x280>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2203      	movs	r2, #3
 8005fee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	88fa      	ldrh	r2, [r7, #6]
 8006002:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	88fa      	ldrh	r2, [r7, #6]
 8006008:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006030:	d10f      	bne.n	8006052 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006040:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006050:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605c:	2b40      	cmp	r3, #64	@ 0x40
 800605e:	d007      	beq.n	8006070 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800606e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006078:	d152      	bne.n	8006120 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <HAL_SPI_Transmit+0xee>
 8006082:	8b7b      	ldrh	r3, [r7, #26]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d145      	bne.n	8006114 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800608c:	881a      	ldrh	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006098:	1c9a      	adds	r2, r3, #2
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060ac:	e032      	b.n	8006114 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d112      	bne.n	80060e2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c0:	881a      	ldrh	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060cc:	1c9a      	adds	r2, r3, #2
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	86da      	strh	r2, [r3, #54]	@ 0x36
 80060e0:	e018      	b.n	8006114 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060e2:	f7fd f8af 	bl	8003244 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d803      	bhi.n	80060fa <HAL_SPI_Transmit+0x160>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d102      	bne.n	8006100 <HAL_SPI_Transmit+0x166>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d109      	bne.n	8006114 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e082      	b.n	800621a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1c7      	bne.n	80060ae <HAL_SPI_Transmit+0x114>
 800611e:	e053      	b.n	80061c8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <HAL_SPI_Transmit+0x194>
 8006128:	8b7b      	ldrh	r3, [r7, #26]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d147      	bne.n	80061be <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	330c      	adds	r3, #12
 8006138:	7812      	ldrb	r2, [r2, #0]
 800613a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800614a:	b29b      	uxth	r3, r3
 800614c:	3b01      	subs	r3, #1
 800614e:	b29a      	uxth	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006154:	e033      	b.n	80061be <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b02      	cmp	r3, #2
 8006162:	d113      	bne.n	800618c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	330c      	adds	r3, #12
 800616e:	7812      	ldrb	r2, [r2, #0]
 8006170:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006180:	b29b      	uxth	r3, r3
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	86da      	strh	r2, [r3, #54]	@ 0x36
 800618a:	e018      	b.n	80061be <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800618c:	f7fd f85a 	bl	8003244 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	429a      	cmp	r2, r3
 800619a:	d803      	bhi.n	80061a4 <HAL_SPI_Transmit+0x20a>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a2:	d102      	bne.n	80061aa <HAL_SPI_Transmit+0x210>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d109      	bne.n	80061be <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e02d      	b.n	800621a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1c6      	bne.n	8006156 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061c8:	69fa      	ldr	r2, [r7, #28]
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 f8bf 	bl	8006350 <SPI_EndRxTxTransaction>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2220      	movs	r2, #32
 80061dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10a      	bne.n	80061fc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061e6:	2300      	movs	r3, #0
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006218:	2300      	movs	r3, #0
  }
}
 800621a:	4618      	mov	r0, r3
 800621c:	3720      	adds	r7, #32
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006230:	b2db      	uxtb	r3, r3
}
 8006232:	4618      	mov	r0, r3
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
	...

08006240 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b088      	sub	sp, #32
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	603b      	str	r3, [r7, #0]
 800624c:	4613      	mov	r3, r2
 800624e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006250:	f7fc fff8 	bl	8003244 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	4413      	add	r3, r2
 800625e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006260:	f7fc fff0 	bl	8003244 <HAL_GetTick>
 8006264:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006266:	4b39      	ldr	r3, [pc, #228]	@ (800634c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	015b      	lsls	r3, r3, #5
 800626c:	0d1b      	lsrs	r3, r3, #20
 800626e:	69fa      	ldr	r2, [r7, #28]
 8006270:	fb02 f303 	mul.w	r3, r2, r3
 8006274:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006276:	e054      	b.n	8006322 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627e:	d050      	beq.n	8006322 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006280:	f7fc ffe0 	bl	8003244 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	429a      	cmp	r2, r3
 800628e:	d902      	bls.n	8006296 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d13d      	bne.n	8006312 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80062a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062ae:	d111      	bne.n	80062d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062b8:	d004      	beq.n	80062c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062c2:	d107      	bne.n	80062d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062dc:	d10f      	bne.n	80062fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e017      	b.n	8006342 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	3b01      	subs	r3, #1
 8006320:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4013      	ands	r3, r2
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	429a      	cmp	r2, r3
 8006330:	bf0c      	ite	eq
 8006332:	2301      	moveq	r3, #1
 8006334:	2300      	movne	r3, #0
 8006336:	b2db      	uxtb	r3, r3
 8006338:	461a      	mov	r2, r3
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	429a      	cmp	r2, r3
 800633e:	d19b      	bne.n	8006278 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3720      	adds	r7, #32
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20000018 	.word	0x20000018

08006350 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af02      	add	r7, sp, #8
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2201      	movs	r2, #1
 8006364:	2102      	movs	r1, #2
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f7ff ff6a 	bl	8006240 <SPI_WaitFlagStateUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d007      	beq.n	8006382 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006376:	f043 0220 	orr.w	r2, r3, #32
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e032      	b.n	80063e8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006382:	4b1b      	ldr	r3, [pc, #108]	@ (80063f0 <SPI_EndRxTxTransaction+0xa0>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a1b      	ldr	r2, [pc, #108]	@ (80063f4 <SPI_EndRxTxTransaction+0xa4>)
 8006388:	fba2 2303 	umull	r2, r3, r2, r3
 800638c:	0d5b      	lsrs	r3, r3, #21
 800638e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006392:	fb02 f303 	mul.w	r3, r2, r3
 8006396:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063a0:	d112      	bne.n	80063c8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2200      	movs	r2, #0
 80063aa:	2180      	movs	r1, #128	@ 0x80
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f7ff ff47 	bl	8006240 <SPI_WaitFlagStateUntilTimeout>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d016      	beq.n	80063e6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063bc:	f043 0220 	orr.w	r2, r3, #32
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e00f      	b.n	80063e8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063de:	2b80      	cmp	r3, #128	@ 0x80
 80063e0:	d0f2      	beq.n	80063c8 <SPI_EndRxTxTransaction+0x78>
 80063e2:	e000      	b.n	80063e6 <SPI_EndRxTxTransaction+0x96>
        break;
 80063e4:	bf00      	nop
  }

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3718      	adds	r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	20000018 	.word	0x20000018
 80063f4:	165e9f81 	.word	0x165e9f81

080063f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e041      	b.n	800648e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7fc face 	bl	80029c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3304      	adds	r3, #4
 8006434:	4619      	mov	r1, r3
 8006436:	4610      	mov	r0, r2
 8006438:	f000 f8f4 	bl	8006624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d101      	bne.n	80064b2 <HAL_TIM_ConfigClockSource+0x1c>
 80064ae:	2302      	movs	r3, #2
 80064b0:	e0b4      	b.n	800661c <HAL_TIM_ConfigClockSource+0x186>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2202      	movs	r2, #2
 80064be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80064d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064ea:	d03e      	beq.n	800656a <HAL_TIM_ConfigClockSource+0xd4>
 80064ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064f0:	f200 8087 	bhi.w	8006602 <HAL_TIM_ConfigClockSource+0x16c>
 80064f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064f8:	f000 8086 	beq.w	8006608 <HAL_TIM_ConfigClockSource+0x172>
 80064fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006500:	d87f      	bhi.n	8006602 <HAL_TIM_ConfigClockSource+0x16c>
 8006502:	2b70      	cmp	r3, #112	@ 0x70
 8006504:	d01a      	beq.n	800653c <HAL_TIM_ConfigClockSource+0xa6>
 8006506:	2b70      	cmp	r3, #112	@ 0x70
 8006508:	d87b      	bhi.n	8006602 <HAL_TIM_ConfigClockSource+0x16c>
 800650a:	2b60      	cmp	r3, #96	@ 0x60
 800650c:	d050      	beq.n	80065b0 <HAL_TIM_ConfigClockSource+0x11a>
 800650e:	2b60      	cmp	r3, #96	@ 0x60
 8006510:	d877      	bhi.n	8006602 <HAL_TIM_ConfigClockSource+0x16c>
 8006512:	2b50      	cmp	r3, #80	@ 0x50
 8006514:	d03c      	beq.n	8006590 <HAL_TIM_ConfigClockSource+0xfa>
 8006516:	2b50      	cmp	r3, #80	@ 0x50
 8006518:	d873      	bhi.n	8006602 <HAL_TIM_ConfigClockSource+0x16c>
 800651a:	2b40      	cmp	r3, #64	@ 0x40
 800651c:	d058      	beq.n	80065d0 <HAL_TIM_ConfigClockSource+0x13a>
 800651e:	2b40      	cmp	r3, #64	@ 0x40
 8006520:	d86f      	bhi.n	8006602 <HAL_TIM_ConfigClockSource+0x16c>
 8006522:	2b30      	cmp	r3, #48	@ 0x30
 8006524:	d064      	beq.n	80065f0 <HAL_TIM_ConfigClockSource+0x15a>
 8006526:	2b30      	cmp	r3, #48	@ 0x30
 8006528:	d86b      	bhi.n	8006602 <HAL_TIM_ConfigClockSource+0x16c>
 800652a:	2b20      	cmp	r3, #32
 800652c:	d060      	beq.n	80065f0 <HAL_TIM_ConfigClockSource+0x15a>
 800652e:	2b20      	cmp	r3, #32
 8006530:	d867      	bhi.n	8006602 <HAL_TIM_ConfigClockSource+0x16c>
 8006532:	2b00      	cmp	r3, #0
 8006534:	d05c      	beq.n	80065f0 <HAL_TIM_ConfigClockSource+0x15a>
 8006536:	2b10      	cmp	r3, #16
 8006538:	d05a      	beq.n	80065f0 <HAL_TIM_ConfigClockSource+0x15a>
 800653a:	e062      	b.n	8006602 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800654c:	f000 f990 	bl	8006870 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800655e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	609a      	str	r2, [r3, #8]
      break;
 8006568:	e04f      	b.n	800660a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800657a:	f000 f979 	bl	8006870 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800658c:	609a      	str	r2, [r3, #8]
      break;
 800658e:	e03c      	b.n	800660a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800659c:	461a      	mov	r2, r3
 800659e:	f000 f8ed 	bl	800677c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2150      	movs	r1, #80	@ 0x50
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 f946 	bl	800683a <TIM_ITRx_SetConfig>
      break;
 80065ae:	e02c      	b.n	800660a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065bc:	461a      	mov	r2, r3
 80065be:	f000 f90c 	bl	80067da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2160      	movs	r1, #96	@ 0x60
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 f936 	bl	800683a <TIM_ITRx_SetConfig>
      break;
 80065ce:	e01c      	b.n	800660a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065dc:	461a      	mov	r2, r3
 80065de:	f000 f8cd 	bl	800677c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2140      	movs	r1, #64	@ 0x40
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 f926 	bl	800683a <TIM_ITRx_SetConfig>
      break;
 80065ee:	e00c      	b.n	800660a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4619      	mov	r1, r3
 80065fa:	4610      	mov	r0, r2
 80065fc:	f000 f91d 	bl	800683a <TIM_ITRx_SetConfig>
      break;
 8006600:	e003      	b.n	800660a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	73fb      	strb	r3, [r7, #15]
      break;
 8006606:	e000      	b.n	800660a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006608:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800661a:	7bfb      	ldrb	r3, [r7, #15]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a46      	ldr	r2, [pc, #280]	@ (8006750 <TIM_Base_SetConfig+0x12c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d013      	beq.n	8006664 <TIM_Base_SetConfig+0x40>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006642:	d00f      	beq.n	8006664 <TIM_Base_SetConfig+0x40>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a43      	ldr	r2, [pc, #268]	@ (8006754 <TIM_Base_SetConfig+0x130>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00b      	beq.n	8006664 <TIM_Base_SetConfig+0x40>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a42      	ldr	r2, [pc, #264]	@ (8006758 <TIM_Base_SetConfig+0x134>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d007      	beq.n	8006664 <TIM_Base_SetConfig+0x40>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a41      	ldr	r2, [pc, #260]	@ (800675c <TIM_Base_SetConfig+0x138>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_Base_SetConfig+0x40>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a40      	ldr	r2, [pc, #256]	@ (8006760 <TIM_Base_SetConfig+0x13c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d108      	bne.n	8006676 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800666a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a35      	ldr	r2, [pc, #212]	@ (8006750 <TIM_Base_SetConfig+0x12c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d02b      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006684:	d027      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a32      	ldr	r2, [pc, #200]	@ (8006754 <TIM_Base_SetConfig+0x130>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d023      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a31      	ldr	r2, [pc, #196]	@ (8006758 <TIM_Base_SetConfig+0x134>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d01f      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a30      	ldr	r2, [pc, #192]	@ (800675c <TIM_Base_SetConfig+0x138>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01b      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a2f      	ldr	r2, [pc, #188]	@ (8006760 <TIM_Base_SetConfig+0x13c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d017      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a2e      	ldr	r2, [pc, #184]	@ (8006764 <TIM_Base_SetConfig+0x140>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d013      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a2d      	ldr	r2, [pc, #180]	@ (8006768 <TIM_Base_SetConfig+0x144>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d00f      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a2c      	ldr	r2, [pc, #176]	@ (800676c <TIM_Base_SetConfig+0x148>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00b      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a2b      	ldr	r2, [pc, #172]	@ (8006770 <TIM_Base_SetConfig+0x14c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d007      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006774 <TIM_Base_SetConfig+0x150>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d003      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a29      	ldr	r2, [pc, #164]	@ (8006778 <TIM_Base_SetConfig+0x154>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d108      	bne.n	80066e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a10      	ldr	r2, [pc, #64]	@ (8006750 <TIM_Base_SetConfig+0x12c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d003      	beq.n	800671c <TIM_Base_SetConfig+0xf8>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a12      	ldr	r2, [pc, #72]	@ (8006760 <TIM_Base_SetConfig+0x13c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d103      	bne.n	8006724 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	691a      	ldr	r2, [r3, #16]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b01      	cmp	r3, #1
 8006734:	d105      	bne.n	8006742 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	f023 0201 	bic.w	r2, r3, #1
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	611a      	str	r2, [r3, #16]
  }
}
 8006742:	bf00      	nop
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	40010000 	.word	0x40010000
 8006754:	40000400 	.word	0x40000400
 8006758:	40000800 	.word	0x40000800
 800675c:	40000c00 	.word	0x40000c00
 8006760:	40010400 	.word	0x40010400
 8006764:	40014000 	.word	0x40014000
 8006768:	40014400 	.word	0x40014400
 800676c:	40014800 	.word	0x40014800
 8006770:	40001800 	.word	0x40001800
 8006774:	40001c00 	.word	0x40001c00
 8006778:	40002000 	.word	0x40002000

0800677c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	f023 0201 	bic.w	r2, r3, #1
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	011b      	lsls	r3, r3, #4
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f023 030a 	bic.w	r3, r3, #10
 80067b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	621a      	str	r2, [r3, #32]
}
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067da:	b480      	push	{r7}
 80067dc:	b087      	sub	sp, #28
 80067de:	af00      	add	r7, sp, #0
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	60b9      	str	r1, [r7, #8]
 80067e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	f023 0210 	bic.w	r2, r3, #16
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006804:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	031b      	lsls	r3, r3, #12
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	4313      	orrs	r3, r2
 800680e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006816:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	621a      	str	r2, [r3, #32]
}
 800682e:	bf00      	nop
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800683a:	b480      	push	{r7}
 800683c:	b085      	sub	sp, #20
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006850:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	f043 0307 	orr.w	r3, r3, #7
 800685c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	609a      	str	r2, [r3, #8]
}
 8006864:	bf00      	nop
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
 800687c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800688a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	021a      	lsls	r2, r3, #8
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	431a      	orrs	r2, r3
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	4313      	orrs	r3, r2
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	609a      	str	r2, [r3, #8]
}
 80068a4:	bf00      	nop
 80068a6:	371c      	adds	r7, #28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d101      	bne.n	80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068c4:	2302      	movs	r3, #2
 80068c6:	e05a      	b.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a21      	ldr	r2, [pc, #132]	@ (800698c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d022      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006914:	d01d      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a1d      	ldr	r2, [pc, #116]	@ (8006990 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d018      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a1b      	ldr	r2, [pc, #108]	@ (8006994 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d013      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a1a      	ldr	r2, [pc, #104]	@ (8006998 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d00e      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a18      	ldr	r2, [pc, #96]	@ (800699c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d009      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a17      	ldr	r2, [pc, #92]	@ (80069a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d004      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a15      	ldr	r2, [pc, #84]	@ (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d10c      	bne.n	800696c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	4313      	orrs	r3, r2
 8006962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40010000 	.word	0x40010000
 8006990:	40000400 	.word	0x40000400
 8006994:	40000800 	.word	0x40000800
 8006998:	40000c00 	.word	0x40000c00
 800699c:	40010400 	.word	0x40010400
 80069a0:	40014000 	.word	0x40014000
 80069a4:	40001800 	.word	0x40001800

080069a8 <memset>:
 80069a8:	4402      	add	r2, r0
 80069aa:	4603      	mov	r3, r0
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d100      	bne.n	80069b2 <memset+0xa>
 80069b0:	4770      	bx	lr
 80069b2:	f803 1b01 	strb.w	r1, [r3], #1
 80069b6:	e7f9      	b.n	80069ac <memset+0x4>

080069b8 <__libc_init_array>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	4d0d      	ldr	r5, [pc, #52]	@ (80069f0 <__libc_init_array+0x38>)
 80069bc:	4c0d      	ldr	r4, [pc, #52]	@ (80069f4 <__libc_init_array+0x3c>)
 80069be:	1b64      	subs	r4, r4, r5
 80069c0:	10a4      	asrs	r4, r4, #2
 80069c2:	2600      	movs	r6, #0
 80069c4:	42a6      	cmp	r6, r4
 80069c6:	d109      	bne.n	80069dc <__libc_init_array+0x24>
 80069c8:	4d0b      	ldr	r5, [pc, #44]	@ (80069f8 <__libc_init_array+0x40>)
 80069ca:	4c0c      	ldr	r4, [pc, #48]	@ (80069fc <__libc_init_array+0x44>)
 80069cc:	f000 f818 	bl	8006a00 <_init>
 80069d0:	1b64      	subs	r4, r4, r5
 80069d2:	10a4      	asrs	r4, r4, #2
 80069d4:	2600      	movs	r6, #0
 80069d6:	42a6      	cmp	r6, r4
 80069d8:	d105      	bne.n	80069e6 <__libc_init_array+0x2e>
 80069da:	bd70      	pop	{r4, r5, r6, pc}
 80069dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e0:	4798      	blx	r3
 80069e2:	3601      	adds	r6, #1
 80069e4:	e7ee      	b.n	80069c4 <__libc_init_array+0xc>
 80069e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ea:	4798      	blx	r3
 80069ec:	3601      	adds	r6, #1
 80069ee:	e7f2      	b.n	80069d6 <__libc_init_array+0x1e>
 80069f0:	08008508 	.word	0x08008508
 80069f4:	08008508 	.word	0x08008508
 80069f8:	08008508 	.word	0x08008508
 80069fc:	0800850c 	.word	0x0800850c

08006a00 <_init>:
 8006a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a02:	bf00      	nop
 8006a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a06:	bc08      	pop	{r3}
 8006a08:	469e      	mov	lr, r3
 8006a0a:	4770      	bx	lr

08006a0c <_fini>:
 8006a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0e:	bf00      	nop
 8006a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a12:	bc08      	pop	{r3}
 8006a14:	469e      	mov	lr, r3
 8006a16:	4770      	bx	lr
